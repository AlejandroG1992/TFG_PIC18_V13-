

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Feb 16 17:19:18 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F26K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79  0000                     
    80                           	psect	idataCOMRAM
    81  0030E2                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _present_state
    85  0030E2  41                 	db	65
    86                           
    87                           	psect	idataBANK0
    88  0030AA                     __pidataBANK0:
    89                           	opt stack 0
    90                           
    91                           ;initializer for _Vdd
    92  0030AA  71                 	db	113
    93  0030AB  55                 	db	85
    94  0030AC  40                 	db	64
    95                           
    96                           ;initializer for _Vo
    97  0030AD  48                 	db	72
    98  0030AE  01                 	db	1
    99  0030AF  3F                 	db	63
   100                           
   101                           ;initializer for _sensibilidad
   102  0030B0  D7                 	db	215
   103  0030B1  23                 	db	35
   104  0030B2  3C                 	db	60
   105                           
   106                           ;initializer for _postscaler30smax
   107  0030B3  1F40               	dw	8000
   108                           
   109                           ;initializer for _postscalermax
   110  0030B5  03E8               	dw	1000
   111                           
   112                           ;initializer for _postscalersamplemax
   113  0030B7  00FA               	dw	250
   114                           
   115                           	psect	idataBANK1
   116  002E4C                     __pidataBANK1:
   117                           	opt stack 0
   118                           
   119                           ;initializer for _message1
   120  002E4C  54                 	db	84
   121  002E4D  65                 	db	101
   122  002E4E  6D                 	db	109
   123  002E4F  70                 	db	112
   124  002E50  20                 	db	32
   125  002E51  3D                 	db	61
   126  002E52  20                 	db	32
   127  002E53  30                 	db	48
   128  002E54  30                 	db	48
   129  002E55  2E                 	db	46
   130  002E56  30                 	db	48
   131  002E57  20                 	db	32
   132  002E58  43                 	db	67
   133  002E59  00                 	db	0
   134                           
   135                           ;initializer for _message2
   136  002E5A  52                 	db	82
   137  002E5B  48                 	db	72
   138  002E5C  20                 	db	32
   139  002E5D  20                 	db	32
   140  002E5E  20                 	db	32
   141  002E5F  3D                 	db	61
   142  002E60  20                 	db	32
   143  002E61  30                 	db	48
   144  002E62  30                 	db	48
   145  002E63  2E                 	db	46
   146  002E64  30                 	db	48
   147  002E65  20                 	db	32
   148  002E66  25                 	db	37
   149  002E67  00                 	db	0
   150                           
   151                           ;initializer for _CharTX
   152  002E68  48                 	db	72
   153  002E69  65                 	db	101
   154  002E6A  6C                 	db	108
   155  002E6B  6C                 	db	108
   156  002E6C  6F                 	db	111
   157  002E6D  20                 	db	32
   158  002E6E  57                 	db	87
   159  002E6F  6F                 	db	111
   160  002E70  72                 	db	114
   161  002E71  6C                 	db	108
   162  002E72  64                 	db	100
   163  002E73  00                 	db	0
   164                           
   165                           ;initializer for _CharTX2
   166  002E74  48                 	db	72
   167  002E75  65                 	db	101
   168  002E76  6C                 	db	108
   169  002E77  6C                 	db	108
   170  002E78  6F                 	db	111
   171  002E79  20                 	db	32
   172  002E7A  57                 	db	87
   173  002E7B  6F                 	db	111
   174  002E7C  72                 	db	114
   175  002E7D  6C                 	db	108
   176  002E7E  64                 	db	100
   177  002E7F  00                 	db	0
   178                           
   179                           	psect	mediumconst
   180  00FDFA                     __pmediumconst:
   181                           	opt stack 0
   182  00FDFA  00                 	db	0
   183  00FDFB                     _dpowers:
   184                           	opt stack 0
   185  00FDFB  0001               	dw	1
   186  00FDFD  0000               	dw	0
   187  00FDFF  000A               	dw	10
   188  00FE01  0000               	dw	0
   189  00FE03  0064               	dw	100
   190  00FE05  0000               	dw	0
   191  00FE07  03E8               	dw	1000
   192  00FE09  0000               	dw	0
   193  00FE0B  2710               	dw	10000
   194  00FE0D  0000               	dw	0
   195  00FE0F  86A0               	dw	34464
   196  00FE11  0001               	dw	1
   197  00FE13  4240               	dw	16960
   198  00FE15  000F               	dw	15
   199  00FE17  9680               	dw	38528
   200  00FE19  0098               	dw	152
   201  00FE1B  E100               	dw	57600
   202  00FE1D  05F5               	dw	1525
   203  00FE1F  CA00               	dw	51712
   204  00FE21  3B9A               	dw	15258
   205  00FE23                     __end_of_dpowers:
   206                           	opt stack 0
   207  00FE23                     __npowers_:
   208                           	opt stack 0
   209  00FE23  00                 	db	0
   210  00FE24  80                 	db	128
   211  00FE25  3F                 	db	63
   212  00FE26  CD                 	db	205
   213  00FE27  CC                 	db	204
   214  00FE28  3D                 	db	61
   215  00FE29  D7                 	db	215
   216  00FE2A  23                 	db	35
   217  00FE2B  3C                 	db	60
   218  00FE2C  12                 	db	18
   219  00FE2D  83                 	db	131
   220  00FE2E  3A                 	db	58
   221  00FE2F  B7                 	db	183
   222  00FE30  D1                 	db	209
   223  00FE31  38                 	db	56
   224  00FE32  C6                 	db	198
   225  00FE33  27                 	db	39
   226  00FE34  37                 	db	55
   227  00FE35  38                 	db	56
   228  00FE36  86                 	db	134
   229  00FE37  35                 	db	53
   230  00FE38  C0                 	db	192
   231  00FE39  D6                 	db	214
   232  00FE3A  33                 	db	51
   233  00FE3B  CC                 	db	204
   234  00FE3C  2B                 	db	43
   235  00FE3D  32                 	db	50
   236  00FE3E  70                 	db	112
   237  00FE3F  89                 	db	137
   238  00FE40  30                 	db	48
   239  00FE41  E7                 	db	231
   240  00FE42  DB                 	db	219
   241  00FE43  2E                 	db	46
   242  00FE44  E5                 	db	229
   243  00FE45  3C                 	db	60
   244  00FE46  1E                 	db	30
   245  00FE47  42                 	db	66
   246  00FE48  A2                 	db	162
   247  00FE49  0D                 	db	13
   248  00FE4A                     __end_of__npowers_:
   249                           	opt stack 0
   250  00FE4A                     __powers_:
   251                           	opt stack 0
   252  00FE4A  00                 	db	0
   253  00FE4B  80                 	db	128
   254  00FE4C  3F                 	db	63
   255  00FE4D  00                 	db	0
   256  00FE4E  20                 	db	32
   257  00FE4F  41                 	db	65
   258  00FE50  00                 	db	0
   259  00FE51  C8                 	db	200
   260  00FE52  42                 	db	66
   261  00FE53  00                 	db	0
   262  00FE54  7A                 	db	122
   263  00FE55  44                 	db	68
   264  00FE56  40                 	db	64
   265  00FE57  1C                 	db	28
   266  00FE58  46                 	db	70
   267  00FE59  50                 	db	80
   268  00FE5A  C3                 	db	195
   269  00FE5B  47                 	db	71
   270  00FE5C  24                 	db	36
   271  00FE5D  74                 	db	116
   272  00FE5E  49                 	db	73
   273  00FE5F  97                 	db	151
   274  00FE60  18                 	db	24
   275  00FE61  4B                 	db	75
   276  00FE62  BC                 	db	188
   277  00FE63  BE                 	db	190
   278  00FE64  4C                 	db	76
   279  00FE65  6B                 	db	107
   280  00FE66  6E                 	db	110
   281  00FE67  4E                 	db	78
   282  00FE68  03                 	db	3
   283  00FE69  15                 	db	21
   284  00FE6A  50                 	db	80
   285  00FE6B  79                 	db	121
   286  00FE6C  AD                 	db	173
   287  00FE6D  60                 	db	96
   288  00FE6E  F3                 	db	243
   289  00FE6F  49                 	db	73
   290  00FE70  71                 	db	113
   291  00FE71                     __end_of__powers_:
   292                           	opt stack 0
   293  00FE71                     log@coeff:
   294                           	opt stack 0
   295  00FE71  00                 	db	0
   296  00FE72  00                 	db	0
   297  00FE73  00                 	db	0
   298  00FE74  00                 	db	0
   299  00FE75  80                 	db	128
   300  00FE76  3F                 	db	63
   301  00FE77  F0                 	db	240
   302  00FE78  FF                 	db	255
   303  00FE79  BE                 	db	190
   304  00FE7A  E2                 	db	226
   305  00FE7B  A9                 	db	169
   306  00FE7C  3E                 	db	62
   307  00FE7D  83                 	db	131
   308  00FE7E  76                 	db	118
   309  00FE7F  BE                 	db	190
   310  00FE80  AE                 	db	174
   311  00FE81  2B                 	db	43
   312  00FE82  3E                 	db	62
   313  00FE83  3C                 	db	60
   314  00FE84  C3                 	db	195
   315  00FE85  BD                 	db	189
   316  00FE86  D2                 	db	210
   317  00FE87  13                 	db	19
   318  00FE88  3D                 	db	61
   319  00FE89  78                 	db	120
   320  00FE8A  D3                 	db	211
   321  00FE8B  BB                 	db	187
   322  00FE8C                     __end_oflog@coeff:
   323                           	opt stack 0
   324  0000                     _ADRES	set	4035
   325  0000                     _ADCON0bits	set	4034
   326  0000                     _INTCON2bits	set	4081
   327  0000                     _INTCONbits	set	4082
   328  0000                     _LATA	set	3977
   329  0000                     _LATB	set	3978
   330  0000                     _LATC	set	3979
   331  0000                     _OSCCON	set	4051
   332  0000                     _PIE1bits	set	3997
   333  0000                     _PIR1bits	set	3998
   334  0000                     _PORTA	set	3968
   335  0000                     _PORTB	set	3969
   336  0000                     _PORTBbits	set	3969
   337  0000                     _PORTC	set	3970
   338  0000                     _RCREG	set	4014
   339  0000                     _RCSTA	set	4011
   340  0000                     _RCSTAbits	set	4011
   341  0000                     _SPBRG	set	4015
   342  0000                     _SPBRGH	set	4016
   343  0000                     _SSPADD	set	4040
   344  0000                     _SSPBUF	set	4041
   345  0000                     _SSPCON1	set	4038
   346  0000                     _SSPCON1bits	set	4038
   347  0000                     _SSPCON2	set	4037
   348  0000                     _SSPCON2bits	set	4037
   349  0000                     _SSPSTAT	set	4039
   350  0000                     _SSPSTATbits	set	4039
   351  0000                     _T2CON	set	4042
   352  0000                     _T2CONbits	set	4042
   353  0000                     _T3CON	set	4017
   354  0000                     _T3CONbits	set	4017
   355  0000                     _TMR2	set	4044
   356  0000                     _TMR3H	set	4019
   357  0000                     _TMR3L	set	4018
   358  0000                     _TRISA	set	3986
   359  0000                     _TRISB	set	3987
   360  0000                     _TRISBbits	set	3987
   361  0000                     _TRISC	set	3988
   362  0000                     _TRISCbits	set	3988
   363  0000                     _TXREG	set	4013
   364  0000                     _TXSTA	set	4012
   365  0000                     _TXSTAbits	set	4012
   366  0000                     _ADFM	set	32263
   367  0000                     _ADON	set	32272
   368  0000                     _DONE	set	32273
   369  0000                     _GIE	set	32663
   370  0000                     _GO	set	32273
   371  0000                     _INT0IF	set	32657
   372  0000                     _PEIE	set	32662
   373  0000                     _RBIE	set	32659
   374  0000                     _RBIP	set	32648
   375  0000                     _RCIF	set	31989
   376  0000                     _TMR2IE	set	31977
   377  0000                     _TMR2IF	set	31985
   378  0000                     _TMR2ON	set	32338
   379  0000                     _TMR3IE	set	32001
   380  0000                     _TMR3IF	set	32009
   381  00FE8C                     STR_8:
   382  00FE8C  43                 	db	67	;'C'
   383  00FE8D  68                 	db	104	;'h'
   384  00FE8E  65                 	db	101	;'e'
   385  00FE8F  63                 	db	99	;'c'
   386  00FE90  6B                 	db	107	;'k'
   387  00FE91  73                 	db	115	;'s'
   388  00FE92  75                 	db	117	;'u'
   389  00FE93  6D                 	db	109	;'m'
   390  00FE94  20                 	db	32
   391  00FE95  45                 	db	69	;'E'
   392  00FE96  72                 	db	114	;'r'
   393  00FE97  72                 	db	114	;'r'
   394  00FE98  6F                 	db	111	;'o'
   395  00FE99  72                 	db	114	;'r'
   396  00FE9A  21                 	db	33
   397  00FE9B  20                 	db	32
   398  00FE9C  20                 	db	32
   399  00FE9D  20                 	db	32
   400  00FE9E  54                 	db	84	;'T'
   401  00FE9F  72                 	db	114	;'r'
   402  00FEA0  79                 	db	121	;'y'
   403  00FEA1  69                 	db	105	;'i'
   404  00FEA2  6E                 	db	110	;'n'
   405  00FEA3  67                 	db	103	;'g'
   406  00FEA4  20                 	db	32
   407  00FEA5  41                 	db	65	;'A'
   408  00FEA6  67                 	db	103	;'g'
   409  00FEA7  61                 	db	97	;'a'
   410  00FEA8  69                 	db	105	;'i'
   411  00FEA9  6E                 	db	110	;'n'
   412  00FEAA  20                 	db	32
   413  00FEAB  2E                 	db	46
   414  00FEAC  2E                 	db	46
   415  00FEAD  2E                 	db	46
   416  00FEAE  20                 	db	32
   417  00FEAF  00                 	db	0
   418  00FEB0                     STR_15:
   419  00FEB0  4E                 	db	78	;'N'
   420  00FEB1  6F                 	db	111	;'o'
   421  00FEB2  20                 	db	32
   422  00FEB3  72                 	db	114	;'r'
   423  00FEB4  65                 	db	101	;'e'
   424  00FEB5  73                 	db	115	;'s'
   425  00FEB6  70                 	db	112	;'p'
   426  00FEB7  6F                 	db	111	;'o'
   427  00FEB8  6E                 	db	110	;'n'
   428  00FEB9  73                 	db	115	;'s'
   429  00FEBA  65                 	db	101	;'e'
   430  00FEBB  20                 	db	32
   431  00FEBC  20                 	db	32
   432  00FEBD  66                 	db	102	;'f'
   433  00FEBE  72                 	db	114	;'r'
   434  00FEBF  6F                 	db	111	;'o'
   435  00FEC0  6D                 	db	109	;'m'
   436  00FEC1  20                 	db	32
   437  00FEC2  74                 	db	116	;'t'
   438  00FEC3  68                 	db	104	;'h'
   439  00FEC4  65                 	db	101	;'e'
   440  00FEC5  20                 	db	32
   441  00FEC6  73                 	db	115	;'s'
   442  00FEC7  65                 	db	101	;'e'
   443  00FEC8  6E                 	db	110	;'n'
   444  00FEC9  73                 	db	115	;'s'
   445  00FECA  6F                 	db	111	;'o'
   446  00FECB  72                 	db	114	;'r'
   447  00FECC  20                 	db	32
   448  00FECD  44                 	db	68	;'D'
   449  00FECE  48                 	db	72	;'H'
   450  00FECF  54                 	db	84	;'T'
   451  00FED0  32                 	db	50	;'2'
   452  00FED1  32                 	db	50	;'2'
   453  00FED2  00                 	db	0
   454  00FED3                     STR_4:
   455  00FED3  44                 	db	68	;'D'
   456  00FED4  41                 	db	65	;'A'
   457  00FED5  54                 	db	84	;'T'
   458  00FED6  41                 	db	65	;'A'
   459  00FED7  20                 	db	32
   460  00FED8  41                 	db	65	;'A'
   461  00FED9  4E                 	db	78	;'N'
   462  00FEDA  41                 	db	65	;'A'
   463  00FEDB  4C                 	db	76	;'L'
   464  00FEDC  4F                 	db	79	;'O'
   465  00FEDD  47                 	db	71	;'G'
   466  00FEDE  20                 	db	32
   467  00FEDF  3A                 	db	58	;':'
   468  00FEE0  54                 	db	84	;'T'
   469  00FEE1  65                 	db	101	;'e'
   470  00FEE2  6D                 	db	109	;'m'
   471  00FEE3  70                 	db	112	;'p'
   472  00FEE4  65                 	db	101	;'e'
   473  00FEE5  72                 	db	114	;'r'
   474  00FEE6  61                 	db	97	;'a'
   475  00FEE7  74                 	db	116	;'t'
   476  00FEE8  75                 	db	117	;'u'
   477  00FEE9  72                 	db	114	;'r'
   478  00FEEA  65                 	db	101	;'e'
   479  00FEEB  20                 	db	32
   480  00FEEC  3D                 	db	61	;'='
   481  00FEED  20                 	db	32
   482  00FEEE  25                 	db	37
   483  00FEEF  2E                 	db	46
   484  00FEF0  31                 	db	49	;'1'
   485  00FEF1  66                 	db	102	;'f'
   486  00FEF2  20                 	db	32
   487  00FEF3  43                 	db	67	;'C'
   488  00FEF4  00                 	db	0
   489  00FEF5                     STR_5:
   490  00FEF5  44                 	db	68	;'D'
   491  00FEF6  41                 	db	65	;'A'
   492  00FEF7  54                 	db	84	;'T'
   493  00FEF8  41                 	db	65	;'A'
   494  00FEF9  20                 	db	32
   495  00FEFA  44                 	db	68	;'D'
   496  00FEFB  48                 	db	72	;'H'
   497  00FEFC  54                 	db	84	;'T'
   498  00FEFD  32                 	db	50	;'2'
   499  00FEFE  32                 	db	50	;'2'
   500  00FEFF  20                 	db	32
   501  00FF00  3A                 	db	58	;':'
   502  00FF01  54                 	db	84	;'T'
   503  00FF02  65                 	db	101	;'e'
   504  00FF03  6D                 	db	109	;'m'
   505  00FF04  70                 	db	112	;'p'
   506  00FF05  65                 	db	101	;'e'
   507  00FF06  72                 	db	114	;'r'
   508  00FF07  61                 	db	97	;'a'
   509  00FF08  74                 	db	116	;'t'
   510  00FF09  75                 	db	117	;'u'
   511  00FF0A  72                 	db	114	;'r'
   512  00FF0B  65                 	db	101	;'e'
   513  00FF0C  20                 	db	32
   514  00FF0D  3D                 	db	61	;'='
   515  00FF0E  20                 	db	32
   516  00FF0F  2D                 	db	45
   517  00FF10  25                 	db	37
   518  00FF11  2E                 	db	46
   519  00FF12  31                 	db	49	;'1'
   520  00FF13  66                 	db	102	;'f'
   521  00FF14  20                 	db	32
   522  00FF15  43                 	db	67	;'C'
   523  00FF16  00                 	db	0
   524  00FF17                     STR_6:
   525  00FF17  44                 	db	68	;'D'
   526  00FF18  41                 	db	65	;'A'
   527  00FF19  54                 	db	84	;'T'
   528  00FF1A  41                 	db	65	;'A'
   529  00FF1B  20                 	db	32
   530  00FF1C  44                 	db	68	;'D'
   531  00FF1D  48                 	db	72	;'H'
   532  00FF1E  54                 	db	84	;'T'
   533  00FF1F  32                 	db	50	;'2'
   534  00FF20  32                 	db	50	;'2'
   535  00FF21  20                 	db	32
   536  00FF22  3A                 	db	58	;':'
   537  00FF23  54                 	db	84	;'T'
   538  00FF24  65                 	db	101	;'e'
   539  00FF25  6D                 	db	109	;'m'
   540  00FF26  70                 	db	112	;'p'
   541  00FF27  65                 	db	101	;'e'
   542  00FF28  72                 	db	114	;'r'
   543  00FF29  61                 	db	97	;'a'
   544  00FF2A  74                 	db	116	;'t'
   545  00FF2B  75                 	db	117	;'u'
   546  00FF2C  72                 	db	114	;'r'
   547  00FF2D  65                 	db	101	;'e'
   548  00FF2E  20                 	db	32
   549  00FF2F  3D                 	db	61	;'='
   550  00FF30  20                 	db	32
   551  00FF31  25                 	db	37
   552  00FF32  2E                 	db	46
   553  00FF33  31                 	db	49	;'1'
   554  00FF34  66                 	db	102	;'f'
   555  00FF35  20                 	db	32
   556  00FF36  43                 	db	67	;'C'
   557  00FF37  00                 	db	0
   558  00FF38                     STR_2:
   559  00FF38  44                 	db	68	;'D'
   560  00FF39  41                 	db	65	;'A'
   561  00FF3A  54                 	db	84	;'T'
   562  00FF3B  41                 	db	65	;'A'
   563  00FF3C  20                 	db	32
   564  00FF3D  41                 	db	65	;'A'
   565  00FF3E  4E                 	db	78	;'N'
   566  00FF3F  41                 	db	65	;'A'
   567  00FF40  4C                 	db	76	;'L'
   568  00FF41  4F                 	db	79	;'O'
   569  00FF42  47                 	db	71	;'G'
   570  00FF43  20                 	db	32
   571  00FF44  3A                 	db	58	;':'
   572  00FF45  48                 	db	72	;'H'
   573  00FF46  75                 	db	117	;'u'
   574  00FF47  6D                 	db	109	;'m'
   575  00FF48  65                 	db	101	;'e'
   576  00FF49  64                 	db	100	;'d'
   577  00FF4A  61                 	db	97	;'a'
   578  00FF4B  64                 	db	100	;'d'
   579  00FF4C  20                 	db	32
   580  00FF4D  54                 	db	84	;'T'
   581  00FF4E  49                 	db	73	;'I'
   582  00FF4F  45                 	db	69	;'E'
   583  00FF50  52                 	db	82	;'R'
   584  00FF51  52                 	db	82	;'R'
   585  00FF52  41                 	db	65	;'A'
   586  00FF53  20                 	db	32
   587  00FF54  3D                 	db	61	;'='
   588  00FF55  20                 	db	32
   589  00FF56  25                 	db	37
   590  00FF57  64                 	db	100	;'d'
   591  00FF58  00                 	db	0
   592  00FF59                     STR_7:
   593  00FF59  44                 	db	68	;'D'
   594  00FF5A  41                 	db	65	;'A'
   595  00FF5B  54                 	db	84	;'T'
   596  00FF5C  41                 	db	65	;'A'
   597  00FF5D  20                 	db	32
   598  00FF5E  44                 	db	68	;'D'
   599  00FF5F  48                 	db	72	;'H'
   600  00FF60  54                 	db	84	;'T'
   601  00FF61  32                 	db	50	;'2'
   602  00FF62  32                 	db	50	;'2'
   603  00FF63  20                 	db	32
   604  00FF64  3A                 	db	58	;':'
   605  00FF65  48                 	db	72	;'H'
   606  00FF66  75                 	db	117	;'u'
   607  00FF67  6D                 	db	109	;'m'
   608  00FF68  69                 	db	105	;'i'
   609  00FF69  64                 	db	100	;'d'
   610  00FF6A  69                 	db	105	;'i'
   611  00FF6B  74                 	db	116	;'t'
   612  00FF6C  79                 	db	121	;'y'
   613  00FF6D  20                 	db	32
   614  00FF6E  3D                 	db	61	;'='
   615  00FF6F  20                 	db	32
   616  00FF70  25                 	db	37
   617  00FF71  2E                 	db	46
   618  00FF72  31                 	db	49	;'1'
   619  00FF73  66                 	db	102	;'f'
   620  00FF74  20                 	db	32
   621  00FF75  25                 	db	37
   622  00FF76  25                 	db	37
   623  00FF77  00                 	db	0
   624  00FF78                     STR_9:
   625  00FF78  44                 	db	68	;'D'
   626  00FF79  41                 	db	65	;'A'
   627  00FF7A  54                 	db	84	;'T'
   628  00FF7B  41                 	db	65	;'A'
   629  00FF7C  20                 	db	32
   630  00FF7D  49                 	db	73	;'I'
   631  00FF7E  32                 	db	50	;'2'
   632  00FF7F  43                 	db	67	;'C'
   633  00FF80  20                 	db	32
   634  00FF81  3A                 	db	58	;':'
   635  00FF82  54                 	db	84	;'T'
   636  00FF83  65                 	db	101	;'e'
   637  00FF84  6D                 	db	109	;'m'
   638  00FF85  70                 	db	112	;'p'
   639  00FF86  65                 	db	101	;'e'
   640  00FF87  72                 	db	114	;'r'
   641  00FF88  61                 	db	97	;'a'
   642  00FF89  74                 	db	116	;'t'
   643  00FF8A  75                 	db	117	;'u'
   644  00FF8B  72                 	db	114	;'r'
   645  00FF8C  65                 	db	101	;'e'
   646  00FF8D  20                 	db	32
   647  00FF8E  3D                 	db	61	;'='
   648  00FF8F  20                 	db	32
   649  00FF90  25                 	db	37
   650  00FF91  2E                 	db	46
   651  00FF92  31                 	db	49	;'1'
   652  00FF93  66                 	db	102	;'f'
   653  00FF94  20                 	db	32
   654  00FF95  43                 	db	67	;'C'
   655  00FF96  00                 	db	0
   656  00FF97                     STR_11:
   657  00FF97  44                 	db	68	;'D'
   658  00FF98  41                 	db	65	;'A'
   659  00FF99  54                 	db	84	;'T'
   660  00FF9A  41                 	db	65	;'A'
   661  00FF9B  20                 	db	32
   662  00FF9C  4C                 	db	76	;'L'
   663  00FF9D  44                 	db	68	;'D'
   664  00FF9E  52                 	db	82	;'R'
   665  00FF9F  20                 	db	32
   666  00FFA0  3A                 	db	58	;':'
   667  00FFA1  56                 	db	86	;'V'
   668  00FFA2  61                 	db	97	;'a'
   669  00FFA3  6C                 	db	108	;'l'
   670  00FFA4  6F                 	db	111	;'o'
   671  00FFA5  72                 	db	114	;'r'
   672  00FFA6  20                 	db	32
   673  00FFA7  41                 	db	65	;'A'
   674  00FFA8  6E                 	db	110	;'n'
   675  00FFA9  61                 	db	97	;'a'
   676  00FFAA  6C                 	db	108	;'l'
   677  00FFAB  6F                 	db	111	;'o'
   678  00FFAC  67                 	db	103	;'g'
   679  00FFAD  20                 	db	32
   680  00FFAE  3D                 	db	61	;'='
   681  00FFAF  20                 	db	32
   682  00FFB0  25                 	db	37
   683  00FFB1  64                 	db	100	;'d'
   684  00FFB2  00                 	db	0
   685  00FFB3                     STR_1:
   686  00FFB3  41                 	db	65	;'A'
   687  00FFB4  6E                 	db	110	;'n'
   688  00FFB5  61                 	db	97	;'a'
   689  00FFB6  6C                 	db	108	;'l'
   690  00FFB7  6F                 	db	111	;'o'
   691  00FFB8  67                 	db	103	;'g'
   692  00FFB9  20                 	db	32
   693  00FFBA  4D                 	db	77	;'M'
   694  00FFBB  6F                 	db	111	;'o'
   695  00FFBC  64                 	db	100	;'d'
   696  00FFBD  65                 	db	101	;'e'
   697  00FFBE  20                 	db	32
   698  00FFBF  41                 	db	65	;'A'
   699  00FFC0  63                 	db	99	;'c'
   700  00FFC1  71                 	db	113	;'q'
   701  00FFC2  75                 	db	117	;'u'
   702  00FFC3  69                 	db	105	;'i'
   703  00FFC4  72                 	db	114	;'r'
   704  00FFC5  69                 	db	105	;'i'
   705  00FFC6  6E                 	db	110	;'n'
   706  00FFC7  67                 	db	103	;'g'
   707  00FFC8  00                 	db	0
   708  00FFC9                     STR_3:
   709  00FFC9  49                 	db	73	;'I'
   710  00FFCA  32                 	db	50	;'2'
   711  00FFCB  43                 	db	67	;'C'
   712  00FFCC  20                 	db	32
   713  00FFCD  4D                 	db	77	;'M'
   714  00FFCE  6F                 	db	111	;'o'
   715  00FFCF  64                 	db	100	;'d'
   716  00FFD0  65                 	db	101	;'e'
   717  00FFD1  20                 	db	32
   718  00FFD2  41                 	db	65	;'A'
   719  00FFD3  63                 	db	99	;'c'
   720  00FFD4  71                 	db	113	;'q'
   721  00FFD5  75                 	db	117	;'u'
   722  00FFD6  69                 	db	105	;'i'
   723  00FFD7  72                 	db	114	;'r'
   724  00FFD8  69                 	db	105	;'i'
   725  00FFD9  6E                 	db	110	;'n'
   726  00FFDA  67                 	db	103	;'g'
   727  00FFDB  00                 	db	0
   728  00FFDC                     STR_13:
   729  00FFDC  49                 	db	73	;'I'
   730  00FFDD  64                 	db	100	;'d'
   731  00FFDE  6C                 	db	108	;'l'
   732  00FFDF  65                 	db	101	;'e'
   733  00FFE0  20                 	db	32
   734  00FFE1  6D                 	db	109	;'m'
   735  00FFE2  6F                 	db	111	;'o'
   736  00FFE3  64                 	db	100	;'d'
   737  00FFE4  65                 	db	101	;'e'
   738  00FFE5  20                 	db	32
   739  00FFE6  4F                 	db	79	;'O'
   740  00FFE7  4E                 	db	78	;'N'
   741  00FFE8  00                 	db	0
   742  00FFE9                     STR_10:
   743  00FFE9  4C                 	db	76	;'L'
   744  00FFEA  44                 	db	68	;'D'
   745  00FFEB  52                 	db	82	;'R'
   746  00FFEC  20                 	db	32
   747  00FFED  6D                 	db	109	;'m'
   748  00FFEE  6F                 	db	111	;'o'
   749  00FFEF  64                 	db	100	;'d'
   750  00FFF0  65                 	db	101	;'e'
   751  00FFF1  20                 	db	32
   752  00FFF2  4F                 	db	79	;'O'
   753  00FFF3  4E                 	db	78	;'N'
   754  00FFF4  00                 	db	0
   755  00FFF5                     STR_12:
   756  00FFF5  53                 	db	83	;'S'
   757  00FFF6  6C                 	db	108	;'l'
   758  00FFF7  65                 	db	101	;'e'
   759  00FFF8  65                 	db	101	;'e'
   760  00FFF9  70                 	db	112	;'p'
   761  00FFFA  20                 	db	32
   762  00FFFB  38                 	db	56	;'8'
   763  00FFFC  73                 	db	115	;'s'
   764  00FFFD  00                 	db	0
   765  0000                     
   766                           ; #config settings
   767  00FFFE  00                 	db	0	; dummy byte at the end
   768  0000                     
   769                           	psect	cinit
   770  0028F6                     __pcinit:
   771                           	opt stack 0
   772  0028F6                     start_initialization:
   773                           	opt stack 0
   774  0028F6                     __initialization:
   775                           	opt stack 0
   776                           
   777                           ; Clear objects allocated to BANK1 (20 bytes)
   778  0028F6  EE01  F034         	lfsr	0,__pbssBANK1
   779  0028FA  0E14               	movlw	20
   780  0028FC                     clear_0:
   781  0028FC  6AEE               	clrf	postinc0,c
   782  0028FE  06E8               	decf	wreg,f,c
   783  002900  E1FD               	bnz	clear_0
   784                           
   785                           ; Clear objects allocated to BANK0 (77 bytes)
   786  002902  EE00  F060         	lfsr	0,__pbssBANK0
   787  002906  0E4D               	movlw	77
   788  002908                     clear_1:
   789  002908  6AEE               	clrf	postinc0,c
   790  00290A  06E8               	decf	wreg,f,c
   791  00290C  E1FD               	bnz	clear_1
   792                           
   793                           ; Clear objects allocated to COMRAM (14 bytes)
   794  00290E  EE00  F041         	lfsr	0,__pbssCOMRAM
   795  002912  0E0E               	movlw	14
   796  002914                     clear_2:
   797  002914  6AEE               	clrf	postinc0,c
   798  002916  06E8               	decf	wreg,f,c
   799  002918  E1FD               	bnz	clear_2
   800                           
   801                           ; Initialize objects allocated to BANK1 (52 bytes)
   802                           ; load TBLPTR registers with __pidataBANK1
   803  00291A  0E4C               	movlw	low __pidataBANK1
   804  00291C  6EF6               	movwf	tblptrl,c
   805  00291E  0E2E               	movlw	high __pidataBANK1
   806  002920  6EF7               	movwf	tblptrh,c
   807  002922  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   808  002924  6EF8               	movwf	tblptru,c
   809  002926  EE01  F000         	lfsr	0,__pdataBANK1
   810  00292A  EE10 F034          	lfsr	1,52
   811  00292E                     copy_data0:
   812  00292E  0009               	tblrd		*+
   813  002930  CFF5 FFEE          	movff	tablat,postinc0
   814  002934  50E5               	movf	postdec1,w,c
   815  002936  50E1               	movf	fsr1l,w,c
   816  002938  E1FA               	bnz	copy_data0
   817                           
   818                           ; Initialize objects allocated to BANK0 (15 bytes)
   819                           ; load TBLPTR registers with __pidataBANK0
   820  00293A  0EAA               	movlw	low __pidataBANK0
   821  00293C  6EF6               	movwf	tblptrl,c
   822  00293E  0E30               	movlw	high __pidataBANK0
   823  002940  6EF7               	movwf	tblptrh,c
   824  002942  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   825  002944  6EF8               	movwf	tblptru,c
   826  002946  EE00  F0F1         	lfsr	0,__pdataBANK0
   827  00294A  EE10 F00F          	lfsr	1,15
   828  00294E                     copy_data1:
   829  00294E  0009               	tblrd		*+
   830  002950  CFF5 FFEE          	movff	tablat,postinc0
   831  002954  50E5               	movf	postdec1,w,c
   832  002956  50E1               	movf	fsr1l,w,c
   833  002958  E1FA               	bnz	copy_data1
   834                           
   835                           ; Initialize objects allocated to COMRAM (1 bytes)
   836                           ; load TBLPTR registers with __pidataCOMRAM
   837  00295A  0EE2               	movlw	low __pidataCOMRAM
   838  00295C  6EF6               	movwf	tblptrl,c
   839  00295E  0E30               	movlw	high __pidataCOMRAM
   840  002960  6EF7               	movwf	tblptrh,c
   841  002962  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   842  002964  6EF8               	movwf	tblptru,c
   843  002966  0009               	tblrd		*+	;fetch initializer
   844  002968  CFF5 F04F          	movff	tablat,__pdataCOMRAM
   845  00296C                     end_of_initialization:
   846                           	opt stack 0
   847  00296C                     __end_of__initialization:
   848                           	opt stack 0
   849  00296C  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   850  00296E  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   851  002970  0E00               	movlw	low (__Lmediumconst shr (0+16))
   852  002972  6EF8               	movwf	tblptru,c
   853  002974  0100               	movlb	0
   854  002976  EF58  F017         	goto	_main	;jump to C main() function
   855                           tblptru	equ	0xFF8
   856                           tblptrh	equ	0xFF7
   857                           tblptrl	equ	0xFF6
   858                           tablat	equ	0xFF5
   859                           postinc0	equ	0xFEE
   860                           wreg	equ	0xFE8
   861                           postdec1	equ	0xFE5
   862                           fsr1l	equ	0xFE1
   863                           
   864                           	psect	bssCOMRAM
   865  000041                     __pbssCOMRAM:
   866                           	opt stack 0
   867  000041                     _TOUT:
   868                           	opt stack 0
   869  000041                     	ds	2
   870  000043                     _Trigger:
   871                           	opt stack 0
   872  000043                     	ds	2
   873  000045                     _check:
   874                           	opt stack 0
   875  000045                     	ds	2
   876  000047                     _i:
   877                           	opt stack 0
   878  000047                     	ds	2
   879  000049                     _temp:
   880                           	opt stack 0
   881  000049                     	ds	2
   882  00004B                     _CharRX:
   883                           	opt stack 0
   884  00004B                     	ds	1
   885  00004C                     _USART_Status:
   886                           	opt stack 0
   887  00004C                     	ds	1
   888  00004D                     _dataI2C_Hum:
   889                           	opt stack 0
   890  00004D                     	ds	1
   891  00004E                     _dataI2C_Tem:
   892                           	opt stack 0
   893  00004E                     	ds	1
   894                           tblptru	equ	0xFF8
   895                           tblptrh	equ	0xFF7
   896                           tblptrl	equ	0xFF6
   897                           tablat	equ	0xFF5
   898                           postinc0	equ	0xFEE
   899                           wreg	equ	0xFE8
   900                           postdec1	equ	0xFE5
   901                           fsr1l	equ	0xFE1
   902                           
   903                           	psect	dataCOMRAM
   904  00004F                     __pdataCOMRAM:
   905                           	opt stack 0
   906  00004F                     _present_state:
   907                           	opt stack 0
   908  00004F                     	ds	1
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           postdec1	equ	0xFE5
   916                           fsr1l	equ	0xFE1
   917                           
   918                           	psect	bssBANK0
   919  000060                     __pbssBANK0:
   920                           	opt stack 0
   921  000060                     _I2C_Hum:
   922                           	opt stack 0
   923  000060                     	ds	4
   924  000064                     _I2C_Tem:
   925                           	opt stack 0
   926  000064                     	ds	4
   927  000068                     _I2C_HumFormula:
   928                           	opt stack 0
   929  000068                     	ds	3
   930  00006B                     _I2C_TemFormula:
   931                           	opt stack 0
   932  00006B                     	ds	3
   933  00006E                     _Valor_Medio_TA:
   934                           	opt stack 0
   935  00006E                     	ds	3
   936  000071                     _Value_pot:
   937                           	opt stack 0
   938  000071                     	ds	3
   939  000074                     _Value_rhdht22:
   940                           	opt stack 0
   941  000074                     	ds	3
   942  000077                     _Value_tempdht22:
   943                           	opt stack 0
   944  000077                     	ds	3
   945  00007A                     ADC@Value_AD:
   946                           	opt stack 0
   947  00007A                     	ds	2
   948  00007C                     _CheckSum:
   949                           	opt stack 0
   950  00007C                     	ds	2
   951  00007E                     _I2C_dev:
   952                           	opt stack 0
   953  00007E                     	ds	2
   954  000080                     _I2C_manu:
   955                           	opt stack 0
   956  000080                     	ds	2
   957  000082                     _RH_Byte1:
   958                           	opt stack 0
   959  000082                     	ds	2
   960  000084                     _RH_Byte2:
   961                           	opt stack 0
   962  000084                     	ds	2
   963  000086                     _SerialInterrupt_flag:
   964                           	opt stack 0
   965  000086                     	ds	2
   966  000088                     _T_Byte1:
   967                           	opt stack 0
   968  000088                     	ds	2
   969  00008A                     _T_Byte2:
   970                           	opt stack 0
   971  00008A                     	ds	2
   972  00008C                     _Valor_Medio_HT:
   973                           	opt stack 0
   974  00008C                     	ds	2
   975  00008E                     	ds	2
   976  000090                     _Value_AN0:
   977                           	opt stack 0
   978  000090                     	ds	2
   979  000092                     _Value_AN9:
   980                           	opt stack 0
   981  000092                     	ds	2
   982  000094                     _errno:
   983                           	opt stack 0
   984  000094                     	ds	2
   985  000096                     _postscaler:
   986                           	opt stack 0
   987  000096                     	ds	2
   988  000098                     _postscaler30s:
   989                           	opt stack 0
   990  000098                     	ds	2
   991  00009A                     _postscalerflag:
   992                           	opt stack 0
   993  00009A                     	ds	2
   994  00009C                     _postscalerflag30s:
   995                           	opt stack 0
   996  00009C                     	ds	2
   997  00009E                     _postscalersample:
   998                           	opt stack 0
   999  00009E                     	ds	2
  1000  0000A0                     _postscalersampleflag:
  1001                           	opt stack 0
  1002  0000A0                     	ds	2
  1003  0000A2                     _rh:
  1004                           	opt stack 0
  1005  0000A2                     	ds	2
  1006  0000A4                     _samples_num:
  1007                           	opt stack 0
  1008  0000A4                     	ds	2
  1009  0000A6                     _sign:
  1010                           	opt stack 0
  1011  0000A6                     	ds	2
  1012  0000A8                     _Value_temp:
  1013                           	opt stack 0
  1014  0000A8                     	ds	3
  1015  0000AB                     _Value_AN1:
  1016                           	opt stack 0
  1017  0000AB                     	ds	2
  1018                           tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           postinc0	equ	0xFEE
  1023                           wreg	equ	0xFE8
  1024                           postdec1	equ	0xFE5
  1025                           fsr1l	equ	0xFE1
  1026                           
  1027                           	psect	dataBANK0
  1028  0000F1                     __pdataBANK0:
  1029                           	opt stack 0
  1030  0000F1                     	ds	3
  1031  0000F4                     	ds	3
  1032  0000F7                     	ds	3
  1033  0000FA                     _postscaler30smax:
  1034                           	opt stack 0
  1035  0000FA                     	ds	2
  1036  0000FC                     _postscalermax:
  1037                           	opt stack 0
  1038  0000FC                     	ds	2
  1039  0000FE                     _postscalersamplemax:
  1040                           	opt stack 0
  1041  0000FE                     	ds	2
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postdec1	equ	0xFE5
  1049                           fsr1l	equ	0xFE1
  1050                           
  1051                           	psect	bssBANK1
  1052  000134                     __pbssBANK1:
  1053                           	opt stack 0
  1054  000134                     _Valor_Medio_TempAnalog:
  1055                           	opt stack 0
  1056  000134                     	ds	12
  1057  000140                     _Valor_Medio_HumedadTierra:
  1058                           	opt stack 0
  1059  000140                     	ds	8
  1060                           tblptru	equ	0xFF8
  1061                           tblptrh	equ	0xFF7
  1062                           tblptrl	equ	0xFF6
  1063                           tablat	equ	0xFF5
  1064                           postinc0	equ	0xFEE
  1065                           wreg	equ	0xFE8
  1066                           postdec1	equ	0xFE5
  1067                           fsr1l	equ	0xFE1
  1068                           
  1069                           	psect	dataBANK1
  1070  000100                     __pdataBANK1:
  1071                           	opt stack 0
  1072  000100                     _message1:
  1073                           	opt stack 0
  1074  000100                     	ds	14
  1075  00010E                     _message2:
  1076                           	opt stack 0
  1077  00010E                     	ds	14
  1078  00011C                     _CharTX:
  1079                           	opt stack 0
  1080  00011C                     	ds	12
  1081  000128                     _CharTX2:
  1082                           	opt stack 0
  1083  000128                     	ds	12
  1084                           tblptru	equ	0xFF8
  1085                           tblptrh	equ	0xFF7
  1086                           tblptrl	equ	0xFF6
  1087                           tablat	equ	0xFF5
  1088                           postinc0	equ	0xFEE
  1089                           wreg	equ	0xFE8
  1090                           postdec1	equ	0xFE5
  1091                           fsr1l	equ	0xFE1
  1092                           
  1093                           	psect	cstackBANK1
  1094  000148                     __pcstackBANK1:
  1095                           	opt stack 0
  1096  000148                     ??_output_logic:
  1097                           
  1098                           ; 0 bytes @ 0x0
  1099  000148                     	ds	2
  1100  00014A                     output_logic@error:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x2
  1104  00014A                     	ds	1
  1105  00014B                     _output_logic$2547:
  1106                           	opt stack 0
  1107                           
  1108                           ; 3 bytes @ 0x3
  1109  00014B                     	ds	3
  1110  00014E                     _output_logic$2548:
  1111                           	opt stack 0
  1112                           
  1113                           ; 3 bytes @ 0x6
  1114  00014E                     	ds	3
  1115  000151                     _output_logic$2549:
  1116                           	opt stack 0
  1117                           
  1118                           ; 3 bytes @ 0x9
  1119  000151                     	ds	3
  1120                           tblptru	equ	0xFF8
  1121                           tblptrh	equ	0xFF7
  1122                           tblptrl	equ	0xFF6
  1123                           tablat	equ	0xFF5
  1124                           postinc0	equ	0xFEE
  1125                           wreg	equ	0xFE8
  1126                           postdec1	equ	0xFE5
  1127                           fsr1l	equ	0xFE1
  1128                           
  1129                           	psect	cstackBANK0
  1130  0000AD                     __pcstackBANK0:
  1131                           	opt stack 0
  1132  0000AD                     ___ftmul@exp:
  1133                           	opt stack 0
  1134                           
  1135                           ; 1 bytes @ 0x0
  1136  0000AD                     	ds	1
  1137  0000AE                     ___ftmul@f3_as_product:
  1138                           	opt stack 0
  1139                           
  1140                           ; 3 bytes @ 0x1
  1141  0000AE                     	ds	3
  1142  0000B1                     ___ftmul@cntr:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x4
  1146  0000B1                     	ds	1
  1147  0000B2                     ___ftmul@sign:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0x5
  1151  0000B2                     	ds	1
  1152  0000B3                     ?_eval_poly:
  1153                           	opt stack 0
  1154  0000B3                     ?_fround:
  1155                           	opt stack 0
  1156  0000B3                     ?_scale:
  1157                           	opt stack 0
  1158  0000B3                     ?___ftneg:
  1159                           	opt stack 0
  1160  0000B3                     ___ftneg@f1:
  1161                           	opt stack 0
  1162  0000B3                     eval_poly@x:
  1163                           	opt stack 0
  1164                           
  1165                           ; 3 bytes @ 0x6
  1166  0000B3                     	ds	3
  1167  0000B6                     ?_ReadByte_I2C:
  1168                           	opt stack 0
  1169  0000B6                     ReadByte_I2C@RegisterAddress:
  1170                           	opt stack 0
  1171  0000B6                     eval_poly@d:
  1172                           	opt stack 0
  1173  0000B6                     _fround$2551:
  1174                           	opt stack 0
  1175  0000B6                     _scale$2552:
  1176                           	opt stack 0
  1177                           
  1178                           ; 3 bytes @ 0x9
  1179  0000B6                     	ds	2
  1180  0000B8                     eval_poly@n:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0xB
  1184  0000B8                     	ds	1
  1185  0000B9                     scale@scl:
  1186                           	opt stack 0
  1187  0000B9                     ReadByte_I2C@tmp:
  1188                           	opt stack 0
  1189  0000B9                     _fround$2550:
  1190                           	opt stack 0
  1191                           
  1192                           ; 3 bytes @ 0xC
  1193  0000B9                     	ds	1
  1194  0000BA                     ??_eval_poly:
  1195  0000BA                     ?___fttol:
  1196                           	opt stack 0
  1197  0000BA                     ___fttol@f1:
  1198                           	opt stack 0
  1199                           
  1200                           ; 3 bytes @ 0xD
  1201  0000BA                     	ds	1
  1202  0000BB                     _ReadByte_I2C$2546:
  1203                           	opt stack 0
  1204                           
  1205                           ; 3 bytes @ 0xE
  1206  0000BB                     	ds	1
  1207  0000BC                     fround@prec:
  1208                           	opt stack 0
  1209  0000BC                     eval_poly@res:
  1210                           	opt stack 0
  1211                           
  1212                           ; 3 bytes @ 0xF
  1213  0000BC                     	ds	2
  1214  0000BE                     ??___fttol:
  1215  0000BE                     ReadByte_I2C@Temperature:
  1216                           	opt stack 0
  1217                           
  1218                           ; 3 bytes @ 0x11
  1219  0000BE                     	ds	1
  1220  0000BF                     ?_log:
  1221                           	opt stack 0
  1222  0000BF                     log@x:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0x12
  1226  0000BF                     	ds	2
  1227  0000C1                     ReadByte_I2C@ReadAddressIC:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x14
  1231  0000C1                     	ds	1
  1232  0000C2                     ReadByte_I2C@LowerByte:
  1233                           	opt stack 0
  1234  0000C2                     log@exponent:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x15
  1238  0000C2                     	ds	1
  1239  0000C3                     ReadByte_I2C@UpperByte:
  1240                           	opt stack 0
  1241  0000C3                     ___fttol@sign1:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x16
  1245  0000C3                     	ds	1
  1246  0000C4                     ___fttol@lval:
  1247                           	opt stack 0
  1248                           
  1249                           ; 4 bytes @ 0x17
  1250  0000C4                     	ds	4
  1251  0000C8                     ___fttol@exp1:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x1B
  1255  0000C8                     	ds	1
  1256  0000C9                     ?_sprintf:
  1257                           	opt stack 0
  1258  0000C9                     sprintf@sp:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x1C
  1262  0000C9                     	ds	2
  1263  0000CB                     sprintf@f:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x1E
  1267  0000CB                     	ds	5
  1268  0000D0                     ??_sprintf:
  1269                           
  1270                           ; 0 bytes @ 0x23
  1271  0000D0                     	ds	6
  1272  0000D6                     _sprintf$2553:
  1273                           	opt stack 0
  1274                           
  1275                           ; 3 bytes @ 0x29
  1276  0000D6                     	ds	3
  1277  0000D9                     sprintf@cp:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x2C
  1281  0000D9                     	ds	2
  1282  0000DB                     sprintf@len:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x2E
  1286  0000DB                     	ds	2
  1287  0000DD                     sprintf@ap:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x30
  1291  0000DD                     	ds	2
  1292  0000DF                     sprintf@flag:
  1293                           	opt stack 0
  1294                           
  1295                           ; 2 bytes @ 0x32
  1296  0000DF                     	ds	2
  1297  0000E1                     sprintf@exp:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x34
  1301  0000E1                     	ds	2
  1302  0000E3                     sprintf@tmpval:
  1303                           	opt stack 0
  1304                           
  1305                           ; 4 bytes @ 0x36
  1306  0000E3                     	ds	4
  1307  0000E7                     sprintf@val:
  1308                           	opt stack 0
  1309                           
  1310                           ; 4 bytes @ 0x3A
  1311  0000E7                     	ds	4
  1312  0000EB                     sprintf@fval:
  1313                           	opt stack 0
  1314                           
  1315                           ; 3 bytes @ 0x3E
  1316  0000EB                     	ds	3
  1317  0000EE                     sprintf@prec:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0x41
  1321  0000EE                     	ds	2
  1322  0000F0                     sprintf@c:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0x43
  1326  0000F0                     	ds	1
  1327                           tblptru	equ	0xFF8
  1328                           tblptrh	equ	0xFF7
  1329                           tblptrl	equ	0xFF6
  1330                           tablat	equ	0xFF5
  1331                           postinc0	equ	0xFEE
  1332                           wreg	equ	0xFE8
  1333                           postdec1	equ	0xFE5
  1334                           fsr1l	equ	0xFE1
  1335                           
  1336                           	psect	cstackCOMRAM
  1337  000001                     __pcstackCOMRAM:
  1338                           	opt stack 0
  1339  000001                     ReadUSART@data:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x0
  1343  000001                     	ds	1
  1344  000002                     ??_IntServe:
  1345                           
  1346                           ; 0 bytes @ 0x1
  1347  000002                     	ds	14
  1348  000010                     ??_IdleI2C:
  1349  000010                     ??_isdigit:
  1350  000010                     ??_start_signal:
  1351  000010                     ?_GetSampleADC:
  1352                           	opt stack 0
  1353  000010                     ?_check_response:
  1354                           	opt stack 0
  1355  000010                     ?_read_byte:
  1356                           	opt stack 0
  1357  000010                     ?___awmod:
  1358                           	opt stack 0
  1359  000010                     ?___ftpack:
  1360                           	opt stack 0
  1361  000010                     ?_frexp:
  1362                           	opt stack 0
  1363  000010                     ?__tdiv_to_l_:
  1364                           	opt stack 0
  1365  000010                     ?__div_to_l_:
  1366                           	opt stack 0
  1367  000010                     ?___lldiv:
  1368                           	opt stack 0
  1369  000010                     state_logic@error:
  1370                           	opt stack 0
  1371  000010                     WriteUSART@data:
  1372                           	opt stack 0
  1373  000010                     OpenI2C@slew:
  1374                           	opt stack 0
  1375  000010                     SelectChannelADC@channel:
  1376                           	opt stack 0
  1377  000010                     OpenUSART@spbrg:
  1378                           	opt stack 0
  1379  000010                     ___awmod@dividend:
  1380                           	opt stack 0
  1381  000010                     __div_to_l_@f1:
  1382                           	opt stack 0
  1383  000010                     ___ftpack@arg:
  1384                           	opt stack 0
  1385  000010                     __tdiv_to_l_@f1:
  1386                           	opt stack 0
  1387  000010                     ___ftge@ff1:
  1388                           	opt stack 0
  1389  000010                     frexp@value:
  1390                           	opt stack 0
  1391  000010                     ___lldiv@dividend:
  1392                           	opt stack 0
  1393                           
  1394                           ; 4 bytes @ 0xF
  1395  000010                     	ds	1
  1396  000011                     OpenI2C@sync_mode:
  1397                           	opt stack 0
  1398  000011                     WriteI2C@data_out:
  1399                           	opt stack 0
  1400  000011                     _isdigit$2142:
  1401                           	opt stack 0
  1402  000011                     putsUSART@data:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x10
  1406  000011                     	ds	1
  1407  000012                     ??_SelectChannelADC:
  1408  000012                     ??_read_byte:
  1409  000012                     OpenUSART@config:
  1410                           	opt stack 0
  1411  000012                     isdigit@c:
  1412                           	opt stack 0
  1413  000012                     ___awmod@divisor:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x11
  1417  000012                     	ds	1
  1418  000013                     ??_putsUSART:
  1419  000013                     ___ftpack@exp:
  1420                           	opt stack 0
  1421  000013                     frexp@eptr:
  1422                           	opt stack 0
  1423  000013                     __div_to_l_@f2:
  1424                           	opt stack 0
  1425  000013                     __tdiv_to_l_@f2:
  1426                           	opt stack 0
  1427  000013                     ___ftge@ff2:
  1428                           	opt stack 0
  1429                           
  1430                           ; 3 bytes @ 0x12
  1431  000013                     	ds	1
  1432  000014                     ___awmod@counter:
  1433                           	opt stack 0
  1434  000014                     ___ftpack@sign:
  1435                           	opt stack 0
  1436  000014                     ___lldiv@divisor:
  1437                           	opt stack 0
  1438                           
  1439                           ; 4 bytes @ 0x13
  1440  000014                     	ds	1
  1441  000015                     ??___ftpack:
  1442  000015                     ??_frexp:
  1443  000015                     ___awmod@sign:
  1444                           	opt stack 0
  1445  000015                     SendStringUSART@text:
  1446                           	opt stack 0
  1447  000015                     read_byte@num:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x14
  1451  000015                     	ds	1
  1452  000016                     ??__tdiv_to_l_:
  1453  000016                     ??___ftge:
  1454  000016                     ?___awdiv:
  1455                           	opt stack 0
  1456  000016                     ___awdiv@dividend:
  1457                           	opt stack 0
  1458  000016                     __div_to_l_@quot:
  1459                           	opt stack 0
  1460                           
  1461                           ; 4 bytes @ 0x15
  1462  000016                     	ds	1
  1463  000017                     
  1464                           ; 0 bytes @ 0x16
  1465  000017                     	ds	1
  1466  000018                     ?___awtoft:
  1467                           	opt stack 0
  1468  000018                     ?___lbtoft:
  1469                           	opt stack 0
  1470  000018                     ?___lltoft:
  1471                           	opt stack 0
  1472  000018                     ?___lwtoft:
  1473                           	opt stack 0
  1474  000018                     ___awdiv@divisor:
  1475                           	opt stack 0
  1476  000018                     ___awtoft@c:
  1477                           	opt stack 0
  1478  000018                     ___lwtoft@c:
  1479                           	opt stack 0
  1480  000018                     ___lldiv@quotient:
  1481                           	opt stack 0
  1482  000018                     ___lltoft@c:
  1483                           	opt stack 0
  1484                           
  1485                           ; 4 bytes @ 0x17
  1486  000018                     	ds	1
  1487  000019                     __tdiv_to_l_@quot:
  1488                           	opt stack 0
  1489                           
  1490                           ; 4 bytes @ 0x18
  1491  000019                     	ds	1
  1492  00001A                     ___awdiv@counter:
  1493                           	opt stack 0
  1494  00001A                     __div_to_l_@cntr:
  1495                           	opt stack 0
  1496                           
  1497                           ; 1 bytes @ 0x19
  1498  00001A                     	ds	1
  1499  00001B                     ___awdiv@sign:
  1500                           	opt stack 0
  1501  00001B                     ___awtoft@sign:
  1502                           	opt stack 0
  1503  00001B                     __div_to_l_@exp1:
  1504                           	opt stack 0
  1505  00001B                     ___lbtoft@c:
  1506                           	opt stack 0
  1507                           
  1508                           ; 1 bytes @ 0x1A
  1509  00001B                     	ds	1
  1510  00001C                     ??___lltoft:
  1511  00001C                     ?___ftdiv:
  1512                           	opt stack 0
  1513  00001C                     ___lldiv@counter:
  1514                           	opt stack 0
  1515  00001C                     ___awdiv@quotient:
  1516                           	opt stack 0
  1517  00001C                     ___ftdiv@f1:
  1518                           	opt stack 0
  1519                           
  1520                           ; 3 bytes @ 0x1B
  1521  00001C                     	ds	1
  1522  00001D                     ?___llmod:
  1523                           	opt stack 0
  1524  00001D                     __tdiv_to_l_@cntr:
  1525                           	opt stack 0
  1526  00001D                     ___llmod@dividend:
  1527                           	opt stack 0
  1528                           
  1529                           ; 4 bytes @ 0x1C
  1530  00001D                     	ds	1
  1531  00001E                     ?___wmul:
  1532                           	opt stack 0
  1533  00001E                     __tdiv_to_l_@exp1:
  1534                           	opt stack 0
  1535  00001E                     ___wmul@multiplier:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0x1D
  1539  00001E                     	ds	1
  1540  00001F                     ___ftdiv@f2:
  1541                           	opt stack 0
  1542                           
  1543                           ; 3 bytes @ 0x1E
  1544  00001F                     	ds	1
  1545  000020                     ___lltoft@exp:
  1546                           	opt stack 0
  1547  000020                     ___wmul@multiplicand:
  1548                           	opt stack 0
  1549                           
  1550                           ; 2 bytes @ 0x1F
  1551  000020                     	ds	1
  1552  000021                     ___llmod@divisor:
  1553                           	opt stack 0
  1554                           
  1555                           ; 4 bytes @ 0x20
  1556  000021                     	ds	1
  1557  000022                     ??___ftdiv:
  1558  000022                     ___wmul@product:
  1559                           	opt stack 0
  1560                           
  1561                           ; 2 bytes @ 0x21
  1562  000022                     	ds	3
  1563  000025                     ___ftdiv@cntr:
  1564                           	opt stack 0
  1565  000025                     ___llmod@counter:
  1566                           	opt stack 0
  1567                           
  1568                           ; 1 bytes @ 0x24
  1569  000025                     	ds	1
  1570  000026                     ___ftdiv@f3:
  1571                           	opt stack 0
  1572                           
  1573                           ; 3 bytes @ 0x25
  1574  000026                     	ds	3
  1575  000029                     ___ftdiv@exp:
  1576                           	opt stack 0
  1577                           
  1578                           ; 1 bytes @ 0x28
  1579  000029                     	ds	1
  1580  00002A                     ___ftdiv@sign:
  1581                           	opt stack 0
  1582                           
  1583                           ; 1 bytes @ 0x29
  1584  00002A                     	ds	1
  1585  00002B                     ??_GetDataSensorDHT22:
  1586  00002B                     ?___ftadd:
  1587                           	opt stack 0
  1588  00002B                     ___ftadd@f1:
  1589                           	opt stack 0
  1590                           
  1591                           ; 3 bytes @ 0x2A
  1592  00002B                     	ds	3
  1593  00002E                     ___ftadd@f2:
  1594                           	opt stack 0
  1595                           
  1596                           ; 3 bytes @ 0x2D
  1597  00002E                     	ds	3
  1598  000031                     ??___ftadd:
  1599                           
  1600                           ; 0 bytes @ 0x30
  1601  000031                     	ds	3
  1602  000034                     ___ftadd@sign:
  1603                           	opt stack 0
  1604                           
  1605                           ; 1 bytes @ 0x33
  1606  000034                     	ds	1
  1607  000035                     ___ftadd@exp2:
  1608                           	opt stack 0
  1609                           
  1610                           ; 1 bytes @ 0x34
  1611  000035                     	ds	1
  1612  000036                     ___ftadd@exp1:
  1613                           	opt stack 0
  1614                           
  1615                           ; 1 bytes @ 0x35
  1616  000036                     	ds	1
  1617  000037                     ?___ftmul:
  1618                           	opt stack 0
  1619  000037                     ?___ftsub:
  1620                           	opt stack 0
  1621  000037                     ___ftmul@f1:
  1622                           	opt stack 0
  1623  000037                     ___ftsub@f1:
  1624                           	opt stack 0
  1625                           
  1626                           ; 3 bytes @ 0x36
  1627  000037                     	ds	3
  1628  00003A                     ___ftmul@f2:
  1629                           	opt stack 0
  1630  00003A                     ___ftsub@f2:
  1631                           	opt stack 0
  1632                           
  1633                           ; 3 bytes @ 0x39
  1634  00003A                     	ds	3
  1635  00003D                     ??___ftmul:
  1636  00003D                     
  1637                           ; 0 bytes @ 0x3C
  1638  00003D                     	ds	3
  1639  000040                     ??_ReadByte_I2C:
  1640  000040                     
  1641                           ; 0 bytes @ 0x3F
  1642  000040                     	ds	1
  1643  000041                     tblptru	equ	0xFF8
  1644                           tblptrh	equ	0xFF7
  1645                           tblptrl	equ	0xFF6
  1646                           tablat	equ	0xFF5
  1647                           postinc0	equ	0xFEE
  1648                           wreg	equ	0xFE8
  1649                           postdec1	equ	0xFE5
  1650                           fsr1l	equ	0xFE1
  1651                           
  1652                           ; 0 bytes @ 0x40
  1653 ;;
  1654 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1655 ;;
  1656 ;; *************** function _main *****************
  1657 ;; Defined at:
  1658 ;;		line 105 in file "../TFG_PIC18_Auto.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;		None
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  2  274[None  ] int 
  1665 ;; Registers used:
  1666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1676 ;;Total ram usage:        0 bytes
  1677 ;; Hardware stack levels required when called:    7
  1678 ;; This function calls:
  1679 ;;		_init_system
  1680 ;;		_output_logic
  1681 ;;		_state_logic
  1682 ;; This function is called by:
  1683 ;;		Startup code after reset
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text0
  1688  002EB0                     __ptext0:
  1689                           	opt stack 0
  1690  002EB0                     _main:
  1691                           	opt stack 24
  1692                           
  1693                           ;TFG_PIC18_Auto.c: 106: init_system();
  1694                           
  1695                           ;incstack = 0
  1696  002EB0  ECEC  F016         	call	_init_system	;wreg free
  1697  002EB4                     l6665:
  1698                           
  1699                           ;TFG_PIC18_Auto.c: 109: output_logic();
  1700  002EB4  EC9A  F005         	call	_output_logic	;wreg free
  1701                           
  1702                           ;TFG_PIC18_Auto.c: 110: state_logic();
  1703  002EB8  EC71  F00E         	call	_state_logic	;wreg free
  1704                           
  1705                           ;TFG_PIC18_Auto.c: 111: if(SerialInterrupt_flag==1){
  1706  002EBC  0100               	movlb	0	; () banked
  1707  002EBE  0586               	decf	_SerialInterrupt_flag& (0+255),w,b
  1708  002EC0  0100               	movlb	0	; () banked
  1709  002EC2  1187               	iorwf	(_SerialInterrupt_flag+1)& (0+255),w,b
  1710  002EC4  A4D8               	btfss	status,2,c
  1711  002EC6  D7F6               	goto	l6665
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;TFG_PIC18_Auto.c: 112: present_state = CharRX;
  1715  002EC8  C04B  F04F         	movff	_CharRX,_present_state
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;TFG_PIC18_Auto.c: 113: SerialInterrupt_flag=0;
  1719  002ECC  0E00               	movlw	0
  1720  002ECE  0100               	movlb	0	; () banked
  1721  002ED0  6F87               	movwf	(_SerialInterrupt_flag+1)& (0+255),b
  1722  002ED2  0E00               	movlw	0
  1723  002ED4  6F86               	movwf	_SerialInterrupt_flag& (0+255),b
  1724                           
  1725                           ; BSR set to: 0
  1726                           
  1727                           ; BSR set to: 0
  1728  002ED6  D7EE               	goto	l6665
  1729  002ED8                     __end_of_main:
  1730                           	opt stack 0
  1731                           tblptru	equ	0xFF8
  1732                           tblptrh	equ	0xFF7
  1733                           tblptrl	equ	0xFF6
  1734                           tablat	equ	0xFF5
  1735                           postinc0	equ	0xFEE
  1736                           wreg	equ	0xFE8
  1737                           postdec1	equ	0xFE5
  1738                           fsr1l	equ	0xFE1
  1739                           status	equ	0xFD8
  1740                           
  1741 ;; *************** function _state_logic *****************
  1742 ;; Defined at:
  1743 ;;		line 119 in file "../TFG_PIC18_Auto.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;		None
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;  error           1   15[COMRAM] unsigned char 
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      unsigned char 
  1750 ;; Registers used:
  1751 ;;		wreg, status,2, status,0
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1760 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1761 ;;Total ram usage:        1 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    2
  1764 ;; This function calls:
  1765 ;;		Nothing
  1766 ;; This function is called by:
  1767 ;;		_main
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           	psect	text1
  1772  001CE2                     __ptext1:
  1773                           	opt stack 0
  1774  001CE2                     _state_logic:
  1775                           	opt stack 28
  1776                           
  1777                           ;TFG_PIC18_Auto.c: 121: char error = 0;
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;incstack = 0
  1781  001CE2  0E00               	movlw	0
  1782  001CE4  6E10               	movwf	state_logic@error,c
  1783                           
  1784                           ;TFG_PIC18_Auto.c: 123: switch (present_state) {
  1785  001CE6  D075               	goto	l4859
  1786  001CE8                     l4801:
  1787                           
  1788                           ;TFG_PIC18_Auto.c: 126: if (Trigger == 1) {
  1789  001CE8  0443               	decf	_Trigger,w,c
  1790  001CEA  1044               	iorwf	_Trigger+1,w,c
  1791  001CEC  A4D8               	btfss	status,2,c
  1792  001CEE  D007               	goto	l4805
  1793                           
  1794                           ;TFG_PIC18_Auto.c: 128: present_state = 'B';
  1795  001CF0  0E42               	movlw	66
  1796  001CF2  6E4F               	movwf	_present_state,c
  1797                           
  1798                           ;TFG_PIC18_Auto.c: 129: Trigger = 0;
  1799  001CF4  0E00               	movlw	0
  1800  001CF6  6E44               	movwf	_Trigger+1,c
  1801  001CF8  0E00               	movlw	0
  1802  001CFA  6E43               	movwf	_Trigger,c
  1803                           
  1804                           ;TFG_PIC18_Auto.c: 131: } else {
  1805  001CFC  0012               	return	
  1806  001CFE                     l4805:
  1807                           
  1808                           ;TFG_PIC18_Auto.c: 132: present_state = 'A';
  1809  001CFE  0E41               	movlw	65
  1810  001D00  6E4F               	movwf	_present_state,c
  1811                           
  1812                           ;TFG_PIC18_Auto.c: 133: }
  1813                           ;TFG_PIC18_Auto.c: 135: break;
  1814  001D02  0012               	return	
  1815  001D04                     l4807:
  1816                           
  1817                           ;TFG_PIC18_Auto.c: 137: present_state = 'C';
  1818  001D04  0E43               	movlw	67
  1819  001D06  6E4F               	movwf	_present_state,c
  1820                           
  1821                           ;TFG_PIC18_Auto.c: 139: break;
  1822  001D08  0012               	return	
  1823  001D0A                     l4809:
  1824                           
  1825                           ;TFG_PIC18_Auto.c: 141: if (Trigger == 1) {
  1826  001D0A  0443               	decf	_Trigger,w,c
  1827  001D0C  1044               	iorwf	_Trigger+1,w,c
  1828  001D0E  A4D8               	btfss	status,2,c
  1829  001D10  D007               	goto	l4813
  1830                           
  1831                           ;TFG_PIC18_Auto.c: 143: present_state = 'D';
  1832  001D12  0E44               	movlw	68
  1833  001D14  6E4F               	movwf	_present_state,c
  1834                           
  1835                           ;TFG_PIC18_Auto.c: 144: Trigger = 0;
  1836  001D16  0E00               	movlw	0
  1837  001D18  6E44               	movwf	_Trigger+1,c
  1838  001D1A  0E00               	movlw	0
  1839  001D1C  6E43               	movwf	_Trigger,c
  1840                           
  1841                           ;TFG_PIC18_Auto.c: 145: } else {
  1842  001D1E  0012               	return	
  1843  001D20                     l4813:
  1844                           
  1845                           ;TFG_PIC18_Auto.c: 146: present_state = 'C';
  1846  001D20  0E43               	movlw	67
  1847  001D22  6E4F               	movwf	_present_state,c
  1848                           
  1849                           ;TFG_PIC18_Auto.c: 147: }
  1850                           ;TFG_PIC18_Auto.c: 148: break;
  1851  001D24  0012               	return	
  1852  001D26                     l4815:
  1853                           
  1854                           ;TFG_PIC18_Auto.c: 152: present_state = 'E';
  1855  001D26  0E45               	movlw	69
  1856  001D28  6E4F               	movwf	_present_state,c
  1857                           
  1858                           ;TFG_PIC18_Auto.c: 154: break;
  1859  001D2A  0012               	return	
  1860  001D2C                     l4817:
  1861                           
  1862                           ;TFG_PIC18_Auto.c: 159: present_state = 'F';
  1863  001D2C  0E46               	movlw	70
  1864  001D2E  6E4F               	movwf	_present_state,c
  1865                           
  1866                           ;TFG_PIC18_Auto.c: 160: break;
  1867  001D30  0012               	return	
  1868  001D32                     l4819:
  1869                           
  1870                           ;TFG_PIC18_Auto.c: 163: if (Trigger == 1) {
  1871  001D32  0443               	decf	_Trigger,w,c
  1872  001D34  1044               	iorwf	_Trigger+1,w,c
  1873  001D36  A4D8               	btfss	status,2,c
  1874  001D38  D007               	goto	l4823
  1875                           
  1876                           ;TFG_PIC18_Auto.c: 165: present_state = 'G';
  1877  001D3A  0E47               	movlw	71
  1878  001D3C  6E4F               	movwf	_present_state,c
  1879                           
  1880                           ;TFG_PIC18_Auto.c: 166: Trigger = 0;
  1881  001D3E  0E00               	movlw	0
  1882  001D40  6E44               	movwf	_Trigger+1,c
  1883  001D42  0E00               	movlw	0
  1884  001D44  6E43               	movwf	_Trigger,c
  1885                           
  1886                           ;TFG_PIC18_Auto.c: 168: } else {
  1887  001D46  0012               	return	
  1888  001D48                     l4823:
  1889                           
  1890                           ;TFG_PIC18_Auto.c: 169: present_state = 'F';
  1891  001D48  0E46               	movlw	70
  1892  001D4A  6E4F               	movwf	_present_state,c
  1893                           
  1894                           ;TFG_PIC18_Auto.c: 170: }
  1895                           ;TFG_PIC18_Auto.c: 173: break;
  1896  001D4C  0012               	return	
  1897  001D4E                     l4825:
  1898                           
  1899                           ;TFG_PIC18_Auto.c: 177: present_state = 'H';
  1900  001D4E  0E48               	movlw	72
  1901  001D50  6E4F               	movwf	_present_state,c
  1902                           
  1903                           ;TFG_PIC18_Auto.c: 178: break;
  1904  001D52  0012               	return	
  1905  001D54                     l4827:
  1906                           
  1907                           ;TFG_PIC18_Auto.c: 181: present_state = 'I';
  1908  001D54  0E49               	movlw	73
  1909  001D56  6E4F               	movwf	_present_state,c
  1910                           
  1911                           ;TFG_PIC18_Auto.c: 182: break;
  1912  001D58  0012               	return	
  1913  001D5A                     l4829:
  1914                           
  1915                           ;TFG_PIC18_Auto.c: 185: if (Trigger == 1) {
  1916  001D5A  0443               	decf	_Trigger,w,c
  1917  001D5C  1044               	iorwf	_Trigger+1,w,c
  1918  001D5E  A4D8               	btfss	status,2,c
  1919  001D60  D007               	goto	l4833
  1920                           
  1921                           ;TFG_PIC18_Auto.c: 188: present_state = 'J';
  1922  001D62  0E4A               	movlw	74
  1923  001D64  6E4F               	movwf	_present_state,c
  1924                           
  1925                           ;TFG_PIC18_Auto.c: 189: Trigger = 0;
  1926  001D66  0E00               	movlw	0
  1927  001D68  6E44               	movwf	_Trigger+1,c
  1928  001D6A  0E00               	movlw	0
  1929  001D6C  6E43               	movwf	_Trigger,c
  1930                           
  1931                           ;TFG_PIC18_Auto.c: 191: } else {
  1932  001D6E  0012               	return	
  1933  001D70                     l4833:
  1934                           
  1935                           ;TFG_PIC18_Auto.c: 192: present_state = 'I';
  1936  001D70  0E49               	movlw	73
  1937  001D72  6E4F               	movwf	_present_state,c
  1938                           
  1939                           ;TFG_PIC18_Auto.c: 193: }
  1940                           ;TFG_PIC18_Auto.c: 195: break;
  1941  001D74  0012               	return	
  1942  001D76                     l4835:
  1943                           
  1944                           ;TFG_PIC18_Auto.c: 198: present_state = 'L';
  1945  001D76  0E4C               	movlw	76
  1946  001D78  6E4F               	movwf	_present_state,c
  1947                           
  1948                           ;TFG_PIC18_Auto.c: 200: break;
  1949  001D7A  0012               	return	
  1950  001D7C                     l4837:
  1951                           
  1952                           ;TFG_PIC18_Auto.c: 202: present_state = 'M';
  1953  001D7C  0E4D               	movlw	77
  1954  001D7E  6E4F               	movwf	_present_state,c
  1955                           
  1956                           ;TFG_PIC18_Auto.c: 203: break;
  1957  001D80  0012               	return	
  1958  001D82                     l4839:
  1959                           
  1960                           ;TFG_PIC18_Auto.c: 206: if (Trigger == 1) {
  1961  001D82  0443               	decf	_Trigger,w,c
  1962  001D84  1044               	iorwf	_Trigger+1,w,c
  1963  001D86  A4D8               	btfss	status,2,c
  1964  001D88  D007               	goto	l4843
  1965                           
  1966                           ;TFG_PIC18_Auto.c: 208: present_state = 'N';
  1967  001D8A  0E4E               	movlw	78
  1968  001D8C  6E4F               	movwf	_present_state,c
  1969                           
  1970                           ;TFG_PIC18_Auto.c: 209: Trigger = 0;
  1971  001D8E  0E00               	movlw	0
  1972  001D90  6E44               	movwf	_Trigger+1,c
  1973  001D92  0E00               	movlw	0
  1974  001D94  6E43               	movwf	_Trigger,c
  1975                           
  1976                           ;TFG_PIC18_Auto.c: 211: } else {
  1977  001D96  0012               	return	
  1978  001D98                     l4843:
  1979                           
  1980                           ;TFG_PIC18_Auto.c: 212: present_state = 'M';
  1981  001D98  0E4D               	movlw	77
  1982  001D9A  6E4F               	movwf	_present_state,c
  1983                           
  1984                           ;TFG_PIC18_Auto.c: 213: }
  1985                           ;TFG_PIC18_Auto.c: 214: break;
  1986  001D9C  0012               	return	
  1987  001D9E                     l4845:
  1988                           
  1989                           ;TFG_PIC18_Auto.c: 217: present_state = 'P';
  1990  001D9E  0E50               	movlw	80
  1991  001DA0  6E4F               	movwf	_present_state,c
  1992                           
  1993                           ;TFG_PIC18_Auto.c: 218: break;
  1994  001DA2  0012               	return	
  1995  001DA4                     l4847:
  1996                           
  1997                           ;TFG_PIC18_Auto.c: 221: present_state = 'Q';
  1998  001DA4  0E51               	movlw	81
  1999  001DA6  6E4F               	movwf	_present_state,c
  2000                           
  2001                           ;TFG_PIC18_Auto.c: 222: break;
  2002  001DA8  0012               	return	
  2003  001DAA                     l4849:
  2004                           
  2005                           ;TFG_PIC18_Auto.c: 226: if (Trigger == 1) {
  2006  001DAA  0443               	decf	_Trigger,w,c
  2007  001DAC  1044               	iorwf	_Trigger+1,w,c
  2008  001DAE  A4D8               	btfss	status,2,c
  2009  001DB0  D007               	goto	l4853
  2010                           
  2011                           ;TFG_PIC18_Auto.c: 228: present_state = 'O';
  2012  001DB2  0E4F               	movlw	79
  2013  001DB4  6E4F               	movwf	_present_state,c
  2014                           
  2015                           ;TFG_PIC18_Auto.c: 229: Trigger = 0;
  2016  001DB6  0E00               	movlw	0
  2017  001DB8  6E44               	movwf	_Trigger+1,c
  2018  001DBA  0E00               	movlw	0
  2019  001DBC  6E43               	movwf	_Trigger,c
  2020                           
  2021                           ;TFG_PIC18_Auto.c: 231: } else {
  2022  001DBE  0012               	return	
  2023  001DC0                     l4853:
  2024                           
  2025                           ;TFG_PIC18_Auto.c: 232: present_state = 'Q';
  2026  001DC0  0E51               	movlw	81
  2027  001DC2  6E4F               	movwf	_present_state,c
  2028                           
  2029                           ;TFG_PIC18_Auto.c: 233: }
  2030                           ;TFG_PIC18_Auto.c: 234: break;
  2031  001DC4  0012               	return	
  2032  001DC6                     l4855:
  2033                           
  2034                           ;TFG_PIC18_Auto.c: 238: present_state = 'A';
  2035  001DC6  0E41               	movlw	65
  2036  001DC8  6E4F               	movwf	_present_state,c
  2037                           
  2038                           ;TFG_PIC18_Auto.c: 239: break;
  2039  001DCA  0012               	return	
  2040  001DCC                     l4857:
  2041                           
  2042                           ;TFG_PIC18_Auto.c: 242: error = 1;
  2043  001DCC  0E01               	movlw	1
  2044  001DCE  6E10               	movwf	state_logic@error,c
  2045                           
  2046                           ;TFG_PIC18_Auto.c: 243: }
  2047  001DD0  0012               	return	
  2048  001DD2                     l4859:
  2049  001DD2  504F               	movf	_present_state,w,c
  2050                           
  2051                           ; Switch size 1, requested type "space"
  2052                           ; Number of cases is 16, Range of values is 65 to 81
  2053                           ; switch strategies available:
  2054                           ; Name         Instructions Cycles
  2055                           ; simple_byte           49    25 (average)
  2056                           ;	Chosen strategy is simple_byte
  2057  001DD4  0A41               	xorlw	65	; case 65
  2058  001DD6  B4D8               	btfsc	status,2,c
  2059  001DD8  D787               	goto	l4801
  2060  001DDA  0A03               	xorlw	3	; case 66
  2061  001DDC  B4D8               	btfsc	status,2,c
  2062  001DDE  D792               	goto	l4807
  2063  001DE0  0A01               	xorlw	1	; case 67
  2064  001DE2  B4D8               	btfsc	status,2,c
  2065  001DE4  D792               	goto	l4809
  2066  001DE6  0A07               	xorlw	7	; case 68
  2067  001DE8  B4D8               	btfsc	status,2,c
  2068  001DEA  D79D               	goto	l4815
  2069  001DEC  0A01               	xorlw	1	; case 69
  2070  001DEE  B4D8               	btfsc	status,2,c
  2071  001DF0  D79D               	goto	l4817
  2072  001DF2  0A03               	xorlw	3	; case 70
  2073  001DF4  B4D8               	btfsc	status,2,c
  2074  001DF6  D79D               	goto	l4819
  2075  001DF8  0A01               	xorlw	1	; case 71
  2076  001DFA  B4D8               	btfsc	status,2,c
  2077  001DFC  D7A8               	goto	l4825
  2078  001DFE  0A0F               	xorlw	15	; case 72
  2079  001E00  B4D8               	btfsc	status,2,c
  2080  001E02  D7A8               	goto	l4827
  2081  001E04  0A01               	xorlw	1	; case 73
  2082  001E06  B4D8               	btfsc	status,2,c
  2083  001E08  D7A8               	goto	l4829
  2084  001E0A  0A03               	xorlw	3	; case 74
  2085  001E0C  B4D8               	btfsc	status,2,c
  2086  001E0E  D7B3               	goto	l4835
  2087  001E10  0A06               	xorlw	6	; case 76
  2088  001E12  B4D8               	btfsc	status,2,c
  2089  001E14  D7B3               	goto	l4837
  2090  001E16  0A01               	xorlw	1	; case 77
  2091  001E18  B4D8               	btfsc	status,2,c
  2092  001E1A  D7B3               	goto	l4839
  2093  001E1C  0A03               	xorlw	3	; case 78
  2094  001E1E  B4D8               	btfsc	status,2,c
  2095  001E20  D7BE               	goto	l4845
  2096  001E22  0A01               	xorlw	1	; case 79
  2097  001E24  B4D8               	btfsc	status,2,c
  2098  001E26  D7CF               	goto	l4855
  2099  001E28  0A1F               	xorlw	31	; case 80
  2100  001E2A  B4D8               	btfsc	status,2,c
  2101  001E2C  D7BB               	goto	l4847
  2102  001E2E  0A01               	xorlw	1	; case 81
  2103  001E30  B4D8               	btfsc	status,2,c
  2104  001E32  D7BB               	goto	l4849
  2105  001E34  D7CB               	goto	l4857
  2106  001E36                     __end_of_state_logic:
  2107                           	opt stack 0
  2108                           tblptru	equ	0xFF8
  2109                           tblptrh	equ	0xFF7
  2110                           tblptrl	equ	0xFF6
  2111                           tablat	equ	0xFF5
  2112                           postinc0	equ	0xFEE
  2113                           wreg	equ	0xFE8
  2114                           postdec1	equ	0xFE5
  2115                           fsr1l	equ	0xFE1
  2116                           status	equ	0xFD8
  2117                           
  2118 ;; *************** function _output_logic *****************
  2119 ;; Defined at:
  2120 ;;		line 247 in file "../TFG_PIC18_Auto.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;		None
  2123 ;; Auto vars:     Size  Location     Type
  2124 ;;  error           1    2[BANK1 ] unsigned char 
  2125 ;; Return value:  Size  Location     Type
  2126 ;;                  1    wreg      unsigned char 
  2127 ;; Registers used:
  2128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2129 ;; Tracked objects:
  2130 ;;		On entry : 0/0
  2131 ;;		On exit  : 0/0
  2132 ;;		Unchanged: 0/0
  2133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2138 ;;Total ram usage:       12 bytes
  2139 ;; Hardware stack levels used:    1
  2140 ;; Hardware stack levels required when called:    6
  2141 ;; This function calls:
  2142 ;;		_CloseI2C
  2143 ;;		_GetDataSensorDHT22
  2144 ;;		_GetSampleADC
  2145 ;;		_InitADC
  2146 ;;		_InitializeTimer3
  2147 ;;		_Open_I2C1
  2148 ;;		_ReadByte_I2C
  2149 ;;		_SelectChannelADC
  2150 ;;		_SendStringUSART
  2151 ;;		_StopADC
  2152 ;;		___ftadd
  2153 ;;		___ftdiv
  2154 ;;		___ftge
  2155 ;;		___ftmul
  2156 ;;		___lwtoft
  2157 ;;		___wmul
  2158 ;;		_log
  2159 ;;		_sprintf
  2160 ;; This function is called by:
  2161 ;;		_main
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text2
  2166  000B34                     __ptext2:
  2167                           	opt stack 0
  2168  000B34                     _output_logic:
  2169                           	opt stack 24
  2170                           
  2171                           ;TFG_PIC18_Auto.c: 248: char error = 0;
  2172                           
  2173                           ;incstack = 0
  2174  000B34  0E00               	movlw	0
  2175  000B36  0101               	movlb	1	; () banked
  2176  000B38  6F4A               	movwf	output_logic@error& (0+255),b
  2177                           
  2178                           ;TFG_PIC18_Auto.c: 249: switch (present_state) {
  2179  000B3A  D38D               	goto	l6525
  2180  000B3C                     l6331:
  2181                           
  2182                           ; BSR set to: 1
  2183                           ;TFG_PIC18_Auto.c: 251: PORTC = 0b00000111;
  2184  000B3C  0E07               	movlw	7
  2185  000B3E  6E82               	movwf	3970,c	;volatile
  2186                           
  2187                           ; BSR set to: 1
  2188                           ;TFG_PIC18_Auto.c: 253: if (postscalerflag30s == 1) {
  2189  000B40  0100               	movlb	0	; () banked
  2190  000B42  059C               	decf	_postscalerflag30s& (0+255),w,b
  2191  000B44  0100               	movlb	0	; () banked
  2192  000B46  119D               	iorwf	(_postscalerflag30s+1)& (0+255),w,b
  2193  000B48  A4D8               	btfss	status,2,c
  2194  000B4A  0012               	return	
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;TFG_PIC18_Auto.c: 254: postscalerflag30s =0;
  2198  000B4C  0E00               	movlw	0
  2199  000B4E  0100               	movlb	0	; () banked
  2200  000B50  6F9D               	movwf	(_postscalerflag30s+1)& (0+255),b
  2201  000B52  0E00               	movlw	0
  2202  000B54  6F9C               	movwf	_postscalerflag30s& (0+255),b
  2203                           
  2204                           ;TFG_PIC18_Auto.c: 255: Trigger = 1;
  2205  000B56  0E00               	movlw	0
  2206  000B58  6E44               	movwf	_Trigger+1,c
  2207  000B5A  0E01               	movlw	1
  2208  000B5C  6E43               	movwf	_Trigger,c
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;TFG_PIC18_Auto.c: 256: }
  2212                           ;TFG_PIC18_Auto.c: 257: break;
  2213  000B5E  0012               	return	
  2214  000B60                     l6337:
  2215                           
  2216                           ;TFG_PIC18_Auto.c: 260: T3CON = 0;
  2217  000B60  0E00               	movlw	0
  2218  000B62  6EB1               	movwf	4017,c	;volatile
  2219                           
  2220                           ;TFG_PIC18_Auto.c: 261: ADON = 0;
  2221  000B64  90C2               	bcf	4034,0,c	;volatile
  2222                           
  2223                           ;TFG_PIC18_Auto.c: 262: CloseI2C();
  2224  000B66  EC6F  F018         	call	_CloseI2C	;wreg free
  2225                           
  2226                           ;TFG_PIC18_Auto.c: 264: InitializeTimer3();
  2227  000B6A  ECA3  F017         	call	_InitializeTimer3	;wreg free
  2228                           
  2229                           ;TFG_PIC18_Auto.c: 265: InitADC();
  2230  000B6E  EC6A  F018         	call	_InitADC	;wreg free
  2231                           
  2232                           ;TFG_PIC18_Auto.c: 267: postscaler = 0;
  2233  000B72  0E00               	movlw	0
  2234  000B74  0100               	movlb	0	; () banked
  2235  000B76  6F97               	movwf	(_postscaler+1)& (0+255),b
  2236  000B78  0E00               	movlw	0
  2237  000B7A  6F96               	movwf	_postscaler& (0+255),b
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;TFG_PIC18_Auto.c: 268: postscalerflag = 0;
  2241  000B7C  0E00               	movlw	0
  2242  000B7E  0100               	movlb	0	; () banked
  2243  000B80  6F9B               	movwf	(_postscalerflag+1)& (0+255),b
  2244  000B82  0E00               	movlw	0
  2245  000B84  6F9A               	movwf	_postscalerflag& (0+255),b
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;TFG_PIC18_Auto.c: 270: SendStringUSART("Analog Mode Acquiring");
  2249  000B86  0EB3               	movlw	low STR_1
  2250  000B88  6E15               	movwf	SendStringUSART@text,c
  2251  000B8A  0EFF               	movlw	high STR_1
  2252  000B8C  6E16               	movwf	SendStringUSART@text+1,c
  2253  000B8E  EC19  F018         	call	_SendStringUSART	;wreg free
  2254                           
  2255                           ;TFG_PIC18_Auto.c: 272: PORTC = 0b00000101;
  2256  000B92  0E05               	movlw	5
  2257  000B94  6E82               	movwf	3970,c	;volatile
  2258                           
  2259                           ;TFG_PIC18_Auto.c: 273: SelectChannelADC(0);
  2260  000B96  0E00               	movlw	0
  2261  000B98  6E11               	movwf	SelectChannelADC@channel+1,c
  2262  000B9A  0E00               	movlw	0
  2263  000B9C  6E10               	movwf	SelectChannelADC@channel,c
  2264  000B9E  EC2F  F018         	call	_SelectChannelADC	;wreg free
  2265                           
  2266                           ;TFG_PIC18_Auto.c: 274: samples_num = 0;
  2267  000BA2  0E00               	movlw	0
  2268  000BA4  0100               	movlb	0	; () banked
  2269  000BA6  6FA5               	movwf	(_samples_num+1)& (0+255),b
  2270  000BA8  0E00               	movlw	0
  2271  000BAA  6FA4               	movwf	_samples_num& (0+255),b
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;TFG_PIC18_Auto.c: 275: Valor_Medio_HT=0;
  2275  000BAC  0E00               	movlw	0
  2276  000BAE  0100               	movlb	0	; () banked
  2277  000BB0  6F8D               	movwf	(_Valor_Medio_HT+1)& (0+255),b
  2278  000BB2  0E00               	movlw	0
  2279  000BB4  6F8C               	movwf	_Valor_Medio_HT& (0+255),b
  2280                           
  2281                           ;TFG_PIC18_Auto.c: 276: break;
  2282  000BB6  0012               	return	
  2283  000BB8                     l6361:
  2284                           
  2285                           ;TFG_PIC18_Auto.c: 279: if (postscalersampleflag == 1) {
  2286  000BB8  0100               	movlb	0	; () banked
  2287  000BBA  05A0               	decf	_postscalersampleflag& (0+255),w,b
  2288  000BBC  0100               	movlb	0	; () banked
  2289  000BBE  11A1               	iorwf	(_postscalersampleflag+1)& (0+255),w,b
  2290  000BC0  A4D8               	btfss	status,2,c
  2291  000BC2  D022               	goto	l6373
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;TFG_PIC18_Auto.c: 280: Value_AN0=0;
  2295  000BC4  0E00               	movlw	0
  2296  000BC6  0100               	movlb	0	; () banked
  2297  000BC8  6F91               	movwf	(_Value_AN0+1)& (0+255),b
  2298  000BCA  0E00               	movlw	0
  2299  000BCC  6F90               	movwf	_Value_AN0& (0+255),b
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;TFG_PIC18_Auto.c: 281: Value_AN0 = GetSampleADC();
  2303  000BCE  EC0D  F018         	call	_GetSampleADC	;wreg free
  2304  000BD2  C010  F090         	movff	?_GetSampleADC,_Value_AN0
  2305  000BD6  C011  F091         	movff	?_GetSampleADC+1,_Value_AN0+1
  2306                           
  2307                           ;TFG_PIC18_Auto.c: 282: Valor_Medio_HumedadTierra[samples_num]= Value_AN0;
  2308  000BDA  90D8               	bcf	status,0,c
  2309  000BDC  0100               	movlb	0	; () banked
  2310  000BDE  35A4               	rlcf	_samples_num& (0+255),w,b
  2311  000BE0  6ED9               	movwf	fsr2l,c
  2312  000BE2  0100               	movlb	0	; () banked
  2313  000BE4  35A5               	rlcf	(_samples_num+1)& (0+255),w,b
  2314  000BE6  6EDA               	movwf	fsr2h,c
  2315  000BE8  0E40               	movlw	low _Valor_Medio_HumedadTierra
  2316  000BEA  26D9               	addwf	fsr2l,f,c
  2317  000BEC  0E01               	movlw	high _Valor_Medio_HumedadTierra
  2318  000BEE  22DA               	addwfc	fsr2h,f,c
  2319  000BF0  C090  FFDE         	movff	_Value_AN0,postinc2
  2320  000BF4  C091  FFDD         	movff	_Value_AN0+1,postdec2
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;TFG_PIC18_Auto.c: 286: postscalersampleflag = 0;
  2324  000BF8  0E00               	movlw	0
  2325  000BFA  0100               	movlb	0	; () banked
  2326  000BFC  6FA1               	movwf	(_postscalersampleflag+1)& (0+255),b
  2327  000BFE  0E00               	movlw	0
  2328  000C00  6FA0               	movwf	_postscalersampleflag& (0+255),b
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;TFG_PIC18_Auto.c: 288: samples_num++;
  2332  000C02  0100               	movlb	0	; () banked
  2333  000C04  4BA4               	infsnz	_samples_num& (0+255),f,b
  2334  000C06  2BA5               	incf	(_samples_num+1)& (0+255),f,b
  2335  000C08                     l6373:
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;TFG_PIC18_Auto.c: 290: }
  2339                           ;TFG_PIC18_Auto.c: 291: if(samples_num == 3){
  2340  000C08  0E03               	movlw	3
  2341  000C0A  0100               	movlb	0	; () banked
  2342  000C0C  19A4               	xorwf	_samples_num& (0+255),w,b
  2343  000C0E  0100               	movlb	0	; () banked
  2344  000C10  11A5               	iorwf	(_samples_num+1)& (0+255),w,b
  2345  000C12  A4D8               	btfss	status,2,c
  2346  000C14  0012               	return	
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;TFG_PIC18_Auto.c: 292: samples_num=0;
  2350  000C16  0E00               	movlw	0
  2351  000C18  0100               	movlb	0	; () banked
  2352  000C1A  6FA5               	movwf	(_samples_num+1)& (0+255),b
  2353  000C1C  0E00               	movlw	0
  2354  000C1E  6FA4               	movwf	_samples_num& (0+255),b
  2355                           
  2356                           ;TFG_PIC18_Auto.c: 293: while(samples_num < 4){
  2357  000C20  D01E               	goto	l6381
  2358  000C22                     l6377:
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;TFG_PIC18_Auto.c: 295: Valor_Medio_HT = Valor_Medio_HT + Valor_Medio_HumedadTierra[samp
      +                          les_num];
  2362  000C22  90D8               	bcf	status,0,c
  2363  000C24  0100               	movlb	0	; () banked
  2364  000C26  35A4               	rlcf	_samples_num& (0+255),w,b
  2365  000C28  6ED9               	movwf	fsr2l,c
  2366  000C2A  0100               	movlb	0	; () banked
  2367  000C2C  35A5               	rlcf	(_samples_num+1)& (0+255),w,b
  2368  000C2E  6EDA               	movwf	fsr2h,c
  2369  000C30  0E40               	movlw	low _Valor_Medio_HumedadTierra
  2370  000C32  26D9               	addwf	fsr2l,f,c
  2371  000C34  0E01               	movlw	high _Valor_Medio_HumedadTierra
  2372  000C36  22DA               	addwfc	fsr2h,f,c
  2373  000C38  CFDE F148          	movff	postinc2,??_output_logic
  2374  000C3C  CFDD F149          	movff	postdec2,??_output_logic+1
  2375  000C40  0100               	movlb	0	; () banked
  2376  000C42  518C               	movf	_Valor_Medio_HT& (0+255),w,b
  2377  000C44  0101               	movlb	1	; () banked
  2378  000C46  2548               	addwf	??_output_logic& (0+255),w,b
  2379  000C48  0100               	movlb	0	; () banked
  2380  000C4A  6F8C               	movwf	_Valor_Medio_HT& (0+255),b
  2381  000C4C  0100               	movlb	0	; () banked
  2382  000C4E  518D               	movf	(_Valor_Medio_HT+1)& (0+255),w,b
  2383  000C50  0101               	movlb	1	; () banked
  2384  000C52  2149               	addwfc	(??_output_logic+1)& (0+255),w,b
  2385  000C54  0100               	movlb	0	; () banked
  2386  000C56  6F8D               	movwf	(_Valor_Medio_HT+1)& (0+255),b
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;TFG_PIC18_Auto.c: 298: samples_num++;
  2390  000C58  0100               	movlb	0	; () banked
  2391  000C5A  4BA4               	infsnz	_samples_num& (0+255),f,b
  2392  000C5C  2BA5               	incf	(_samples_num+1)& (0+255),f,b
  2393  000C5E                     l6381:
  2394                           
  2395                           ; BSR set to: 0
  2396  000C5E  0100               	movlb	0	; () banked
  2397  000C60  51A5               	movf	(_samples_num+1)& (0+255),w,b
  2398  000C62  E105               	bnz	l6383
  2399  000C64  0E04               	movlw	4
  2400  000C66  0100               	movlb	0	; () banked
  2401  000C68  5DA4               	subwf	_samples_num& (0+255),w,b
  2402  000C6A  A0D8               	btfss	status,0,c
  2403  000C6C  D7DA               	goto	l6377
  2404  000C6E                     l6383:
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;TFG_PIC18_Auto.c: 299: }
  2408                           ;TFG_PIC18_Auto.c: 300: Valor_Medio_HT = Valor_Medio_HT/4;
  2409  000C6E  C08C  F148         	movff	_Valor_Medio_HT,??_output_logic
  2410  000C72  C08D  F149         	movff	_Valor_Medio_HT+1,??_output_logic+1
  2411  000C76  0101               	movlb	1	; () banked
  2412  000C78  90D8               	bcf	status,0,c
  2413  000C7A  3349               	rrcf	(??_output_logic+1)& (0+255),f,b
  2414  000C7C  3348               	rrcf	??_output_logic& (0+255),f,b
  2415  000C7E  0101               	movlb	1	; () banked
  2416  000C80  90D8               	bcf	status,0,c
  2417  000C82  3349               	rrcf	(??_output_logic+1)& (0+255),f,b
  2418  000C84  3348               	rrcf	??_output_logic& (0+255),f,b
  2419  000C86  C148  F08C         	movff	??_output_logic,_Valor_Medio_HT
  2420  000C8A  C149  F08D         	movff	??_output_logic+1,_Valor_Medio_HT+1
  2421                           
  2422                           ; BSR set to: 1
  2423                           ;TFG_PIC18_Auto.c: 301: sprintf(CharTX, "DATA ANALOG :Humedad TIERRA = %d",Valor_Medio_H
      +                          T);
  2424  000C8E  0E1C               	movlw	low _CharTX
  2425  000C90  0100               	movlb	0	; () banked
  2426  000C92  6FC9               	movwf	sprintf@sp& (0+255),b
  2427  000C94  0E01               	movlw	high _CharTX
  2428  000C96  0100               	movlb	0	; () banked
  2429  000C98  6FCA               	movwf	(sprintf@sp+1)& (0+255),b
  2430  000C9A  0E38               	movlw	low STR_2
  2431  000C9C  0100               	movlb	0	; () banked
  2432  000C9E  6FCB               	movwf	sprintf@f& (0+255),b
  2433  000CA0  0EFF               	movlw	high STR_2
  2434  000CA2  0100               	movlb	0	; () banked
  2435  000CA4  6FCC               	movwf	(sprintf@f+1)& (0+255),b
  2436  000CA6  C08C  F0CD         	movff	_Valor_Medio_HT,?_sprintf+4
  2437  000CAA  C08D  F0CE         	movff	_Valor_Medio_HT+1,?_sprintf+5
  2438  000CAE  ECB9  F000         	call	_sprintf	;wreg free
  2439                           
  2440                           ;TFG_PIC18_Auto.c: 302: SendStringUSART(CharTX);
  2441  000CB2  0E1C               	movlw	low _CharTX
  2442  000CB4  6E15               	movwf	SendStringUSART@text,c
  2443  000CB6  0E01               	movlw	high _CharTX
  2444  000CB8  6E16               	movwf	SendStringUSART@text+1,c
  2445  000CBA  EC19  F018         	call	_SendStringUSART	;wreg free
  2446                           
  2447                           ;TFG_PIC18_Auto.c: 303: Trigger =1;
  2448  000CBE  0E00               	movlw	0
  2449  000CC0  6E44               	movwf	_Trigger+1,c
  2450  000CC2  0E01               	movlw	1
  2451  000CC4  6E43               	movwf	_Trigger,c
  2452                           
  2453                           ;TFG_PIC18_Auto.c: 306: }
  2454                           ;TFG_PIC18_Auto.c: 309: break;
  2455  000CC6  0012               	return	
  2456  000CC8                     l6391:
  2457                           
  2458                           ;TFG_PIC18_Auto.c: 311: postscalersampleflag = 0;
  2459  000CC8  0E00               	movlw	0
  2460  000CCA  0100               	movlb	0	; () banked
  2461  000CCC  6FA1               	movwf	(_postscalersampleflag+1)& (0+255),b
  2462  000CCE  0E00               	movlw	0
  2463  000CD0  6FA0               	movwf	_postscalersampleflag& (0+255),b
  2464                           
  2465                           ;TFG_PIC18_Auto.c: 312: break;
  2466  000CD2  0012               	return	
  2467  000CD4                     l6393:
  2468                           
  2469                           ;TFG_PIC18_Auto.c: 315: SendStringUSART("I2C Mode Acquiring");
  2470  000CD4  0EC9               	movlw	low STR_3
  2471  000CD6  6E15               	movwf	SendStringUSART@text,c
  2472  000CD8  0EFF               	movlw	high STR_3
  2473  000CDA  6E16               	movwf	SendStringUSART@text+1,c
  2474  000CDC  EC19  F018         	call	_SendStringUSART	;wreg free
  2475                           
  2476                           ;TFG_PIC18_Auto.c: 316: PORTC = 0b00000100;
  2477  000CE0  0E04               	movlw	4
  2478  000CE2  6E82               	movwf	3970,c	;volatile
  2479                           
  2480                           ;TFG_PIC18_Auto.c: 318: SelectChannelADC(1);
  2481  000CE4  0E00               	movlw	0
  2482  000CE6  6E11               	movwf	SelectChannelADC@channel+1,c
  2483  000CE8  0E01               	movlw	1
  2484  000CEA  6E10               	movwf	SelectChannelADC@channel,c
  2485  000CEC  EC2F  F018         	call	_SelectChannelADC	;wreg free
  2486                           
  2487                           ;TFG_PIC18_Auto.c: 320: samples_num=0;
  2488  000CF0  0E00               	movlw	0
  2489  000CF2  0100               	movlb	0	; () banked
  2490  000CF4  6FA5               	movwf	(_samples_num+1)& (0+255),b
  2491  000CF6  0E00               	movlw	0
  2492  000CF8  6FA4               	movwf	_samples_num& (0+255),b
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;TFG_PIC18_Auto.c: 321: Valor_Medio_TA =0;
  2496  000CFA  0E00               	movlw	0
  2497  000CFC  0100               	movlb	0	; () banked
  2498  000CFE  6F6E               	movwf	_Valor_Medio_TA& (0+255),b
  2499  000D00  0E00               	movlw	0
  2500  000D02  0100               	movlb	0	; () banked
  2501  000D04  6F6F               	movwf	(_Valor_Medio_TA+1)& (0+255),b
  2502  000D06  0E00               	movlw	0
  2503  000D08  0100               	movlb	0	; () banked
  2504  000D0A  6F70               	movwf	(_Valor_Medio_TA+2)& (0+255),b
  2505                           
  2506                           ;TFG_PIC18_Auto.c: 322: break;
  2507  000D0C  0012               	return	
  2508  000D0E                     l6403:
  2509                           
  2510                           ;TFG_PIC18_Auto.c: 325: if (postscalersampleflag == 1) {
  2511  000D0E  0100               	movlb	0	; () banked
  2512  000D10  05A0               	decf	_postscalersampleflag& (0+255),w,b
  2513  000D12  0100               	movlb	0	; () banked
  2514  000D14  11A1               	iorwf	(_postscalersampleflag+1)& (0+255),w,b
  2515  000D16  A4D8               	btfss	status,2,c
  2516  000D18  D0FA               	goto	l6431
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;TFG_PIC18_Auto.c: 326: Value_AN1=0;
  2520  000D1A  0E00               	movlw	0
  2521  000D1C  0100               	movlb	0	; () banked
  2522  000D1E  6FAC               	movwf	(_Value_AN1+1)& (0+255),b
  2523  000D20  0E00               	movlw	0
  2524  000D22  6FAB               	movwf	_Value_AN1& (0+255),b
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;TFG_PIC18_Auto.c: 329: Value_AN1 = GetSampleADC();
  2528  000D24  EC0D  F018         	call	_GetSampleADC	;wreg free
  2529  000D28  C010  F0AB         	movff	?_GetSampleADC,_Value_AN1
  2530  000D2C  C011  F0AC         	movff	?_GetSampleADC+1,_Value_AN1+1
  2531                           
  2532                           ;TFG_PIC18_Auto.c: 331: Value_temp = (float)(log(10000.0 * ((1024.0 / Value_AN1 - 1))));
  2533  000D30  0E00               	movlw	0
  2534  000D32  6E2E               	movwf	___ftadd@f2,c
  2535  000D34  0E80               	movlw	128
  2536  000D36  6E2F               	movwf	___ftadd@f2+1,c
  2537  000D38  0EBF               	movlw	191
  2538  000D3A  6E30               	movwf	___ftadd@f2+2,c
  2539  000D3C  C0AB  F018         	movff	_Value_AN1,___lwtoft@c
  2540  000D40  C0AC  F019         	movff	_Value_AN1+1,___lwtoft@c+1
  2541  000D44  EC91  F017         	call	___lwtoft	;wreg free
  2542  000D48  C018  F01F         	movff	?___lwtoft,___ftdiv@f2
  2543  000D4C  C019  F020         	movff	?___lwtoft+1,___ftdiv@f2+1
  2544  000D50  C01A  F021         	movff	?___lwtoft+2,___ftdiv@f2+2
  2545  000D54  0E00               	movlw	0
  2546  000D56  6E1C               	movwf	___ftdiv@f1,c
  2547  000D58  0E80               	movlw	128
  2548  000D5A  6E1D               	movwf	___ftdiv@f1+1,c
  2549  000D5C  0E44               	movlw	68
  2550  000D5E  6E1E               	movwf	___ftdiv@f1+2,c
  2551  000D60  ECB1  F012         	call	___ftdiv	;wreg free
  2552  000D64  C01C  F02B         	movff	?___ftdiv,___ftadd@f1
  2553  000D68  C01D  F02C         	movff	?___ftdiv+1,___ftadd@f1+1
  2554  000D6C  C01E  F02D         	movff	?___ftdiv+2,___ftadd@f1+2
  2555  000D70  EC9B  F00D         	call	___ftadd	;wreg free
  2556  000D74  C02B  F037         	movff	?___ftadd,___ftmul@f1
  2557  000D78  C02C  F038         	movff	?___ftadd+1,___ftmul@f1+1
  2558  000D7C  C02D  F039         	movff	?___ftadd+2,___ftmul@f1+2
  2559  000D80  0E40               	movlw	64
  2560  000D82  6E3A               	movwf	___ftmul@f2,c
  2561  000D84  0E1C               	movlw	28
  2562  000D86  6E3B               	movwf	___ftmul@f2+1,c
  2563  000D88  0E46               	movlw	70
  2564  000D8A  6E3C               	movwf	___ftmul@f2+2,c
  2565  000D8C  EC21  F012         	call	___ftmul	;wreg free
  2566  000D90  C037  F14B         	movff	?___ftmul,_output_logic$2547
  2567  000D94  C038  F14C         	movff	?___ftmul+1,_output_logic$2547+1
  2568  000D98  C039  F14D         	movff	?___ftmul+2,_output_logic$2547+2
  2569                           
  2570                           ;TFG_PIC18_Auto.c: 331: Value_temp = (float)(log(10000.0 * ((1024.0 / Value_AN1 - 1))));
  2571  000D9C  C14B  F0BF         	movff	_output_logic$2547,log@x
  2572  000DA0  C14C  F0C0         	movff	_output_logic$2547+1,log@x+1
  2573  000DA4  C14D  F0C1         	movff	_output_logic$2547+2,log@x+2
  2574  000DA8  ECBD  F00F         	call	_log	;wreg free
  2575  000DAC  C0BF  F0A8         	movff	?_log,_Value_temp
  2576  000DB0  C0C0  F0A9         	movff	?_log+1,_Value_temp+1
  2577  000DB4  C0C1  F0AA         	movff	?_log+2,_Value_temp+2
  2578                           
  2579                           ;TFG_PIC18_Auto.c: 332: Value_temp = (float)(1 / (0.001129148 + (0.000234125 + (0.000000
      +                          0876741 * Value_temp * Value_temp )) * Value_temp ));
  2580  000DB8  C0A8  F03A         	movff	_Value_temp,___ftmul@f2
  2581  000DBC  C0A9  F03B         	movff	_Value_temp+1,___ftmul@f2+1
  2582  000DC0  C0AA  F03C         	movff	_Value_temp+2,___ftmul@f2+2
  2583  000DC4  C0A8  F037         	movff	_Value_temp,___ftmul@f1
  2584  000DC8  C0A9  F038         	movff	_Value_temp+1,___ftmul@f1+1
  2585  000DCC  C0AA  F039         	movff	_Value_temp+2,___ftmul@f1+2
  2586  000DD0  EC21  F012         	call	___ftmul	;wreg free
  2587  000DD4  C037  F14E         	movff	?___ftmul,_output_logic$2548
  2588  000DD8  C038  F14F         	movff	?___ftmul+1,_output_logic$2548+1
  2589  000DDC  C039  F150         	movff	?___ftmul+2,_output_logic$2548+2
  2590                           
  2591                           ;TFG_PIC18_Auto.c: 332: Value_temp = (float)(1 / (0.001129148 + (0.000234125 + (0.000000
      +                          0876741 * Value_temp * Value_temp )) * Value_temp ));
  2592  000DE0  0E7F               	movlw	127
  2593  000DE2  6E2E               	movwf	___ftadd@f2,c
  2594  000DE4  0E75               	movlw	117
  2595  000DE6  6E2F               	movwf	___ftadd@f2+1,c
  2596  000DE8  0E39               	movlw	57
  2597  000DEA  6E30               	movwf	___ftadd@f2+2,c
  2598  000DEC  0E47               	movlw	71
  2599  000DEE  6E3A               	movwf	___ftmul@f2,c
  2600  000DF0  0EBC               	movlw	188
  2601  000DF2  6E3B               	movwf	___ftmul@f2+1,c
  2602  000DF4  0E33               	movlw	51
  2603  000DF6  6E3C               	movwf	___ftmul@f2+2,c
  2604  000DF8  C14E  F037         	movff	_output_logic$2548,___ftmul@f1
  2605  000DFC  C14F  F038         	movff	_output_logic$2548+1,___ftmul@f1+1
  2606  000E00  C150  F039         	movff	_output_logic$2548+2,___ftmul@f1+2
  2607  000E04  EC21  F012         	call	___ftmul	;wreg free
  2608  000E08  C037  F02B         	movff	?___ftmul,___ftadd@f1
  2609  000E0C  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  2610  000E10  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  2611  000E14  EC9B  F00D         	call	___ftadd	;wreg free
  2612  000E18  C02B  F151         	movff	?___ftadd,_output_logic$2549
  2613  000E1C  C02C  F152         	movff	?___ftadd+1,_output_logic$2549+1
  2614  000E20  C02D  F153         	movff	?___ftadd+2,_output_logic$2549+2
  2615                           
  2616                           ;TFG_PIC18_Auto.c: 332: Value_temp = (float)(1 / (0.001129148 + (0.000234125 + (0.000000
      +                          0876741 * Value_temp * Value_temp )) * Value_temp ));
  2617  000E24  0E00               	movlw	0
  2618  000E26  6E1C               	movwf	___ftdiv@f1,c
  2619  000E28  0E80               	movlw	128
  2620  000E2A  6E1D               	movwf	___ftdiv@f1+1,c
  2621  000E2C  0E3F               	movlw	63
  2622  000E2E  6E1E               	movwf	___ftdiv@f1+2,c
  2623  000E30  0E00               	movlw	0
  2624  000E32  6E2E               	movwf	___ftadd@f2,c
  2625  000E34  0E94               	movlw	148
  2626  000E36  6E2F               	movwf	___ftadd@f2+1,c
  2627  000E38  0E3A               	movlw	58
  2628  000E3A  6E30               	movwf	___ftadd@f2+2,c
  2629  000E3C  C0A8  F03A         	movff	_Value_temp,___ftmul@f2
  2630  000E40  C0A9  F03B         	movff	_Value_temp+1,___ftmul@f2+1
  2631  000E44  C0AA  F03C         	movff	_Value_temp+2,___ftmul@f2+2
  2632  000E48  C151  F037         	movff	_output_logic$2549,___ftmul@f1
  2633  000E4C  C152  F038         	movff	_output_logic$2549+1,___ftmul@f1+1
  2634  000E50  C153  F039         	movff	_output_logic$2549+2,___ftmul@f1+2
  2635  000E54  EC21  F012         	call	___ftmul	;wreg free
  2636  000E58  C037  F02B         	movff	?___ftmul,___ftadd@f1
  2637  000E5C  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  2638  000E60  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  2639  000E64  EC9B  F00D         	call	___ftadd	;wreg free
  2640  000E68  C02B  F01F         	movff	?___ftadd,___ftdiv@f2
  2641  000E6C  C02C  F020         	movff	?___ftadd+1,___ftdiv@f2+1
  2642  000E70  C02D  F021         	movff	?___ftadd+2,___ftdiv@f2+2
  2643  000E74  ECB1  F012         	call	___ftdiv	;wreg free
  2644  000E78  C01C  F0A8         	movff	?___ftdiv,_Value_temp
  2645  000E7C  C01D  F0A9         	movff	?___ftdiv+1,_Value_temp+1
  2646  000E80  C01E  F0AA         	movff	?___ftdiv+2,_Value_temp+2
  2647                           
  2648                           ;TFG_PIC18_Auto.c: 333: Value_temp = (float)(Value_temp - 273.15);
  2649  000E84  C0A8  F02B         	movff	_Value_temp,___ftadd@f1
  2650  000E88  C0A9  F02C         	movff	_Value_temp+1,___ftadd@f1+1
  2651  000E8C  C0AA  F02D         	movff	_Value_temp+2,___ftadd@f1+2
  2652  000E90  0E93               	movlw	147
  2653  000E92  6E2E               	movwf	___ftadd@f2,c
  2654  000E94  0E88               	movlw	136
  2655  000E96  6E2F               	movwf	___ftadd@f2+1,c
  2656  000E98  0EC3               	movlw	195
  2657  000E9A  6E30               	movwf	___ftadd@f2+2,c
  2658  000E9C  EC9B  F00D         	call	___ftadd	;wreg free
  2659  000EA0  C02B  F0A8         	movff	?___ftadd,_Value_temp
  2660  000EA4  C02C  F0A9         	movff	?___ftadd+1,_Value_temp+1
  2661  000EA8  C02D  F0AA         	movff	?___ftadd+2,_Value_temp+2
  2662                           
  2663                           ;TFG_PIC18_Auto.c: 335: Valor_Medio_TempAnalog[samples_num]=Value_temp;
  2664  000EAC  C0A4  F01E         	movff	_samples_num,___wmul@multiplier
  2665  000EB0  C0A5  F01F         	movff	_samples_num+1,___wmul@multiplier+1
  2666  000EB4  0E00               	movlw	0
  2667  000EB6  6E21               	movwf	___wmul@multiplicand+1,c
  2668  000EB8  0E03               	movlw	3
  2669  000EBA  6E20               	movwf	___wmul@multiplicand,c
  2670  000EBC  EC6C  F017         	call	___wmul	;wreg free
  2671  000EC0  0E34               	movlw	low _Valor_Medio_TempAnalog
  2672  000EC2  241E               	addwf	?___wmul,w,c
  2673  000EC4  6ED9               	movwf	fsr2l,c
  2674  000EC6  0E01               	movlw	high _Valor_Medio_TempAnalog
  2675  000EC8  201F               	addwfc	?___wmul+1,w,c
  2676  000ECA  6EDA               	movwf	fsr2h,c
  2677  000ECC  C0A8  FFDE         	movff	_Value_temp,postinc2
  2678  000ED0  C0A9  FFDE         	movff	_Value_temp+1,postinc2
  2679  000ED4  C0AA  FFDE         	movff	_Value_temp+2,postinc2
  2680                           
  2681                           ;TFG_PIC18_Auto.c: 338: if(Value_pot < 50){
  2682  000ED8  C071  F010         	movff	_Value_pot,___ftge@ff1
  2683  000EDC  C072  F011         	movff	_Value_pot+1,___ftge@ff1+1
  2684  000EE0  C073  F012         	movff	_Value_pot+2,___ftge@ff1+2
  2685  000EE4  0E00               	movlw	0
  2686  000EE6  6E13               	movwf	___ftge@ff2,c
  2687  000EE8  0E48               	movlw	72
  2688  000EEA  6E14               	movwf	___ftge@ff2+1,c
  2689  000EEC  0E42               	movlw	66
  2690  000EEE  6E15               	movwf	___ftge@ff2+2,c
  2691  000EF0  ECEB  F013         	call	___ftge	;wreg free
  2692  000EF4  B0D8               	btfsc	status,0,c
  2693  000EF6  D002               	goto	l331
  2694                           
  2695                           ;TFG_PIC18_Auto.c: 339: PORTBbits.RB5 =1;
  2696  000EF8  8A81               	bsf	3969,5,c	;volatile
  2697                           
  2698                           ;TFG_PIC18_Auto.c: 340: }
  2699  000EFA  D001               	goto	l6427
  2700  000EFC                     l331:
  2701                           
  2702                           ;TFG_PIC18_Auto.c: 341: else{
  2703                           ;TFG_PIC18_Auto.c: 342: PORTBbits.RB5 =0;
  2704  000EFC  9A81               	bcf	3969,5,c	;volatile
  2705  000EFE                     l6427:
  2706                           
  2707                           ;TFG_PIC18_Auto.c: 343: }
  2708                           ;TFG_PIC18_Auto.c: 349: samples_num++;
  2709  000EFE  0100               	movlb	0	; () banked
  2710  000F00  4BA4               	infsnz	_samples_num& (0+255),f,b
  2711  000F02  2BA5               	incf	(_samples_num+1)& (0+255),f,b
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;TFG_PIC18_Auto.c: 350: postscalersampleflag = 0;
  2715  000F04  0E00               	movlw	0
  2716  000F06  0100               	movlb	0	; () banked
  2717  000F08  6FA1               	movwf	(_postscalersampleflag+1)& (0+255),b
  2718  000F0A  0E00               	movlw	0
  2719  000F0C  6FA0               	movwf	_postscalersampleflag& (0+255),b
  2720  000F0E                     l6431:
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;TFG_PIC18_Auto.c: 353: }
  2724                           ;TFG_PIC18_Auto.c: 354: if(samples_num == 4){
  2725  000F0E  0E04               	movlw	4
  2726  000F10  0100               	movlb	0	; () banked
  2727  000F12  19A4               	xorwf	_samples_num& (0+255),w,b
  2728  000F14  0100               	movlb	0	; () banked
  2729  000F16  11A5               	iorwf	(_samples_num+1)& (0+255),w,b
  2730  000F18  A4D8               	btfss	status,2,c
  2731  000F1A  0012               	return	
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;TFG_PIC18_Auto.c: 355: samples_num=0;
  2735  000F1C  0E00               	movlw	0
  2736  000F1E  0100               	movlb	0	; () banked
  2737  000F20  6FA5               	movwf	(_samples_num+1)& (0+255),b
  2738  000F22  0E00               	movlw	0
  2739  000F24  6FA4               	movwf	_samples_num& (0+255),b
  2740                           
  2741                           ;TFG_PIC18_Auto.c: 356: while(samples_num < 4){
  2742  000F26  D027               	goto	l6439
  2743  000F28                     l6435:
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;TFG_PIC18_Auto.c: 358: Valor_Medio_TA = Valor_Medio_TA + Valor_Medio_TempAnalog[samples
      +                          _num];
  2747  000F28  C0A4  F01E         	movff	_samples_num,___wmul@multiplier
  2748  000F2C  C0A5  F01F         	movff	_samples_num+1,___wmul@multiplier+1
  2749  000F30  0E00               	movlw	0
  2750  000F32  6E21               	movwf	___wmul@multiplicand+1,c
  2751  000F34  0E03               	movlw	3
  2752  000F36  6E20               	movwf	___wmul@multiplicand,c
  2753  000F38  EC6C  F017         	call	___wmul	;wreg free
  2754  000F3C  0E34               	movlw	low _Valor_Medio_TempAnalog
  2755  000F3E  241E               	addwf	?___wmul,w,c
  2756  000F40  6ED9               	movwf	fsr2l,c
  2757  000F42  0E01               	movlw	high _Valor_Medio_TempAnalog
  2758  000F44  201F               	addwfc	?___wmul+1,w,c
  2759  000F46  6EDA               	movwf	fsr2h,c
  2760  000F48  CFDE F02B          	movff	postinc2,___ftadd@f1
  2761  000F4C  CFDE F02C          	movff	postinc2,___ftadd@f1+1
  2762  000F50  CFDD F02D          	movff	postdec2,___ftadd@f1+2
  2763  000F54  C06E  F02E         	movff	_Valor_Medio_TA,___ftadd@f2
  2764  000F58  C06F  F02F         	movff	_Valor_Medio_TA+1,___ftadd@f2+1
  2765  000F5C  C070  F030         	movff	_Valor_Medio_TA+2,___ftadd@f2+2
  2766  000F60  EC9B  F00D         	call	___ftadd	;wreg free
  2767  000F64  C02B  F06E         	movff	?___ftadd,_Valor_Medio_TA
  2768  000F68  C02C  F06F         	movff	?___ftadd+1,_Valor_Medio_TA+1
  2769  000F6C  C02D  F070         	movff	?___ftadd+2,_Valor_Medio_TA+2
  2770                           
  2771                           ;TFG_PIC18_Auto.c: 361: samples_num++;
  2772  000F70  0100               	movlb	0	; () banked
  2773  000F72  4BA4               	infsnz	_samples_num& (0+255),f,b
  2774  000F74  2BA5               	incf	(_samples_num+1)& (0+255),f,b
  2775  000F76                     l6439:
  2776                           
  2777                           ; BSR set to: 0
  2778  000F76  0100               	movlb	0	; () banked
  2779  000F78  51A5               	movf	(_samples_num+1)& (0+255),w,b
  2780  000F7A  E105               	bnz	l6441
  2781  000F7C  0E04               	movlw	4
  2782  000F7E  0100               	movlb	0	; () banked
  2783  000F80  5DA4               	subwf	_samples_num& (0+255),w,b
  2784  000F82  A0D8               	btfss	status,0,c
  2785  000F84  D7D1               	goto	l6435
  2786  000F86                     l6441:
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;TFG_PIC18_Auto.c: 362: }
  2790                           ;TFG_PIC18_Auto.c: 363: Valor_Medio_TA = Valor_Medio_TA/4.0;
  2791  000F86  C06E  F01C         	movff	_Valor_Medio_TA,___ftdiv@f1
  2792  000F8A  C06F  F01D         	movff	_Valor_Medio_TA+1,___ftdiv@f1+1
  2793  000F8E  C070  F01E         	movff	_Valor_Medio_TA+2,___ftdiv@f1+2
  2794  000F92  0E00               	movlw	0
  2795  000F94  6E1F               	movwf	___ftdiv@f2,c
  2796  000F96  0E80               	movlw	128
  2797  000F98  6E20               	movwf	___ftdiv@f2+1,c
  2798  000F9A  0E40               	movlw	64
  2799  000F9C  6E21               	movwf	___ftdiv@f2+2,c
  2800  000F9E  ECB1  F012         	call	___ftdiv	;wreg free
  2801  000FA2  C01C  F06E         	movff	?___ftdiv,_Valor_Medio_TA
  2802  000FA6  C01D  F06F         	movff	?___ftdiv+1,_Valor_Medio_TA+1
  2803  000FAA  C01E  F070         	movff	?___ftdiv+2,_Valor_Medio_TA+2
  2804                           
  2805                           ;TFG_PIC18_Auto.c: 364: sprintf(CharTX, "DATA ANALOG :Temperature = %.1f C",Valor_Medio_
      +                          TA);
  2806  000FAE  0E1C               	movlw	low _CharTX
  2807  000FB0  0100               	movlb	0	; () banked
  2808  000FB2  6FC9               	movwf	sprintf@sp& (0+255),b
  2809  000FB4  0E01               	movlw	high _CharTX
  2810  000FB6  0100               	movlb	0	; () banked
  2811  000FB8  6FCA               	movwf	(sprintf@sp+1)& (0+255),b
  2812  000FBA  0ED3               	movlw	low STR_4
  2813  000FBC  0100               	movlb	0	; () banked
  2814  000FBE  6FCB               	movwf	sprintf@f& (0+255),b
  2815  000FC0  0EFE               	movlw	high STR_4
  2816  000FC2  0100               	movlb	0	; () banked
  2817  000FC4  6FCC               	movwf	(sprintf@f+1)& (0+255),b
  2818  000FC6  C06E  F0CD         	movff	_Valor_Medio_TA,?_sprintf+4
  2819  000FCA  C06F  F0CE         	movff	_Valor_Medio_TA+1,?_sprintf+5
  2820  000FCE  C070  F0CF         	movff	_Valor_Medio_TA+2,?_sprintf+6
  2821  000FD2  ECB9  F000         	call	_sprintf	;wreg free
  2822                           
  2823                           ;TFG_PIC18_Auto.c: 365: SendStringUSART(CharTX);
  2824  000FD6  0E1C               	movlw	low _CharTX
  2825  000FD8  6E15               	movwf	SendStringUSART@text,c
  2826  000FDA  0E01               	movlw	high _CharTX
  2827  000FDC  6E16               	movwf	SendStringUSART@text+1,c
  2828  000FDE  EC19  F018         	call	_SendStringUSART	;wreg free
  2829                           
  2830                           ;TFG_PIC18_Auto.c: 366: Trigger =1;
  2831  000FE2  0E00               	movlw	0
  2832  000FE4  6E44               	movwf	_Trigger+1,c
  2833  000FE6  0E01               	movlw	1
  2834  000FE8  6E43               	movwf	_Trigger,c
  2835                           
  2836                           ;TFG_PIC18_Auto.c: 369: }
  2837                           ;TFG_PIC18_Auto.c: 372: break;
  2838  000FEA  0012               	return	
  2839  000FEC                     l6449:
  2840                           
  2841                           ;TFG_PIC18_Auto.c: 375: postscalersampleflag = 0;
  2842  000FEC  0E00               	movlw	0
  2843  000FEE  0100               	movlb	0	; () banked
  2844  000FF0  6FA1               	movwf	(_postscalersampleflag+1)& (0+255),b
  2845  000FF2  0E00               	movlw	0
  2846  000FF4  6FA0               	movwf	_postscalersampleflag& (0+255),b
  2847                           
  2848                           ;TFG_PIC18_Auto.c: 376: break;
  2849  000FF6  0012               	return	
  2850  000FF8                     l6451:
  2851                           
  2852                           ;TFG_PIC18_Auto.c: 378: PORTC = 0b00000111;
  2853  000FF8  0E07               	movlw	7
  2854  000FFA  6E82               	movwf	3970,c	;volatile
  2855                           
  2856                           ;TFG_PIC18_Auto.c: 379: TRISBbits.TRISB4 = 0;
  2857  000FFC  9893               	bcf	3987,4,c	;volatile
  2858                           
  2859                           ;TFG_PIC18_Auto.c: 380: PORTBbits.RB4 = 1;
  2860  000FFE  8881               	bsf	3969,4,c	;volatile
  2861                           
  2862                           ;TFG_PIC18_Auto.c: 381: TMR2IE = 1;
  2863  001000  829D               	bsf	3997,1,c	;volatile
  2864                           
  2865                           ;TFG_PIC18_Auto.c: 382: T2CON = 0;
  2866  001002  0E00               	movlw	0
  2867  001004  6ECA               	movwf	4042,c	;volatile
  2868                           
  2869                           ;TFG_PIC18_Auto.c: 383: TMR2IF = 0;
  2870  001006  929E               	bcf	3998,1,c	;volatile
  2871                           
  2872                           ;TFG_PIC18_Auto.c: 384: TMR2 = 0;
  2873  001008  0E00               	movlw	0
  2874  00100A  6ECC               	movwf	4044,c	;volatile
  2875                           
  2876                           ;TFG_PIC18_Auto.c: 385: T2CONbits.T2CKPS = 0b01;
  2877  00100C  50CA               	movf	4042,w,c	;volatile
  2878  00100E  0BFC               	andlw	-4
  2879  001010  0901               	iorlw	1
  2880  001012  6ECA               	movwf	4042,c	;volatile
  2881                           
  2882                           ;TFG_PIC18_Auto.c: 386: break;
  2883  001014  0012               	return	
  2884  001016                     l6461:
  2885                           
  2886                           ;TFG_PIC18_Auto.c: 390: GetDataSensorDHT22();
  2887  001016  EC5A  F010         	call	_GetDataSensorDHT22	;wreg free
  2888                           
  2889                           ;TFG_PIC18_Auto.c: 392: if (CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2) & 0xF
      +                          F)) {
  2890  00101A  0100               	movlb	0	; () banked
  2891  00101C  5184               	movf	_RH_Byte2& (0+255),w,b
  2892  00101E  0100               	movlb	0	; () banked
  2893  001020  2582               	addwf	_RH_Byte1& (0+255),w,b
  2894  001022  0101               	movlb	1	; () banked
  2895  001024  6F48               	movwf	??_output_logic& (0+255),b
  2896  001026  0100               	movlb	0	; () banked
  2897  001028  5185               	movf	(_RH_Byte2+1)& (0+255),w,b
  2898  00102A  0100               	movlb	0	; () banked
  2899  00102C  2183               	addwfc	(_RH_Byte1+1)& (0+255),w,b
  2900  00102E  0101               	movlb	1	; () banked
  2901  001030  6F49               	movwf	(??_output_logic+1)& (0+255),b
  2902  001032  0100               	movlb	0	; () banked
  2903  001034  5188               	movf	_T_Byte1& (0+255),w,b
  2904  001036  0101               	movlb	1	; () banked
  2905  001038  2748               	addwf	??_output_logic& (0+255),f,b
  2906  00103A  0100               	movlb	0	; () banked
  2907  00103C  5189               	movf	(_T_Byte1+1)& (0+255),w,b
  2908  00103E  0101               	movlb	1	; () banked
  2909  001040  2349               	addwfc	(??_output_logic+1)& (0+255),f,b
  2910  001042  0100               	movlb	0	; () banked
  2911  001044  518A               	movf	_T_Byte2& (0+255),w,b
  2912  001046  0101               	movlb	1	; () banked
  2913  001048  2748               	addwf	??_output_logic& (0+255),f,b
  2914  00104A  0100               	movlb	0	; () banked
  2915  00104C  518B               	movf	(_T_Byte2+1)& (0+255),w,b
  2916  00104E  0101               	movlb	1	; () banked
  2917  001050  2349               	addwfc	(??_output_logic+1)& (0+255),f,b
  2918  001052  0EFF               	movlw	255
  2919  001054  0101               	movlb	1	; () banked
  2920  001056  1748               	andwf	??_output_logic& (0+255),f,b
  2921  001058  0E00               	movlw	0
  2922  00105A  1749               	andwf	(??_output_logic+1)& (0+255),f,b
  2923  00105C  0100               	movlb	0	; () banked
  2924  00105E  517C               	movf	_CheckSum& (0+255),w,b
  2925  001060  0101               	movlb	1	; () banked
  2926  001062  1948               	xorwf	??_output_logic& (0+255),w,b
  2927  001064  E15C               	bnz	l6477
  2928  001066  0100               	movlb	0	; () banked
  2929  001068  517D               	movf	(_CheckSum+1)& (0+255),w,b
  2930  00106A  0101               	movlb	1	; () banked
  2931  00106C  1949               	xorwf	(??_output_logic+1)& (0+255),w,b
  2932  00106E  A4D8               	btfss	status,2,c
  2933  001070  D056               	goto	l6477
  2934                           
  2935                           ; BSR set to: 1
  2936                           ;TFG_PIC18_Auto.c: 393: if (sign) {
  2937  001072  0100               	movlb	0	; () banked
  2938  001074  51A6               	movf	_sign& (0+255),w,b
  2939  001076  0100               	movlb	0	; () banked
  2940  001078  11A7               	iorwf	(_sign+1)& (0+255),w,b
  2941  00107A  B4D8               	btfsc	status,2,c
  2942  00107C  D01B               	goto	l6471
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;TFG_PIC18_Auto.c: 394: sprintf(CharTX, "DATA DHT22 :Temperature = -%.1f C", Value_tempd
      +                          ht22);
  2946  00107E  0E1C               	movlw	low _CharTX
  2947  001080  0100               	movlb	0	; () banked
  2948  001082  6FC9               	movwf	sprintf@sp& (0+255),b
  2949  001084  0E01               	movlw	high _CharTX
  2950  001086  0100               	movlb	0	; () banked
  2951  001088  6FCA               	movwf	(sprintf@sp+1)& (0+255),b
  2952  00108A  0EF5               	movlw	low STR_5
  2953  00108C  0100               	movlb	0	; () banked
  2954  00108E  6FCB               	movwf	sprintf@f& (0+255),b
  2955  001090  0EFE               	movlw	high STR_5
  2956  001092  0100               	movlb	0	; () banked
  2957  001094  6FCC               	movwf	(sprintf@f+1)& (0+255),b
  2958  001096  C077  F0CD         	movff	_Value_tempdht22,?_sprintf+4
  2959  00109A  C078  F0CE         	movff	_Value_tempdht22+1,?_sprintf+5
  2960  00109E  C079  F0CF         	movff	_Value_tempdht22+2,?_sprintf+6
  2961  0010A2  ECB9  F000         	call	_sprintf	;wreg free
  2962                           
  2963                           ;TFG_PIC18_Auto.c: 396: SendStringUSART(CharTX);
  2964  0010A6  0E1C               	movlw	low _CharTX
  2965  0010A8  6E15               	movwf	SendStringUSART@text,c
  2966  0010AA  0E01               	movlw	high _CharTX
  2967  0010AC  6E16               	movwf	SendStringUSART@text+1,c
  2968  0010AE  EC19  F018         	call	_SendStringUSART	;wreg free
  2969                           
  2970                           ;TFG_PIC18_Auto.c: 397: } else {
  2971  0010B2  D01A               	goto	l6475
  2972  0010B4                     l6471:
  2973                           
  2974                           ;TFG_PIC18_Auto.c: 398: sprintf(CharTX, "DATA DHT22 :Temperature = %.1f C", Value_tempdh
      +                          t22);
  2975  0010B4  0E1C               	movlw	low _CharTX
  2976  0010B6  0100               	movlb	0	; () banked
  2977  0010B8  6FC9               	movwf	sprintf@sp& (0+255),b
  2978  0010BA  0E01               	movlw	high _CharTX
  2979  0010BC  0100               	movlb	0	; () banked
  2980  0010BE  6FCA               	movwf	(sprintf@sp+1)& (0+255),b
  2981  0010C0  0E17               	movlw	low STR_6
  2982  0010C2  0100               	movlb	0	; () banked
  2983  0010C4  6FCB               	movwf	sprintf@f& (0+255),b
  2984  0010C6  0EFF               	movlw	high STR_6
  2985  0010C8  0100               	movlb	0	; () banked
  2986  0010CA  6FCC               	movwf	(sprintf@f+1)& (0+255),b
  2987  0010CC  C077  F0CD         	movff	_Value_tempdht22,?_sprintf+4
  2988  0010D0  C078  F0CE         	movff	_Value_tempdht22+1,?_sprintf+5
  2989  0010D4  C079  F0CF         	movff	_Value_tempdht22+2,?_sprintf+6
  2990  0010D8  ECB9  F000         	call	_sprintf	;wreg free
  2991                           
  2992                           ;TFG_PIC18_Auto.c: 399: SendStringUSART(CharTX);
  2993  0010DC  0E1C               	movlw	low _CharTX
  2994  0010DE  6E15               	movwf	SendStringUSART@text,c
  2995  0010E0  0E01               	movlw	high _CharTX
  2996  0010E2  6E16               	movwf	SendStringUSART@text+1,c
  2997  0010E4  EC19  F018         	call	_SendStringUSART	;wreg free
  2998  0010E8                     l6475:
  2999                           
  3000                           ;TFG_PIC18_Auto.c: 400: }
  3001                           ;TFG_PIC18_Auto.c: 402: sprintf(CharTX, "DATA DHT22 :Humidity = %.1f %%", Value_rhdht22)
      +                          ;
  3002  0010E8  0E1C               	movlw	low _CharTX
  3003  0010EA  0100               	movlb	0	; () banked
  3004  0010EC  6FC9               	movwf	sprintf@sp& (0+255),b
  3005  0010EE  0E01               	movlw	high _CharTX
  3006  0010F0  0100               	movlb	0	; () banked
  3007  0010F2  6FCA               	movwf	(sprintf@sp+1)& (0+255),b
  3008  0010F4  0E59               	movlw	low STR_7
  3009  0010F6  0100               	movlb	0	; () banked
  3010  0010F8  6FCB               	movwf	sprintf@f& (0+255),b
  3011  0010FA  0EFF               	movlw	high STR_7
  3012  0010FC  0100               	movlb	0	; () banked
  3013  0010FE  6FCC               	movwf	(sprintf@f+1)& (0+255),b
  3014  001100  C074  F0CD         	movff	_Value_rhdht22,?_sprintf+4
  3015  001104  C075  F0CE         	movff	_Value_rhdht22+1,?_sprintf+5
  3016  001108  C076  F0CF         	movff	_Value_rhdht22+2,?_sprintf+6
  3017  00110C  ECB9  F000         	call	_sprintf	;wreg free
  3018                           
  3019                           ;TFG_PIC18_Auto.c: 403: SendStringUSART(CharTX);
  3020  001110  0E1C               	movlw	low _CharTX
  3021  001112  6E15               	movwf	SendStringUSART@text,c
  3022  001114  0E01               	movlw	high _CharTX
  3023  001116  6E16               	movwf	SendStringUSART@text+1,c
  3024  001118  EC19  F018         	call	_SendStringUSART	;wreg free
  3025                           
  3026                           ;TFG_PIC18_Auto.c: 405: } else {
  3027  00111C  D006               	goto	l6479
  3028  00111E                     l6477:
  3029                           
  3030                           ;TFG_PIC18_Auto.c: 406: SendStringUSART("Checksum Error!   Trying Again ... ");
  3031  00111E  0E8C               	movlw	low STR_8
  3032  001120  6E15               	movwf	SendStringUSART@text,c
  3033  001122  0EFE               	movlw	high STR_8
  3034  001124  6E16               	movwf	SendStringUSART@text+1,c
  3035  001126  EC19  F018         	call	_SendStringUSART	;wreg free
  3036  00112A                     l6479:
  3037                           
  3038                           ;TFG_PIC18_Auto.c: 407: }
  3039                           ;TFG_PIC18_Auto.c: 408: Trigger = 1;
  3040  00112A  0E00               	movlw	0
  3041  00112C  6E44               	movwf	_Trigger+1,c
  3042  00112E  0E01               	movlw	1
  3043  001130  6E43               	movwf	_Trigger,c
  3044                           
  3045                           ;TFG_PIC18_Auto.c: 413: break;
  3046                           
  3047                           ;TFG_PIC18_Auto.c: 412: case 'J':
  3048                           
  3049                           ;TFG_PIC18_Auto.c: 410: break;
  3050  001132  0012               	return	
  3051  001134                     l6481:
  3052                           
  3053                           ;TFG_PIC18_Auto.c: 417: Open_I2C1();
  3054  001134  EC39  F018         	call	_Open_I2C1	;wreg free
  3055                           
  3056                           ;TFG_PIC18_Auto.c: 418: break;
  3057  001138  0012               	return	
  3058  00113A                     l6483:
  3059                           
  3060                           ;TFG_PIC18_Auto.c: 422: if (postscalerflag == 1) {
  3061  00113A  0100               	movlb	0	; () banked
  3062  00113C  059A               	decf	_postscalerflag& (0+255),w,b
  3063  00113E  0100               	movlb	0	; () banked
  3064  001140  119B               	iorwf	(_postscalerflag+1)& (0+255),w,b
  3065  001142  A4D8               	btfss	status,2,c
  3066  001144  0012               	return	
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;TFG_PIC18_Auto.c: 426: I2C_TemFormula = ReadByte_I2C(0b00110000, 0x05);
  3070  001146  0E05               	movlw	5
  3071  001148  0100               	movlb	0	; () banked
  3072  00114A  6FB6               	movwf	ReadByte_I2C@RegisterAddress& (0+255),b
  3073  00114C  0E30               	movlw	48
  3074  00114E  EC8F  F00C         	call	_ReadByte_I2C
  3075  001152  C0B6  F06B         	movff	?_ReadByte_I2C,_I2C_TemFormula
  3076  001156  C0B7  F06C         	movff	?_ReadByte_I2C+1,_I2C_TemFormula+1
  3077  00115A  C0B8  F06D         	movff	?_ReadByte_I2C+2,_I2C_TemFormula+2
  3078                           
  3079                           ;TFG_PIC18_Auto.c: 429: sprintf(CharTX2, "DATA I2C :Temperature = %.1f C", I2C_TemFormul
      +                          a);
  3080  00115E  0E28               	movlw	low _CharTX2
  3081  001160  0100               	movlb	0	; () banked
  3082  001162  6FC9               	movwf	sprintf@sp& (0+255),b
  3083  001164  0E01               	movlw	high _CharTX2
  3084  001166  0100               	movlb	0	; () banked
  3085  001168  6FCA               	movwf	(sprintf@sp+1)& (0+255),b
  3086  00116A  0E78               	movlw	low STR_9
  3087  00116C  0100               	movlb	0	; () banked
  3088  00116E  6FCB               	movwf	sprintf@f& (0+255),b
  3089  001170  0EFF               	movlw	high STR_9
  3090  001172  0100               	movlb	0	; () banked
  3091  001174  6FCC               	movwf	(sprintf@f+1)& (0+255),b
  3092  001176  C06B  F0CD         	movff	_I2C_TemFormula,?_sprintf+4
  3093  00117A  C06C  F0CE         	movff	_I2C_TemFormula+1,?_sprintf+5
  3094  00117E  C06D  F0CF         	movff	_I2C_TemFormula+2,?_sprintf+6
  3095  001182  ECB9  F000         	call	_sprintf	;wreg free
  3096                           
  3097                           ;TFG_PIC18_Auto.c: 431: SendStringUSART(CharTX2);
  3098  001186  0E28               	movlw	low _CharTX2
  3099  001188  6E15               	movwf	SendStringUSART@text,c
  3100  00118A  0E01               	movlw	high _CharTX2
  3101  00118C  6E16               	movwf	SendStringUSART@text+1,c
  3102  00118E  EC19  F018         	call	_SendStringUSART	;wreg free
  3103                           
  3104                           ;TFG_PIC18_Auto.c: 433: postscalerflag = 0;
  3105  001192  0E00               	movlw	0
  3106  001194  0100               	movlb	0	; () banked
  3107  001196  6F9B               	movwf	(_postscalerflag+1)& (0+255),b
  3108  001198  0E00               	movlw	0
  3109  00119A  6F9A               	movwf	_postscalerflag& (0+255),b
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;TFG_PIC18_Auto.c: 434: Trigger = 1;
  3113  00119C  0E00               	movlw	0
  3114  00119E  6E44               	movwf	_Trigger+1,c
  3115  0011A0  0E01               	movlw	1
  3116  0011A2  6E43               	movwf	_Trigger,c
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;TFG_PIC18_Auto.c: 435: }
  3120                           ;TFG_PIC18_Auto.c: 437: break;
  3121  0011A4  0012               	return	
  3122  0011A6                     l6495:
  3123                           
  3124                           ;TFG_PIC18_Auto.c: 441: SendStringUSART("LDR mode ON");
  3125  0011A6  0EE9               	movlw	low STR_10
  3126  0011A8  6E15               	movwf	SendStringUSART@text,c
  3127  0011AA  0EFF               	movlw	high STR_10
  3128  0011AC  6E16               	movwf	SendStringUSART@text+1,c
  3129  0011AE  EC19  F018         	call	_SendStringUSART	;wreg free
  3130                           
  3131                           ;TFG_PIC18_Auto.c: 443: break;
  3132  0011B2  0012               	return	
  3133  0011B4                     l6497:
  3134                           
  3135                           ;TFG_PIC18_Auto.c: 448: SelectChannelADC(9);
  3136  0011B4  0E00               	movlw	0
  3137  0011B6  6E11               	movwf	SelectChannelADC@channel+1,c
  3138  0011B8  0E09               	movlw	9
  3139  0011BA  6E10               	movwf	SelectChannelADC@channel,c
  3140  0011BC  EC2F  F018         	call	_SelectChannelADC	;wreg free
  3141                           
  3142                           ;TFG_PIC18_Auto.c: 450: break;
  3143  0011C0  0012               	return	
  3144  0011C2                     l6499:
  3145                           
  3146                           ;TFG_PIC18_Auto.c: 454: if (postscalerflag == 1) {
  3147  0011C2  0100               	movlb	0	; () banked
  3148  0011C4  059A               	decf	_postscalerflag& (0+255),w,b
  3149  0011C6  0100               	movlb	0	; () banked
  3150  0011C8  119B               	iorwf	(_postscalerflag+1)& (0+255),w,b
  3151  0011CA  A4D8               	btfss	status,2,c
  3152  0011CC  0012               	return	
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;TFG_PIC18_Auto.c: 455: Value_AN9 = 0;
  3156  0011CE  0E00               	movlw	0
  3157  0011D0  0100               	movlb	0	; () banked
  3158  0011D2  6F93               	movwf	(_Value_AN9+1)& (0+255),b
  3159  0011D4  0E00               	movlw	0
  3160  0011D6  6F92               	movwf	_Value_AN9& (0+255),b
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;TFG_PIC18_Auto.c: 457: Value_AN9 = GetSampleADC();
  3164  0011D8  EC0D  F018         	call	_GetSampleADC	;wreg free
  3165  0011DC  C010  F092         	movff	?_GetSampleADC,_Value_AN9
  3166  0011E0  C011  F093         	movff	?_GetSampleADC+1,_Value_AN9+1
  3167                           
  3168                           ;TFG_PIC18_Auto.c: 459: sprintf(CharTX, "DATA LDR :Valor Analog = %d",Value_AN9);
  3169  0011E4  0E1C               	movlw	low _CharTX
  3170  0011E6  0100               	movlb	0	; () banked
  3171  0011E8  6FC9               	movwf	sprintf@sp& (0+255),b
  3172  0011EA  0E01               	movlw	high _CharTX
  3173  0011EC  0100               	movlb	0	; () banked
  3174  0011EE  6FCA               	movwf	(sprintf@sp+1)& (0+255),b
  3175  0011F0  0E97               	movlw	low STR_11
  3176  0011F2  0100               	movlb	0	; () banked
  3177  0011F4  6FCB               	movwf	sprintf@f& (0+255),b
  3178  0011F6  0EFF               	movlw	high STR_11
  3179  0011F8  0100               	movlb	0	; () banked
  3180  0011FA  6FCC               	movwf	(sprintf@f+1)& (0+255),b
  3181  0011FC  C092  F0CD         	movff	_Value_AN9,?_sprintf+4
  3182  001200  C093  F0CE         	movff	_Value_AN9+1,?_sprintf+5
  3183  001204  ECB9  F000         	call	_sprintf	;wreg free
  3184                           
  3185                           ;TFG_PIC18_Auto.c: 461: SendStringUSART(CharTX);
  3186  001208  0E1C               	movlw	low _CharTX
  3187  00120A  6E15               	movwf	SendStringUSART@text,c
  3188  00120C  0E01               	movlw	high _CharTX
  3189  00120E  6E16               	movwf	SendStringUSART@text+1,c
  3190  001210  EC19  F018         	call	_SendStringUSART	;wreg free
  3191                           
  3192                           ;TFG_PIC18_Auto.c: 463: postscalerflag = 0;
  3193  001214  0E00               	movlw	0
  3194  001216  0100               	movlb	0	; () banked
  3195  001218  6F9B               	movwf	(_postscalerflag+1)& (0+255),b
  3196  00121A  0E00               	movlw	0
  3197  00121C  6F9A               	movwf	_postscalerflag& (0+255),b
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;TFG_PIC18_Auto.c: 464: Trigger = 1;
  3201  00121E  0E00               	movlw	0
  3202  001220  6E44               	movwf	_Trigger+1,c
  3203  001222  0E01               	movlw	1
  3204  001224  6E43               	movwf	_Trigger,c
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;TFG_PIC18_Auto.c: 465: }
  3208                           ;TFG_PIC18_Auto.c: 467: break;
  3209  001226  0012               	return	
  3210  001228                     l6513:
  3211                           
  3212                           ;TFG_PIC18_Auto.c: 471: SendStringUSART("Sleep 8s");
  3213  001228  0EF5               	movlw	low STR_12
  3214  00122A  6E15               	movwf	SendStringUSART@text,c
  3215  00122C  0EFF               	movlw	high STR_12
  3216  00122E  6E16               	movwf	SendStringUSART@text+1,c
  3217  001230  EC19  F018         	call	_SendStringUSART	;wreg free
  3218                           
  3219                           ;TFG_PIC18_Auto.c: 473: CloseI2C();
  3220  001234  EC6F  F018         	call	_CloseI2C	;wreg free
  3221                           
  3222                           ;TFG_PIC18_Auto.c: 474: T2CON = 0;
  3223  001238  0E00               	movlw	0
  3224  00123A  6ECA               	movwf	4042,c	;volatile
  3225                           
  3226                           ;TFG_PIC18_Auto.c: 475: StopADC();
  3227  00123C  EC6D  F018         	call	_StopADC	;wreg free
  3228                           
  3229                           ;TFG_PIC18_Auto.c: 476: SendStringUSART("Idle mode ON");
  3230  001240  0EDC               	movlw	low STR_13
  3231  001242  6E15               	movwf	SendStringUSART@text,c
  3232  001244  0EFF               	movlw	high STR_13
  3233  001246  6E16               	movwf	SendStringUSART@text+1,c
  3234  001248  EC19  F018         	call	_SendStringUSART	;wreg free
  3235                           
  3236                           ;TFG_PIC18_Auto.c: 478: break;
  3237  00124C  0012               	return	
  3238  00124E                     l6523:
  3239                           
  3240                           ;TFG_PIC18_Auto.c: 481: error = 1;
  3241  00124E  0E01               	movlw	1
  3242  001250  0101               	movlb	1	; () banked
  3243  001252  6F4A               	movwf	output_logic@error& (0+255),b
  3244                           
  3245                           ;TFG_PIC18_Auto.c: 482: }
  3246  001254  0012               	return	
  3247  001256                     l6525:
  3248                           
  3249                           ; BSR set to: 1
  3250  001256  504F               	movf	_present_state,w,c
  3251                           
  3252                           ; Switch size 1, requested type "space"
  3253                           ; Number of cases is 16, Range of values is 65 to 81
  3254                           ; switch strategies available:
  3255                           ; Name         Instructions Cycles
  3256                           ; simple_byte           49    25 (average)
  3257                           ;	Chosen strategy is simple_byte
  3258  001258  0A41               	xorlw	65	; case 65
  3259  00125A  B4D8               	btfsc	status,2,c
  3260  00125C  D46F               	goto	l6331
  3261  00125E  0A03               	xorlw	3	; case 66
  3262  001260  B4D8               	btfsc	status,2,c
  3263  001262  D47E               	goto	l6337
  3264  001264  0A01               	xorlw	1	; case 67
  3265  001266  B4D8               	btfsc	status,2,c
  3266  001268  D4A7               	goto	l6361
  3267  00126A  0A07               	xorlw	7	; case 68
  3268  00126C  B4D8               	btfsc	status,2,c
  3269  00126E  D52C               	goto	l6391
  3270  001270  0A01               	xorlw	1	; case 69
  3271  001272  B4D8               	btfsc	status,2,c
  3272  001274  D52F               	goto	l6393
  3273  001276  0A03               	xorlw	3	; case 70
  3274  001278  B4D8               	btfsc	status,2,c
  3275  00127A  D549               	goto	l6403
  3276  00127C  0A01               	xorlw	1	; case 71
  3277  00127E  B4D8               	btfsc	status,2,c
  3278  001280  D6B5               	goto	l6449
  3279  001282  0A0F               	xorlw	15	; case 72
  3280  001284  B4D8               	btfsc	status,2,c
  3281  001286  D6B8               	goto	l6451
  3282  001288  0A01               	xorlw	1	; case 73
  3283  00128A  B4D8               	btfsc	status,2,c
  3284  00128C  D6C4               	goto	l6461
  3285  00128E  0A03               	xorlw	3	; case 74
  3286  001290  B4D8               	btfsc	status,2,c
  3287  001292  0012               	return	
  3288  001294  0A06               	xorlw	6	; case 76
  3289  001296  B4D8               	btfsc	status,2,c
  3290  001298  D74D               	goto	l6481
  3291  00129A  0A01               	xorlw	1	; case 77
  3292  00129C  B4D8               	btfsc	status,2,c
  3293  00129E  D74D               	goto	l6483
  3294  0012A0  0A03               	xorlw	3	; case 78
  3295  0012A2  B4D8               	btfsc	status,2,c
  3296  0012A4  D780               	goto	l6495
  3297  0012A6  0A01               	xorlw	1	; case 79
  3298  0012A8  B4D8               	btfsc	status,2,c
  3299  0012AA  D7BE               	goto	l6513
  3300  0012AC  0A1F               	xorlw	31	; case 80
  3301  0012AE  B4D8               	btfsc	status,2,c
  3302  0012B0  D781               	goto	l6497
  3303  0012B2  0A01               	xorlw	1	; case 81
  3304  0012B4  B4D8               	btfsc	status,2,c
  3305  0012B6  D785               	goto	l6499
  3306  0012B8  D7CA               	goto	l6523
  3307  0012BA                     __end_of_output_logic:
  3308                           	opt stack 0
  3309                           tblptru	equ	0xFF8
  3310                           tblptrh	equ	0xFF7
  3311                           tblptrl	equ	0xFF6
  3312                           tablat	equ	0xFF5
  3313                           postinc0	equ	0xFEE
  3314                           wreg	equ	0xFE8
  3315                           postdec1	equ	0xFE5
  3316                           fsr1l	equ	0xFE1
  3317                           postinc2	equ	0xFDE
  3318                           postdec2	equ	0xFDD
  3319                           fsr2h	equ	0xFDA
  3320                           fsr2l	equ	0xFD9
  3321                           status	equ	0xFD8
  3322                           
  3323 ;; *************** function _sprintf *****************
  3324 ;; Defined at:
  3325 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  sp              2   28[BANK0 ] PTR unsigned char 
  3328 ;;		 -> CharTX2(12), CharTX(12), 
  3329 ;;  f               2   30[BANK0 ] PTR const unsigned char 
  3330 ;;		 -> STR_11(28), STR_9(31), STR_7(31), STR_6(33), 
  3331 ;;		 -> STR_5(34), STR_4(34), STR_2(33), 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;  val             4   58[BANK0 ] unsigned long 
  3334 ;;  tmpval          4   54[BANK0 ] struct .
  3335 ;;  fval            3   62[BANK0 ] struct .
  3336 ;;  prec            2   65[BANK0 ] int 
  3337 ;;  exp             2   52[BANK0 ] int 
  3338 ;;  flag            2   50[BANK0 ] unsigned short 
  3339 ;;  ap              2   48[BANK0 ] PTR void [1]
  3340 ;;		 -> ?_sprintf(2), 
  3341 ;;  len             2   46[BANK0 ] unsigned int 
  3342 ;;  cp              2   44[BANK0 ] PTR const unsigned char 
  3343 ;;		 -> sprintf@c(1), 
  3344 ;;  width           2    0        int 
  3345 ;;  c               1   67[BANK0 ] char 
  3346 ;;  d               1    0        unsigned char 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  2   28[BANK0 ] int 
  3349 ;; Registers used:
  3350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3356 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3360 ;;Total ram usage:       40 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    5
  3363 ;; This function calls:
  3364 ;;		___awdiv
  3365 ;;		___ftadd
  3366 ;;		___ftge
  3367 ;;		___ftmul
  3368 ;;		___ftneg
  3369 ;;		___ftsub
  3370 ;;		___fttol
  3371 ;;		___lldiv
  3372 ;;		___llmod
  3373 ;;		___lltoft
  3374 ;;		___wmul
  3375 ;;		__div_to_l_
  3376 ;;		__tdiv_to_l_
  3377 ;;		_fround
  3378 ;;		_isdigit
  3379 ;;		_scale
  3380 ;; This function is called by:
  3381 ;;		_output_logic
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text3
  3386  000172                     __ptext3:
  3387                           	opt stack 0
  3388  000172                     _sprintf:
  3389                           	opt stack 24
  3390                           
  3391                           ;doprnt.c: 494: va_list ap;
  3392                           ;doprnt.c: 499: signed char c;
  3393                           ;doprnt.c: 501: int width;
  3394                           ;doprnt.c: 504: int prec;
  3395                           ;doprnt.c: 508: unsigned short flag;
  3396                           ;doprnt.c: 515: char d;
  3397                           ;doprnt.c: 516: double fval;
  3398                           ;doprnt.c: 517: int exp;
  3399                           ;doprnt.c: 523: union {
  3400                           ;doprnt.c: 524: unsigned long vd;
  3401                           ;doprnt.c: 525: double integ;
  3402                           ;doprnt.c: 526: } tmpval;
  3403                           ;doprnt.c: 528: unsigned long val;
  3404                           ;doprnt.c: 529: unsigned len;
  3405                           ;doprnt.c: 530: const char * cp;
  3406                           ;doprnt.c: 533: *ap = __va_start();
  3407                           
  3408                           ;incstack = 0
  3409  000172  0ECD               	movlw	low (?_sprintf+4)
  3410  000174  0100               	movlb	0	; () banked
  3411  000176  6FDD               	movwf	sprintf@ap& (0+255),b
  3412  000178  0E00               	movlw	high (?_sprintf+4)
  3413  00017A  0100               	movlb	0	; () banked
  3414  00017C  6FDE               	movwf	(sprintf@ap+1)& (0+255),b
  3415                           
  3416                           ;doprnt.c: 536: while(c = *f++) {
  3417  00017E  EF84  F005         	goto	l6241
  3418  000182                     l5993:
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;doprnt.c: 538: if(c != '%')
  3422  000182  0E25               	movlw	37
  3423  000184  0100               	movlb	0	; () banked
  3424  000186  19F0               	xorwf	sprintf@c& (0+255),w,b
  3425  000188  B4D8               	btfsc	status,2,c
  3426  00018A  D00B               	goto	l5999
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;doprnt.c: 540: {
  3430                           ;doprnt.c: 541: ((*sp++ = (c)));
  3431  00018C  C0C9  FFD9         	movff	sprintf@sp,fsr2l
  3432  000190  C0CA  FFDA         	movff	sprintf@sp+1,fsr2h
  3433  000194  C0F0  FFDF         	movff	sprintf@c,indf2
  3434                           
  3435                           ; BSR set to: 0
  3436  000198  0100               	movlb	0	; () banked
  3437  00019A  4BC9               	infsnz	sprintf@sp& (0+255),f,b
  3438  00019C  2BCA               	incf	(sprintf@sp+1)& (0+255),f,b
  3439                           
  3440                           ;doprnt.c: 542: continue;
  3441  00019E  EF84  F005         	goto	l6241
  3442  0001A2                     l5999:
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;doprnt.c: 543: }
  3446                           ;doprnt.c: 548: flag = 0;
  3447  0001A2  0E00               	movlw	0
  3448  0001A4  0100               	movlb	0	; () banked
  3449  0001A6  6FE0               	movwf	(sprintf@flag+1)& (0+255),b
  3450  0001A8  0E00               	movlw	0
  3451  0001AA  6FDF               	movwf	sprintf@flag& (0+255),b
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;doprnt.c: 611: if(*f == '.') {
  3455  0001AC  C0CB  FFF6         	movff	sprintf@f,tblptrl
  3456  0001B0  C0CC  FFF7         	movff	sprintf@f+1,tblptrh
  3457  0001B4                     	if	0	;tblptru may be non-zero
  3458  0001B4                     	endif
  3459  0001B4                     	if	0	;tblptru may be non-zero
  3460  0001B4                     	endif
  3461  0001B4  0008               	tblrd		*
  3462  0001B6  50F5               	movf	tablat,w,c
  3463  0001B8  0A2E               	xorlw	46
  3464  0001BA  A4D8               	btfss	status,2,c
  3465  0001BC  D034               	goto	l6013
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;doprnt.c: 612: flag |= 0x4000;
  3469  0001BE  0100               	movlb	0	; () banked
  3470  0001C0  8DE0               	bsf	(sprintf@flag+1)& (0+255),6,b
  3471                           
  3472                           ;doprnt.c: 613: f++;
  3473  0001C2  0100               	movlb	0	; () banked
  3474  0001C4  4BCB               	infsnz	sprintf@f& (0+255),f,b
  3475  0001C6  2BCC               	incf	(sprintf@f+1)& (0+255),f,b
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;doprnt.c: 620: {
  3479                           ;doprnt.c: 621: prec = 0;
  3480  0001C8  0E00               	movlw	0
  3481  0001CA  0100               	movlb	0	; () banked
  3482  0001CC  6FEF               	movwf	(sprintf@prec+1)& (0+255),b
  3483  0001CE  0E00               	movlw	0
  3484  0001D0  6FEE               	movwf	sprintf@prec& (0+255),b
  3485                           
  3486                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3487  0001D2  D01E               	goto	l6011
  3488  0001D4                     l6007:
  3489                           
  3490                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3491  0001D4  C0EE  F01E         	movff	sprintf@prec,___wmul@multiplier
  3492  0001D8  C0EF  F01F         	movff	sprintf@prec+1,___wmul@multiplier+1
  3493  0001DC  0E00               	movlw	0
  3494  0001DE  6E21               	movwf	___wmul@multiplicand+1,c
  3495  0001E0  0E0A               	movlw	10
  3496  0001E2  6E20               	movwf	___wmul@multiplicand,c
  3497  0001E4  EC6C  F017         	call	___wmul	;wreg free
  3498  0001E8  C0CB  FFF6         	movff	sprintf@f,tblptrl
  3499  0001EC  C0CC  FFF7         	movff	sprintf@f+1,tblptrh
  3500  0001F0                     	if	0	;tblptru may be non-zero
  3501  0001F0                     	endif
  3502  0001F0                     	if	0	;tblptru may be non-zero
  3503  0001F0                     	endif
  3504  0001F0  0008               	tblrd		*
  3505  0001F2  50F5               	movf	tablat,w,c
  3506  0001F4  261E               	addwf	?___wmul,f,c
  3507  0001F6  0E00               	movlw	0
  3508  0001F8  221F               	addwfc	?___wmul+1,f,c
  3509  0001FA  0ED0               	movlw	208
  3510  0001FC  241E               	addwf	?___wmul,w,c
  3511  0001FE  0100               	movlb	0	; () banked
  3512  000200  6FEE               	movwf	sprintf@prec& (0+255),b
  3513  000202  0EFF               	movlw	255
  3514  000204  201F               	addwfc	?___wmul+1,w,c
  3515  000206  0100               	movlb	0	; () banked
  3516  000208  6FEF               	movwf	(sprintf@prec+1)& (0+255),b
  3517                           
  3518                           ; BSR set to: 0
  3519  00020A  0100               	movlb	0	; () banked
  3520  00020C  4BCB               	infsnz	sprintf@f& (0+255),f,b
  3521  00020E  2BCC               	incf	(sprintf@f+1)& (0+255),f,b
  3522  000210                     l6011:
  3523                           
  3524                           ; BSR set to: 0
  3525  000210  C0CB  FFF6         	movff	sprintf@f,tblptrl
  3526  000214  C0CC  FFF7         	movff	sprintf@f+1,tblptrh
  3527  000218                     	if	0	;tblptru may be non-zero
  3528  000218                     	endif
  3529  000218                     	if	0	;tblptru may be non-zero
  3530  000218                     	endif
  3531  000218  0008               	tblrd		*
  3532  00021A  50F5               	movf	tablat,w,c
  3533  00021C  ECC4  F017         	call	_isdigit
  3534  000220  A0D8               	btfss	status,0,c
  3535  000222  D04A               	goto	l6039
  3536  000224  D7D7               	goto	l6007
  3537  000226                     l6013:
  3538                           
  3539                           ;doprnt.c: 626: prec = 0;
  3540  000226  0E00               	movlw	0
  3541  000228  0100               	movlb	0	; () banked
  3542  00022A  6FEF               	movwf	(sprintf@prec+1)& (0+255),b
  3543  00022C  0E00               	movlw	0
  3544  00022E  6FEE               	movwf	sprintf@prec& (0+255),b
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;doprnt.c: 628: flag |= 0x1000;
  3548  000230  0100               	movlb	0	; () banked
  3549  000232  89E0               	bsf	(sprintf@flag+1)& (0+255),4,b
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;doprnt.c: 630: }
  3553                           ;doprnt.c: 635: switch(c = *f++) {
  3554  000234  D041               	goto	l6039
  3555  000236                     l6017:
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;doprnt.c: 663: flag |= 0x400;
  3559  000236  0100               	movlb	0	; () banked
  3560  000238  85E0               	bsf	(sprintf@flag+1)& (0+255),2,b
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;doprnt.c: 698: case 'i':
  3564                           ;doprnt.c: 699: break;
  3565                           
  3566                           ; BSR set to: 0
  3567                           
  3568                           ;doprnt.c: 697: case 'd':
  3569                           
  3570                           ;doprnt.c: 664: break;
  3571  00023A  D057               	goto	l6041
  3572  00023C                     l6019:
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;doprnt.c: 753: if(prec && prec < len)
  3576  00023C  0100               	movlb	0	; () banked
  3577  00023E  51EE               	movf	sprintf@prec& (0+255),w,b
  3578  000240  0100               	movlb	0	; () banked
  3579  000242  11EF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3580  000244  B4D8               	btfsc	status,2,c
  3581  000246  D01F               	goto	l6031
  3582                           
  3583                           ; BSR set to: 0
  3584  000248  0100               	movlb	0	; () banked
  3585  00024A  51DB               	movf	sprintf@len& (0+255),w,b
  3586  00024C  0100               	movlb	0	; () banked
  3587  00024E  5DEE               	subwf	sprintf@prec& (0+255),w,b
  3588  000250  0100               	movlb	0	; () banked
  3589  000252  51DC               	movf	(sprintf@len+1)& (0+255),w,b
  3590  000254  0100               	movlb	0	; () banked
  3591  000256  59EF               	subwfb	(sprintf@prec+1)& (0+255),w,b
  3592  000258  B0D8               	btfsc	status,0,c
  3593  00025A  D015               	goto	l6031
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;doprnt.c: 754: len = prec;
  3597  00025C  C0EE  F0DB         	movff	sprintf@prec,sprintf@len
  3598  000260  C0EF  F0DC         	movff	sprintf@prec+1,sprintf@len+1
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;doprnt.c: 767: while(len--)
  3602  000264  D010               	goto	l6031
  3603  000266                     l6025:
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  3607  000266  C0D9  FFD9         	movff	sprintf@cp,fsr2l
  3608  00026A  C0DA  FFDA         	movff	sprintf@cp+1,fsr2h
  3609  00026E  C0C9  FFE1         	movff	sprintf@sp,fsr1l
  3610  000272  C0CA  FFE2         	movff	sprintf@sp+1,fsr1h
  3611  000276  CFDF FFE7          	movff	indf2,indf1
  3612                           
  3613                           ; BSR set to: 0
  3614  00027A  0100               	movlb	0	; () banked
  3615  00027C  4BD9               	infsnz	sprintf@cp& (0+255),f,b
  3616  00027E  2BDA               	incf	(sprintf@cp+1)& (0+255),f,b
  3617                           
  3618                           ; BSR set to: 0
  3619  000280  0100               	movlb	0	; () banked
  3620  000282  4BC9               	infsnz	sprintf@sp& (0+255),f,b
  3621  000284  2BCA               	incf	(sprintf@sp+1)& (0+255),f,b
  3622  000286                     l6031:
  3623                           
  3624                           ; BSR set to: 0
  3625  000286  0100               	movlb	0	; () banked
  3626  000288  07DB               	decf	sprintf@len& (0+255),f,b
  3627  00028A  A0D8               	btfss	status,0,c
  3628  00028C  07DC               	decf	(sprintf@len+1)& (0+255),f,b
  3629  00028E  0100               	movlb	0	; () banked
  3630  000290  29DB               	incf	sprintf@len& (0+255),w,b
  3631  000292  E1E9               	bnz	l6025
  3632  000294  0100               	movlb	0	; () banked
  3633  000296  29DC               	incf	(sprintf@len+1)& (0+255),w,b
  3634  000298  B4D8               	btfsc	status,2,c
  3635  00029A  EF84  F005         	goto	l6241
  3636  00029E  D7E3               	goto	l6025
  3637  0002A0                     l6033:
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;doprnt.c: 805: cp = (char *)&c;
  3641  0002A0  0EF0               	movlw	low sprintf@c
  3642  0002A2  0100               	movlb	0	; () banked
  3643  0002A4  6FD9               	movwf	sprintf@cp& (0+255),b
  3644  0002A6  0E00               	movlw	high sprintf@c
  3645  0002A8  0100               	movlb	0	; () banked
  3646  0002AA  6FDA               	movwf	(sprintf@cp+1)& (0+255),b
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;doprnt.c: 806: len = 1;
  3650  0002AC  0E00               	movlw	0
  3651  0002AE  0100               	movlb	0	; () banked
  3652  0002B0  6FDC               	movwf	(sprintf@len+1)& (0+255),b
  3653  0002B2  0E01               	movlw	1
  3654  0002B4  6FDB               	movwf	sprintf@len& (0+255),b
  3655                           
  3656                           ;doprnt.c: 807: goto dostring;
  3657  0002B6  D7C2               	goto	l6019
  3658  0002B8                     l6039:
  3659  0002B8  C0CB  FFF6         	movff	sprintf@f,tblptrl
  3660  0002BC  C0CC  FFF7         	movff	sprintf@f+1,tblptrh
  3661  0002C0  0100               	movlb	0	; () banked
  3662  0002C2  4BCB               	infsnz	sprintf@f& (0+255),f,b
  3663  0002C4  2BCC               	incf	(sprintf@f+1)& (0+255),f,b
  3664  0002C6                     	if	0	;tblptru may be non-zero
  3665  0002C6                     	endif
  3666  0002C6                     	if	0	;tblptru may be non-zero
  3667  0002C6                     	endif
  3668  0002C6  0008               	tblrd		*
  3669  0002C8  CFF5 F0F0          	movff	tablat,sprintf@c
  3670  0002CC  0100               	movlb	0	; () banked
  3671  0002CE  51F0               	movf	sprintf@c& (0+255),w,b
  3672                           
  3673                           ; Switch size 1, requested type "space"
  3674                           ; Number of cases is 4, Range of values is 0 to 105
  3675                           ; switch strategies available:
  3676                           ; Name         Instructions Cycles
  3677                           ; simple_byte           13     7 (average)
  3678                           ;	Chosen strategy is simple_byte
  3679  0002D0  0A00               	xorlw	0	; case 0
  3680  0002D2  B4D8               	btfsc	status,2,c
  3681  0002D4  EF93  F005         	goto	l6243
  3682  0002D8  0A64               	xorlw	100	; case 100
  3683  0002DA  B4D8               	btfsc	status,2,c
  3684  0002DC  D006               	goto	l6041
  3685  0002DE  0A02               	xorlw	2	; case 102
  3686  0002E0  B4D8               	btfsc	status,2,c
  3687  0002E2  D7A9               	goto	l6017
  3688  0002E4  0A0F               	xorlw	15	; case 105
  3689  0002E6  A4D8               	btfss	status,2,c
  3690  0002E8  D7DB               	goto	l6033
  3691  0002EA                     l6041:
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;doprnt.c: 825: if(flag & (0x700)) {
  3695  0002EA  0E07               	movlw	7
  3696  0002EC  0100               	movlb	0	; () banked
  3697  0002EE  15E0               	andwf	(sprintf@flag+1)& (0+255),w,b
  3698  0002F0  B4D8               	btfsc	status,2,c
  3699  0002F2  D319               	goto	l6189
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;doprnt.c: 827: if(flag & 0x1000)
  3703  0002F4  0100               	movlb	0	; () banked
  3704  0002F6  A9E0               	btfss	(sprintf@flag+1)& (0+255),4,b
  3705  0002F8  D005               	goto	l6047
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;doprnt.c: 829: prec = 6;
  3709  0002FA  0E00               	movlw	0
  3710  0002FC  0100               	movlb	0	; () banked
  3711  0002FE  6FEF               	movwf	(sprintf@prec+1)& (0+255),b
  3712  000300  0E06               	movlw	6
  3713  000302  6FEE               	movwf	sprintf@prec& (0+255),b
  3714  000304                     l6047:
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3718  000304  C0DD  FFD9         	movff	sprintf@ap,fsr2l
  3719  000308  C0DE  FFDA         	movff	sprintf@ap+1,fsr2h
  3720  00030C  CFDE F0EB          	movff	postinc2,sprintf@fval
  3721  000310  CFDE F0EC          	movff	postinc2,sprintf@fval+1
  3722  000314  CFDD F0ED          	movff	postdec2,sprintf@fval+2
  3723                           
  3724                           ; BSR set to: 0
  3725  000318  0E03               	movlw	3
  3726  00031A  0100               	movlb	0	; () banked
  3727  00031C  27DD               	addwf	sprintf@ap& (0+255),f,b
  3728  00031E  0E00               	movlw	0
  3729  000320  23DE               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;doprnt.c: 831: if(fval < 0.0) {
  3733  000322  0100               	movlb	0	; () banked
  3734  000324  AFED               	btfss	(sprintf@fval+2)& (0+255),7,b
  3735  000326  D011               	goto	l6057
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;doprnt.c: 832: fval = -fval;
  3739  000328  C0EB  F0B3         	movff	sprintf@fval,___ftneg@f1
  3740  00032C  C0EC  F0B4         	movff	sprintf@fval+1,___ftneg@f1+1
  3741  000330  C0ED  F0B5         	movff	sprintf@fval+2,___ftneg@f1+2
  3742  000334  EC40  F017         	call	___ftneg	;wreg free
  3743  000338  C0B3  F0EB         	movff	?___ftneg,sprintf@fval
  3744  00033C  C0B4  F0EC         	movff	?___ftneg+1,sprintf@fval+1
  3745  000340  C0B5  F0ED         	movff	?___ftneg+2,sprintf@fval+2
  3746                           
  3747                           ;doprnt.c: 833: flag |= 0x03;
  3748  000344  0E03               	movlw	3
  3749  000346  0100               	movlb	0	; () banked
  3750  000348  13DF               	iorwf	sprintf@flag& (0+255),f,b
  3751  00034A                     l6057:
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;doprnt.c: 834: }
  3755                           ;doprnt.c: 835: exp = 0;
  3756  00034A  0E00               	movlw	0
  3757  00034C  0100               	movlb	0	; () banked
  3758  00034E  6FE2               	movwf	(sprintf@exp+1)& (0+255),b
  3759  000350  0E00               	movlw	0
  3760  000352  6FE1               	movwf	sprintf@exp& (0+255),b
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;doprnt.c: 836: if( fval!=0) {
  3764  000354  0100               	movlb	0	; () banked
  3765  000356  51EB               	movf	sprintf@fval& (0+255),w,b
  3766  000358  0100               	movlb	0	; () banked
  3767  00035A  11EC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3768  00035C  0100               	movlb	0	; () banked
  3769  00035E  11ED               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3770  000360  B4D8               	btfsc	status,2,c
  3771  000362  D091               	goto	l6085
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3775  000364  0E82               	movlw	130
  3776  000366  0100               	movlb	0	; () banked
  3777  000368  6FD0               	movwf	??_sprintf& (0+255),b
  3778  00036A  0EFF               	movlw	255
  3779  00036C  0100               	movlb	0	; () banked
  3780  00036E  6FD1               	movwf	(??_sprintf+1)& (0+255),b
  3781  000370  C0EB  F0D2         	movff	sprintf@fval,??_sprintf+2
  3782  000374  C0EC  F0D3         	movff	sprintf@fval+1,??_sprintf+3
  3783  000378  C0ED  F0D4         	movff	sprintf@fval+2,??_sprintf+4
  3784  00037C  C0EE  F0D5         	movff	sprintf@fval+3,??_sprintf+5
  3785  000380  0E10               	movlw	16
  3786  000382  D006               	goto	u6470
  3787  000384                     u6475:
  3788  000384  0100               	movlb	0	; () banked
  3789  000386  90D8               	bcf	status,0,c
  3790  000388  33D5               	rrcf	(??_sprintf+5)& (0+255),f,b
  3791  00038A  33D4               	rrcf	(??_sprintf+4)& (0+255),f,b
  3792  00038C  33D3               	rrcf	(??_sprintf+3)& (0+255),f,b
  3793  00038E  33D2               	rrcf	(??_sprintf+2)& (0+255),f,b
  3794  000390                     u6470:
  3795  000390  2EE8               	decfsz	wreg,f,c
  3796  000392  D7F8               	goto	u6475
  3797  000394  0100               	movlb	0	; () banked
  3798  000396  51D2               	movf	(??_sprintf+2)& (0+255),w,b
  3799  000398  0100               	movlb	0	; () banked
  3800  00039A  25D0               	addwf	??_sprintf& (0+255),w,b
  3801  00039C  0100               	movlb	0	; () banked
  3802  00039E  6FE1               	movwf	sprintf@exp& (0+255),b
  3803  0003A0  0E00               	movlw	0
  3804  0003A2  0100               	movlb	0	; () banked
  3805  0003A4  21D1               	addwfc	(??_sprintf+1)& (0+255),w,b
  3806  0003A6  0100               	movlb	0	; () banked
  3807  0003A8  6FE2               	movwf	(sprintf@exp+1)& (0+255),b
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;doprnt.c: 838: exp--;
  3811  0003AA  0100               	movlb	0	; () banked
  3812  0003AC  07E1               	decf	sprintf@exp& (0+255),f,b
  3813  0003AE  A0D8               	btfss	status,0,c
  3814  0003B0  07E2               	decf	(sprintf@exp+1)& (0+255),f,b
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;doprnt.c: 839: exp *= 3;
  3818  0003B2  C0E1  F01E         	movff	sprintf@exp,___wmul@multiplier
  3819  0003B6  C0E2  F01F         	movff	sprintf@exp+1,___wmul@multiplier+1
  3820  0003BA  0E00               	movlw	0
  3821  0003BC  6E21               	movwf	___wmul@multiplicand+1,c
  3822  0003BE  0E03               	movlw	3
  3823  0003C0  6E20               	movwf	___wmul@multiplicand,c
  3824  0003C2  EC6C  F017         	call	___wmul	;wreg free
  3825  0003C6  C01E  F0E1         	movff	?___wmul,sprintf@exp
  3826  0003CA  C01F  F0E2         	movff	?___wmul+1,sprintf@exp+1
  3827                           
  3828                           ;doprnt.c: 840: exp /= 10;
  3829  0003CE  C0E1  F016         	movff	sprintf@exp,___awdiv@dividend
  3830  0003D2  C0E2  F017         	movff	sprintf@exp+1,___awdiv@dividend+1
  3831  0003D6  0E00               	movlw	0
  3832  0003D8  6E19               	movwf	___awdiv@divisor+1,c
  3833  0003DA  0E0A               	movlw	10
  3834  0003DC  6E18               	movwf	___awdiv@divisor,c
  3835  0003DE  ECBD  F014         	call	___awdiv	;wreg free
  3836  0003E2  C016  F0E1         	movff	?___awdiv,sprintf@exp
  3837  0003E6  C017  F0E2         	movff	?___awdiv+1,sprintf@exp+1
  3838                           
  3839                           ;doprnt.c: 841: if(exp < 0)
  3840  0003EA  0100               	movlb	0	; () banked
  3841  0003EC  AFE2               	btfss	(sprintf@exp+1)& (0+255),7,b
  3842  0003EE  D004               	goto	l6073
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;doprnt.c: 842: exp--;
  3846  0003F0  0100               	movlb	0	; () banked
  3847  0003F2  07E1               	decf	sprintf@exp& (0+255),f,b
  3848  0003F4  A0D8               	btfss	status,0,c
  3849  0003F6  07E2               	decf	(sprintf@exp+1)& (0+255),f,b
  3850  0003F8                     l6073:
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3854  0003F8  0100               	movlb	0	; () banked
  3855  0003FA  51E1               	movf	sprintf@exp& (0+255),w,b
  3856  0003FC  0800               	sublw	0
  3857  0003FE  EC5D  F009         	call	_scale
  3858  000402  C0B3  F0E3         	movff	?_scale,sprintf@tmpval
  3859  000406  C0B4  F0E4         	movff	?_scale+1,sprintf@tmpval+1
  3860  00040A  C0B5  F0E5         	movff	?_scale+2,sprintf@tmpval+2
  3861                           
  3862                           ;doprnt.c: 847: tmpval.integ *= fval;
  3863  00040E  C0E3  F037         	movff	sprintf@tmpval,___ftmul@f1
  3864  000412  C0E4  F038         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3865  000416  C0E5  F039         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3866  00041A  C0EB  F03A         	movff	sprintf@fval,___ftmul@f2
  3867  00041E  C0EC  F03B         	movff	sprintf@fval+1,___ftmul@f2+1
  3868  000422  C0ED  F03C         	movff	sprintf@fval+2,___ftmul@f2+2
  3869  000426  EC21  F012         	call	___ftmul	;wreg free
  3870  00042A  C037  F0E3         	movff	?___ftmul,sprintf@tmpval
  3871  00042E  C038  F0E4         	movff	?___ftmul+1,sprintf@tmpval+1
  3872  000432  C039  F0E5         	movff	?___ftmul+2,sprintf@tmpval+2
  3873                           
  3874                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3875  000436  C0E3  F010         	movff	sprintf@tmpval,___ftge@ff1
  3876  00043A  C0E4  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3877  00043E  C0E5  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3878  000442  0E00               	movlw	0
  3879  000444  6E13               	movwf	___ftge@ff2,c
  3880  000446  0E80               	movlw	128
  3881  000448  6E14               	movwf	___ftge@ff2+1,c
  3882  00044A  0E3F               	movlw	63
  3883  00044C  6E15               	movwf	___ftge@ff2+2,c
  3884  00044E  ECEB  F013         	call	___ftge	;wreg free
  3885  000452  B0D8               	btfsc	status,0,c
  3886  000454  D005               	goto	l6081
  3887                           
  3888                           ;doprnt.c: 849: exp--;
  3889  000456  0100               	movlb	0	; () banked
  3890  000458  07E1               	decf	sprintf@exp& (0+255),f,b
  3891  00045A  A0D8               	btfss	status,0,c
  3892  00045C  07E2               	decf	(sprintf@exp+1)& (0+255),f,b
  3893  00045E  D013               	goto	l6085
  3894  000460                     l6081:
  3895                           
  3896                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3897  000460  C0E3  F010         	movff	sprintf@tmpval,___ftge@ff1
  3898  000464  C0E4  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3899  000468  C0E5  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3900  00046C  0E00               	movlw	0
  3901  00046E  6E13               	movwf	___ftge@ff2,c
  3902  000470  0E20               	movlw	32
  3903  000472  6E14               	movwf	___ftge@ff2+1,c
  3904  000474  0E41               	movlw	65
  3905  000476  6E15               	movwf	___ftge@ff2+2,c
  3906  000478  ECEB  F013         	call	___ftge	;wreg free
  3907  00047C  A0D8               	btfss	status,0,c
  3908  00047E  D003               	goto	l6085
  3909                           
  3910                           ;doprnt.c: 851: exp++;
  3911  000480  0100               	movlb	0	; () banked
  3912  000482  4BE1               	infsnz	sprintf@exp& (0+255),f,b
  3913  000484  2BE2               	incf	(sprintf@exp+1)& (0+255),f,b
  3914  000486                     l6085:
  3915                           
  3916                           ;doprnt.c: 852: }
  3917                           ;doprnt.c: 1112: if(prec <= 12)
  3918  000486  0100               	movlb	0	; () banked
  3919  000488  BFEF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3920  00048A  D008               	goto	l6087
  3921  00048C  0100               	movlb	0	; () banked
  3922  00048E  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  3923  000490  E11D               	bnz	l6089
  3924  000492  0E0D               	movlw	13
  3925  000494  0100               	movlb	0	; () banked
  3926  000496  5DEE               	subwf	sprintf@prec& (0+255),w,b
  3927  000498  B0D8               	btfsc	status,0,c
  3928  00049A  D018               	goto	l6089
  3929  00049C                     l6087:
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;doprnt.c: 1113: fval += fround(prec);
  3933  00049C  C0EB  F02B         	movff	sprintf@fval,___ftadd@f1
  3934  0004A0  C0EC  F02C         	movff	sprintf@fval+1,___ftadd@f1+1
  3935  0004A4  C0ED  F02D         	movff	sprintf@fval+2,___ftadd@f1+2
  3936  0004A8  0100               	movlb	0	; () banked
  3937  0004AA  51EE               	movf	sprintf@prec& (0+255),w,b
  3938  0004AC  EC68  F00B         	call	_fround
  3939  0004B0  C0B3  F02E         	movff	?_fround,___ftadd@f2
  3940  0004B4  C0B4  F02F         	movff	?_fround+1,___ftadd@f2+1
  3941  0004B8  C0B5  F030         	movff	?_fround+2,___ftadd@f2+2
  3942  0004BC  EC9B  F00D         	call	___ftadd	;wreg free
  3943  0004C0  C02B  F0EB         	movff	?___ftadd,sprintf@fval
  3944  0004C4  C02C  F0EC         	movff	?___ftadd+1,sprintf@fval+1
  3945  0004C8  C02D  F0ED         	movff	?___ftadd+2,sprintf@fval+2
  3946  0004CC                     l6089:
  3947                           
  3948                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3949  0004CC  0100               	movlb	0	; () banked
  3950  0004CE  BFE2               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3951  0004D0  D008               	goto	l6091
  3952  0004D2  0100               	movlb	0	; () banked
  3953  0004D4  51E2               	movf	(sprintf@exp+1)& (0+255),w,b
  3954  0004D6  E12A               	bnz	l6097
  3955  0004D8  0E0A               	movlw	10
  3956  0004DA  0100               	movlb	0	; () banked
  3957  0004DC  5DE1               	subwf	sprintf@exp& (0+255),w,b
  3958  0004DE  B0D8               	btfsc	status,0,c
  3959  0004E0  D025               	goto	l6097
  3960  0004E2                     l6091:
  3961                           
  3962                           ; BSR set to: 0
  3963  0004E2  0100               	movlb	0	; () banked
  3964  0004E4  51EB               	movf	sprintf@fval& (0+255),w,b
  3965  0004E6  0100               	movlb	0	; () banked
  3966  0004E8  11EC               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3967  0004EA  0100               	movlb	0	; () banked
  3968  0004EC  11ED               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3969  0004EE  B4D8               	btfsc	status,2,c
  3970  0004F0  D05F               	goto	l6111
  3971                           
  3972                           ; BSR set to: 0
  3973  0004F2  C0EB  F0BA         	movff	sprintf@fval,___fttol@f1
  3974  0004F6  C0EC  F0BB         	movff	sprintf@fval+1,___fttol@f1+1
  3975  0004FA  C0ED  F0BC         	movff	sprintf@fval+2,___fttol@f1+2
  3976  0004FE  EC1B  F00F         	call	___fttol	;wreg free
  3977  000502  0100               	movlb	0	; () banked
  3978  000504  51BA               	movf	?___fttol& (0+255),w,b
  3979  000506  0100               	movlb	0	; () banked
  3980  000508  11BB               	iorwf	(?___fttol+1)& (0+255),w,b
  3981  00050A  0100               	movlb	0	; () banked
  3982  00050C  11BC               	iorwf	(?___fttol+2)& (0+255),w,b
  3983  00050E  0100               	movlb	0	; () banked
  3984  000510  11BD               	iorwf	(?___fttol+3)& (0+255),w,b
  3985  000512  A4D8               	btfss	status,2,c
  3986  000514  D04D               	goto	l6111
  3987                           
  3988                           ; BSR set to: 0
  3989  000516  0100               	movlb	0	; () banked
  3990  000518  BFE2               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3991  00051A  D04A               	goto	l6111
  3992  00051C  0100               	movlb	0	; () banked
  3993  00051E  51E2               	movf	(sprintf@exp+1)& (0+255),w,b
  3994  000520  E105               	bnz	l6097
  3995  000522  0E02               	movlw	2
  3996  000524  0100               	movlb	0	; () banked
  3997  000526  5DE1               	subwf	sprintf@exp& (0+255),w,b
  3998  000528  A0D8               	btfss	status,0,c
  3999  00052A  D042               	goto	l6111
  4000  00052C                     l6097:
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4004  00052C  C0E3  F010         	movff	sprintf@tmpval,___ftge@ff1
  4005  000530  C0E4  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4006  000534  C0E5  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4007  000538  0E70               	movlw	112
  4008  00053A  6E13               	movwf	___ftge@ff2,c
  4009  00053C  0E89               	movlw	137
  4010  00053E  6E14               	movwf	___ftge@ff2+1,c
  4011  000540  0E40               	movlw	64
  4012  000542  6E15               	movwf	___ftge@ff2+2,c
  4013  000544  ECEB  F013         	call	___ftge	;wreg free
  4014  000548  B0D8               	btfsc	status,0,c
  4015  00054A  D003               	goto	l6101
  4016                           
  4017                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4018  00054C  0100               	movlb	0	; () banked
  4019  00054E  0EF7               	movlw	247
  4020  000550  D002               	goto	L1
  4021  000552                     l6101:
  4022                           
  4023                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4024  000552  0100               	movlb	0	; () banked
  4025  000554  0EF8               	movlw	248
  4026  000556                     L1:
  4027  000556  27E1               	addwf	sprintf@exp& (0+255),f,b
  4028  000558  0EFF               	movlw	255
  4029  00055A  23E2               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;doprnt.c: 1124: }
  4033                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4034                           
  4035                           ; BSR set to: 0
  4036  00055C  0100               	movlb	0	; () banked
  4037  00055E  51E1               	movf	sprintf@exp& (0+255),w,b
  4038  000560  EC5D  F009         	call	_scale
  4039  000564  C0B3  F0E3         	movff	?_scale,sprintf@tmpval
  4040  000568  C0B4  F0E4         	movff	?_scale+1,sprintf@tmpval+1
  4041  00056C  C0B5  F0E5         	movff	?_scale+2,sprintf@tmpval+2
  4042                           
  4043                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4044  000570  C0EB  F010         	movff	sprintf@fval,__tdiv_to_l_@f1
  4045  000574  C0EC  F011         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4046  000578  C0ED  F012         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4047  00057C  C0E3  F013         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  4048  000580  C0E4  F014         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  4049  000584  C0E5  F015         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  4050  000588  ECF4  F010         	call	__tdiv_to_l_	;wreg free
  4051  00058C  C010  F0E7         	movff	?__tdiv_to_l_,sprintf@val
  4052  000590  C011  F0E8         	movff	?__tdiv_to_l_+1,sprintf@val+1
  4053  000594  C012  F0E9         	movff	?__tdiv_to_l_+2,sprintf@val+2
  4054  000598  C013  F0EA         	movff	?__tdiv_to_l_+3,sprintf@val+3
  4055                           
  4056                           ;doprnt.c: 1129: fval = 0.0;
  4057  00059C  0E00               	movlw	0
  4058  00059E  0100               	movlb	0	; () banked
  4059  0005A0  6FEB               	movwf	sprintf@fval& (0+255),b
  4060  0005A2  0E00               	movlw	0
  4061  0005A4  0100               	movlb	0	; () banked
  4062  0005A6  6FEC               	movwf	(sprintf@fval+1)& (0+255),b
  4063  0005A8  0E00               	movlw	0
  4064  0005AA  0100               	movlb	0	; () banked
  4065  0005AC  6FED               	movwf	(sprintf@fval+2)& (0+255),b
  4066                           
  4067                           ;doprnt.c: 1130: } else {
  4068  0005AE  D033               	goto	l6115
  4069  0005B0                     l6111:
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4073  0005B0  C0EB  F0BA         	movff	sprintf@fval,___fttol@f1
  4074  0005B4  C0EC  F0BB         	movff	sprintf@fval+1,___fttol@f1+1
  4075  0005B8  C0ED  F0BC         	movff	sprintf@fval+2,___fttol@f1+2
  4076  0005BC  EC1B  F00F         	call	___fttol	;wreg free
  4077  0005C0  C0BA  F0E7         	movff	?___fttol,sprintf@val
  4078  0005C4  C0BB  F0E8         	movff	?___fttol+1,sprintf@val+1
  4079  0005C8  C0BC  F0E9         	movff	?___fttol+2,sprintf@val+2
  4080  0005CC  C0BD  F0EA         	movff	?___fttol+3,sprintf@val+3
  4081                           
  4082                           ;doprnt.c: 1132: fval -= (double)val;
  4083  0005D0  C0EB  F037         	movff	sprintf@fval,___ftsub@f1
  4084  0005D4  C0EC  F038         	movff	sprintf@fval+1,___ftsub@f1+1
  4085  0005D8  C0ED  F039         	movff	sprintf@fval+2,___ftsub@f1+2
  4086  0005DC  C0E7  F018         	movff	sprintf@val,___lltoft@c
  4087  0005E0  C0E8  F019         	movff	sprintf@val+1,___lltoft@c+1
  4088  0005E4  C0E9  F01A         	movff	sprintf@val+2,___lltoft@c+2
  4089  0005E8  C0EA  F01B         	movff	sprintf@val+3,___lltoft@c+3
  4090  0005EC  EC4B  F016         	call	___lltoft	;wreg free
  4091  0005F0  C018  F03A         	movff	?___lltoft,___ftsub@f2
  4092  0005F4  C019  F03B         	movff	?___lltoft+1,___ftsub@f2+1
  4093  0005F8  C01A  F03C         	movff	?___lltoft+2,___ftsub@f2+2
  4094  0005FC  ECCC  F016         	call	___ftsub	;wreg free
  4095  000600  C037  F0EB         	movff	?___ftsub,sprintf@fval
  4096  000604  C038  F0EC         	movff	?___ftsub+1,sprintf@fval+1
  4097  000608  C039  F0ED         	movff	?___ftsub+2,sprintf@fval+2
  4098                           
  4099                           ;doprnt.c: 1133: exp = 0;
  4100  00060C  0E00               	movlw	0
  4101  00060E  0100               	movlb	0	; () banked
  4102  000610  6FE2               	movwf	(sprintf@exp+1)& (0+255),b
  4103  000612  0E00               	movlw	0
  4104  000614  6FE1               	movwf	sprintf@exp& (0+255),b
  4105  000616                     l6115:
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;doprnt.c: 1134: }
  4109                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4110  000616  0E01               	movlw	1
  4111  000618  0100               	movlb	0	; () banked
  4112  00061A  6FF0               	movwf	sprintf@c& (0+255),b
  4113  00061C                     l6117:
  4114                           
  4115                           ; BSR set to: 0
  4116  00061C  0E0A               	movlw	10
  4117  00061E  0100               	movlb	0	; () banked
  4118  000620  19F0               	xorwf	sprintf@c& (0+255),w,b
  4119  000622  B4D8               	btfsc	status,2,c
  4120  000624  D01E               	goto	l6129
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;doprnt.c: 1137: if(val < dpowers[c])
  4124                           
  4125                           ; BSR set to: 0
  4126                           
  4127                           ; BSR set to: 0
  4128  000626  0100               	movlb	0	; () banked
  4129  000628  51F0               	movf	sprintf@c& (0+255),w,b
  4130  00062A  0D04               	mullw	4
  4131  00062C  0EFB               	movlw	low _dpowers
  4132  00062E  24F3               	addwf	prodl,w,c
  4133  000630  6EF6               	movwf	tblptrl,c
  4134  000632  0EFD               	movlw	high _dpowers
  4135  000634  20F4               	addwfc	prodh,w,c
  4136  000636  6EF7               	movwf	tblptrh,c
  4137  000638                     	if	0	;There are less than 3 active tblptr bytes
  4138  000638                     	endif
  4139  000638  0009               	tblrd		*+
  4140  00063A  50F5               	movf	tablat,w,c
  4141  00063C  0100               	movlb	0	; () banked
  4142  00063E  5DE7               	subwf	sprintf@val& (0+255),w,b
  4143  000640  0009               	tblrd		*+
  4144  000642  50F5               	movf	tablat,w,c
  4145  000644  0100               	movlb	0	; () banked
  4146  000646  59E8               	subwfb	(sprintf@val+1)& (0+255),w,b
  4147  000648  0009               	tblrd		*+
  4148  00064A  50F5               	movf	tablat,w,c
  4149  00064C  0100               	movlb	0	; () banked
  4150  00064E  59E9               	subwfb	(sprintf@val+2)& (0+255),w,b
  4151  000650  0009               	tblrd		*+
  4152  000652  50F5               	movf	tablat,w,c
  4153  000654  0100               	movlb	0	; () banked
  4154  000656  59EA               	subwfb	(sprintf@val+3)& (0+255),w,b
  4155  000658  A0D8               	btfss	status,0,c
  4156  00065A  D003               	goto	l6129
  4157                           
  4158                           ; BSR set to: 0
  4159                           
  4160                           ; BSR set to: 0
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;doprnt.c: 1138: break;
  4164  00065C  0100               	movlb	0	; () banked
  4165  00065E  2BF0               	incf	sprintf@c& (0+255),f,b
  4166  000660  D7DD               	goto	l6117
  4167  000662                     l6129:
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;doprnt.c: 1175: {
  4171                           ;doprnt.c: 1188: if(flag & 0x03)
  4172  000662  0E03               	movlw	3
  4173  000664  0100               	movlb	0	; () banked
  4174  000666  15DF               	andwf	sprintf@flag& (0+255),w,b
  4175  000668  0100               	movlb	0	; () banked
  4176  00066A  6FD0               	movwf	??_sprintf& (0+255),b
  4177  00066C  0E00               	movlw	0
  4178  00066E  0100               	movlb	0	; () banked
  4179  000670  15E0               	andwf	(sprintf@flag+1)& (0+255),w,b
  4180  000672  0100               	movlb	0	; () banked
  4181  000674  6FD1               	movwf	(??_sprintf+1)& (0+255),b
  4182  000676  0100               	movlb	0	; () banked
  4183  000678  51D0               	movf	??_sprintf& (0+255),w,b
  4184  00067A  0100               	movlb	0	; () banked
  4185  00067C  11D1               	iorwf	(??_sprintf+1)& (0+255),w,b
  4186  00067E  B4D8               	btfsc	status,2,c
  4187  000680  D054               	goto	l6143
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4191  000682  C0C9  FFD9         	movff	sprintf@sp,fsr2l
  4192  000686  C0CA  FFDA         	movff	sprintf@sp+1,fsr2h
  4193  00068A  0E2D               	movlw	45
  4194  00068C  D04C               	goto	L2
  4195  00068E                     l6133:
  4196                           
  4197                           ; BSR set to: 0
  4198  00068E  0100               	movlb	0	; () banked
  4199  000690  4BC9               	infsnz	sprintf@sp& (0+255),f,b
  4200  000692  2BCA               	incf	(sprintf@sp+1)& (0+255),f,b
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;doprnt.c: 1195: }
  4204                           ;doprnt.c: 1196: while(c--) {
  4205  000694  D04A               	goto	l6143
  4206  000696                     l6135:
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;doprnt.c: 1200: {
  4210                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4211  000696  C0E7  F010         	movff	sprintf@val,___lldiv@dividend
  4212  00069A  C0E8  F011         	movff	sprintf@val+1,___lldiv@dividend+1
  4213  00069E  C0E9  F012         	movff	sprintf@val+2,___lldiv@dividend+2
  4214  0006A2  C0EA  F013         	movff	sprintf@val+3,___lldiv@dividend+3
  4215  0006A6  0100               	movlb	0	; () banked
  4216  0006A8  51F0               	movf	sprintf@c& (0+255),w,b
  4217  0006AA  0D04               	mullw	4
  4218  0006AC  0EFB               	movlw	low _dpowers
  4219  0006AE  24F3               	addwf	prodl,w,c
  4220  0006B0  6EF6               	movwf	tblptrl,c
  4221  0006B2  0EFD               	movlw	high _dpowers
  4222  0006B4  20F4               	addwfc	prodh,w,c
  4223  0006B6  6EF7               	movwf	tblptrh,c
  4224  0006B8                     	if	0	;There are less than 3 active tblptr bytes
  4225  0006B8                     	endif
  4226  0006B8  0009               	tblrd		*+
  4227  0006BA  CFF5 F014          	movff	tablat,___lldiv@divisor
  4228  0006BE  0009               	tblrd		*+
  4229  0006C0  CFF5 F015          	movff	tablat,___lldiv@divisor+1
  4230  0006C4  0009               	tblrd		*+
  4231  0006C6  CFF5 F016          	movff	tablat,___lldiv@divisor+2
  4232  0006CA  000A               	tblrd		*-
  4233  0006CC  CFF5 F017          	movff	tablat,___lldiv@divisor+3
  4234  0006D0  ECFF  F014         	call	___lldiv	;wreg free
  4235  0006D4  C010  F0E3         	movff	?___lldiv,sprintf@tmpval
  4236  0006D8  C011  F0E4         	movff	?___lldiv+1,sprintf@tmpval+1
  4237  0006DC  C012  F0E5         	movff	?___lldiv+2,sprintf@tmpval+2
  4238  0006E0  C013  F0E6         	movff	?___lldiv+3,sprintf@tmpval+3
  4239                           
  4240                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4241  0006E4  C0E3  F01D         	movff	sprintf@tmpval,___llmod@dividend
  4242  0006E8  C0E4  F01E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4243  0006EC  C0E5  F01F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4244  0006F0  C0E6  F020         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4245  0006F4  0E0A               	movlw	10
  4246  0006F6  6E21               	movwf	___llmod@divisor,c
  4247  0006F8  0E00               	movlw	0
  4248  0006FA  6E22               	movwf	___llmod@divisor+1,c
  4249  0006FC  0E00               	movlw	0
  4250  0006FE  6E23               	movwf	___llmod@divisor+2,c
  4251  000700  0E00               	movlw	0
  4252  000702  6E24               	movwf	___llmod@divisor+3,c
  4253  000704  ECB8  F015         	call	___llmod	;wreg free
  4254  000708  C01D  F0E3         	movff	?___llmod,sprintf@tmpval
  4255  00070C  C01E  F0E4         	movff	?___llmod+1,sprintf@tmpval+1
  4256  000710  C01F  F0E5         	movff	?___llmod+2,sprintf@tmpval+2
  4257  000714  C020  F0E6         	movff	?___llmod+3,sprintf@tmpval+3
  4258                           
  4259                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4260  000718  0100               	movlb	0	; () banked
  4261  00071A  51E3               	movf	sprintf@tmpval& (0+255),w,b
  4262  00071C  0F30               	addlw	48
  4263  00071E  C0C9  FFD9         	movff	sprintf@sp,fsr2l
  4264  000722  C0CA  FFDA         	movff	sprintf@sp+1,fsr2h
  4265  000726                     L2:
  4266  000726  6EDF               	movwf	indf2,c
  4267  000728  D7B2               	goto	l6133
  4268  00072A                     l6143:
  4269                           
  4270                           ; BSR set to: 0
  4271  00072A  0100               	movlb	0	; () banked
  4272  00072C  07F0               	decf	sprintf@c& (0+255),f,b
  4273  00072E  0100               	movlb	0	; () banked
  4274  000730  29F0               	incf	sprintf@c& (0+255),w,b
  4275  000732  B4D8               	btfsc	status,2,c
  4276  000734  D00E               	goto	l6151
  4277  000736  D7AF               	goto	l6135
  4278  000738                     l6145:
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4282  000738  C0C9  FFD9         	movff	sprintf@sp,fsr2l
  4283  00073C  C0CA  FFDA         	movff	sprintf@sp+1,fsr2h
  4284  000740  0E30               	movlw	48
  4285  000742  6EDF               	movwf	indf2,c
  4286                           
  4287                           ; BSR set to: 0
  4288  000744  0100               	movlb	0	; () banked
  4289  000746  4BC9               	infsnz	sprintf@sp& (0+255),f,b
  4290  000748  2BCA               	incf	(sprintf@sp+1)& (0+255),f,b
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;doprnt.c: 1209: exp--;
  4294  00074A  0100               	movlb	0	; () banked
  4295  00074C  07E1               	decf	sprintf@exp& (0+255),f,b
  4296  00074E  A0D8               	btfss	status,0,c
  4297  000750  07E2               	decf	(sprintf@exp+1)& (0+255),f,b
  4298  000752                     l6151:
  4299                           
  4300                           ; BSR set to: 0
  4301  000752  0100               	movlb	0	; () banked
  4302  000754  BFE2               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4303  000756  D007               	goto	l6153
  4304  000758  0100               	movlb	0	; () banked
  4305  00075A  51E2               	movf	(sprintf@exp+1)& (0+255),w,b
  4306  00075C  E1ED               	bnz	l6145
  4307  00075E  0100               	movlb	0	; () banked
  4308  000760  05E1               	decf	sprintf@exp& (0+255),w,b
  4309  000762  B0D8               	btfsc	status,0,c
  4310  000764  D7E9               	goto	l6145
  4311  000766                     l6153:
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;doprnt.c: 1210: }
  4315                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4316  000766  0100               	movlb	0	; () banked
  4317  000768  BFEF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4318  00076A  D00C               	goto	l650
  4319  00076C  0100               	movlb	0	; () banked
  4320  00076E  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  4321  000770  E105               	bnz	u6630
  4322  000772  0E09               	movlw	9
  4323  000774  0100               	movlb	0	; () banked
  4324  000776  5DEE               	subwf	sprintf@prec& (0+255),w,b
  4325  000778  A0D8               	btfss	status,0,c
  4326  00077A  D004               	goto	l650
  4327  00077C                     u6630:
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4331  00077C  0E08               	movlw	8
  4332  00077E  0100               	movlb	0	; () banked
  4333  000780  6FF0               	movwf	sprintf@c& (0+255),b
  4334  000782  D002               	goto	l6157
  4335  000784                     l650:
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;doprnt.c: 1213: else
  4339                           ;doprnt.c: 1214: c = prec;
  4340  000784  C0EE  F0F0         	movff	sprintf@prec,sprintf@c
  4341  000788                     l6157:
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;doprnt.c: 1215: prec -= c;
  4345  000788  0100               	movlb	0	; () banked
  4346  00078A  51F0               	movf	sprintf@c& (0+255),w,b
  4347  00078C  0100               	movlb	0	; () banked
  4348  00078E  5FEE               	subwf	sprintf@prec& (0+255),f,b
  4349  000790  0E00               	movlw	0
  4350  000792  0100               	movlb	0	; () banked
  4351  000794  BFF0               	btfsc	sprintf@c& (0+255),7,b
  4352  000796  0EFF               	movlw	255
  4353  000798  0100               	movlb	0	; () banked
  4354  00079A  5BEF               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;doprnt.c: 1219: if(c)
  4358  00079C  0100               	movlb	0	; () banked
  4359  00079E  51F0               	movf	sprintf@c& (0+255),w,b
  4360  0007A0  0100               	movlb	0	; () banked
  4361  0007A2  B4D8               	btfsc	status,2,c
  4362  0007A4  D009               	goto	l6165
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4366  0007A6  C0C9  FFD9         	movff	sprintf@sp,fsr2l
  4367  0007AA  C0CA  FFDA         	movff	sprintf@sp+1,fsr2h
  4368  0007AE  0E2E               	movlw	46
  4369  0007B0  6EDF               	movwf	indf2,c
  4370                           
  4371                           ; BSR set to: 0
  4372  0007B2  0100               	movlb	0	; () banked
  4373  0007B4  4BC9               	infsnz	sprintf@sp& (0+255),f,b
  4374  0007B6  2BCA               	incf	(sprintf@sp+1)& (0+255),f,b
  4375  0007B8                     l6165:
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4379  0007B8  0100               	movlb	0	; () banked
  4380  0007BA  51F0               	movf	sprintf@c& (0+255),w,b
  4381  0007BC  EC5D  F009         	call	_scale
  4382  0007C0  C0B3  F0D6         	movff	?_scale,_sprintf$2553
  4383  0007C4  C0B4  F0D7         	movff	?_scale+1,_sprintf$2553+1
  4384  0007C8  C0B5  F0D8         	movff	?_scale+2,_sprintf$2553+2
  4385                           
  4386                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4387  0007CC  C0EB  F03A         	movff	sprintf@fval,___ftmul@f2
  4388  0007D0  C0EC  F03B         	movff	sprintf@fval+1,___ftmul@f2+1
  4389  0007D4  C0ED  F03C         	movff	sprintf@fval+2,___ftmul@f2+2
  4390  0007D8  C0D6  F037         	movff	_sprintf$2553,___ftmul@f1
  4391  0007DC  C0D7  F038         	movff	_sprintf$2553+1,___ftmul@f1+1
  4392  0007E0  C0D8  F039         	movff	_sprintf$2553+2,___ftmul@f1+2
  4393  0007E4  EC21  F012         	call	___ftmul	;wreg free
  4394  0007E8  C037  F0BA         	movff	?___ftmul,___fttol@f1
  4395  0007EC  C038  F0BB         	movff	?___ftmul+1,___fttol@f1+1
  4396  0007F0  C039  F0BC         	movff	?___ftmul+2,___fttol@f1+2
  4397  0007F4  EC1B  F00F         	call	___fttol	;wreg free
  4398  0007F8  C0BA  F0E7         	movff	?___fttol,sprintf@val
  4399  0007FC  C0BB  F0E8         	movff	?___fttol+1,sprintf@val+1
  4400  000800  C0BC  F0E9         	movff	?___fttol+2,sprintf@val+2
  4401  000804  C0BD  F0EA         	movff	?___fttol+3,sprintf@val+3
  4402                           
  4403                           ;doprnt.c: 1228: while(c--) {
  4404  000808  D073               	goto	l6179
  4405  00080A                     l6169:
  4406                           
  4407                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4408  00080A  C0E7  F010         	movff	sprintf@val,___lldiv@dividend
  4409  00080E  C0E8  F011         	movff	sprintf@val+1,___lldiv@dividend+1
  4410  000812  C0E9  F012         	movff	sprintf@val+2,___lldiv@dividend+2
  4411  000816  C0EA  F013         	movff	sprintf@val+3,___lldiv@dividend+3
  4412  00081A  0100               	movlb	0	; () banked
  4413  00081C  51F0               	movf	sprintf@c& (0+255),w,b
  4414  00081E  0D04               	mullw	4
  4415  000820  0EFB               	movlw	low _dpowers
  4416  000822  24F3               	addwf	prodl,w,c
  4417  000824  6EF6               	movwf	tblptrl,c
  4418  000826  0EFD               	movlw	high _dpowers
  4419  000828  20F4               	addwfc	prodh,w,c
  4420  00082A  6EF7               	movwf	tblptrh,c
  4421  00082C                     	if	0	;There are less than 3 active tblptr bytes
  4422  00082C                     	endif
  4423  00082C  0009               	tblrd		*+
  4424  00082E  CFF5 F014          	movff	tablat,___lldiv@divisor
  4425  000832  0009               	tblrd		*+
  4426  000834  CFF5 F015          	movff	tablat,___lldiv@divisor+1
  4427  000838  0009               	tblrd		*+
  4428  00083A  CFF5 F016          	movff	tablat,___lldiv@divisor+2
  4429  00083E  000A               	tblrd		*-
  4430  000840  CFF5 F017          	movff	tablat,___lldiv@divisor+3
  4431  000844  ECFF  F014         	call	___lldiv	;wreg free
  4432  000848  C010  F0E3         	movff	?___lldiv,sprintf@tmpval
  4433  00084C  C011  F0E4         	movff	?___lldiv+1,sprintf@tmpval+1
  4434  000850  C012  F0E5         	movff	?___lldiv+2,sprintf@tmpval+2
  4435  000854  C013  F0E6         	movff	?___lldiv+3,sprintf@tmpval+3
  4436                           
  4437                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4438  000858  C0E3  F01D         	movff	sprintf@tmpval,___llmod@dividend
  4439  00085C  C0E4  F01E         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4440  000860  C0E5  F01F         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4441  000864  C0E6  F020         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4442  000868  0E0A               	movlw	10
  4443  00086A  6E21               	movwf	___llmod@divisor,c
  4444  00086C  0E00               	movlw	0
  4445  00086E  6E22               	movwf	___llmod@divisor+1,c
  4446  000870  0E00               	movlw	0
  4447  000872  6E23               	movwf	___llmod@divisor+2,c
  4448  000874  0E00               	movlw	0
  4449  000876  6E24               	movwf	___llmod@divisor+3,c
  4450  000878  ECB8  F015         	call	___llmod	;wreg free
  4451  00087C  C01D  F0E3         	movff	?___llmod,sprintf@tmpval
  4452  000880  C01E  F0E4         	movff	?___llmod+1,sprintf@tmpval+1
  4453  000884  C01F  F0E5         	movff	?___llmod+2,sprintf@tmpval+2
  4454  000888  C020  F0E6         	movff	?___llmod+3,sprintf@tmpval+3
  4455                           
  4456                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4457  00088C  0100               	movlb	0	; () banked
  4458  00088E  51E3               	movf	sprintf@tmpval& (0+255),w,b
  4459  000890  0F30               	addlw	48
  4460  000892  C0C9  FFD9         	movff	sprintf@sp,fsr2l
  4461  000896  C0CA  FFDA         	movff	sprintf@sp+1,fsr2h
  4462  00089A  6EDF               	movwf	indf2,c
  4463                           
  4464                           ; BSR set to: 0
  4465  00089C  0100               	movlb	0	; () banked
  4466  00089E  4BC9               	infsnz	sprintf@sp& (0+255),f,b
  4467  0008A0  2BCA               	incf	(sprintf@sp+1)& (0+255),f,b
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;doprnt.c: 1232: val %= dpowers[c];
  4471  0008A2  C0E7  F01D         	movff	sprintf@val,___llmod@dividend
  4472  0008A6  C0E8  F01E         	movff	sprintf@val+1,___llmod@dividend+1
  4473  0008AA  C0E9  F01F         	movff	sprintf@val+2,___llmod@dividend+2
  4474  0008AE  C0EA  F020         	movff	sprintf@val+3,___llmod@dividend+3
  4475  0008B2  0100               	movlb	0	; () banked
  4476  0008B4  51F0               	movf	sprintf@c& (0+255),w,b
  4477  0008B6  0D04               	mullw	4
  4478  0008B8  0EFB               	movlw	low _dpowers
  4479  0008BA  24F3               	addwf	prodl,w,c
  4480  0008BC  6EF6               	movwf	tblptrl,c
  4481  0008BE  0EFD               	movlw	high _dpowers
  4482  0008C0  20F4               	addwfc	prodh,w,c
  4483  0008C2  6EF7               	movwf	tblptrh,c
  4484  0008C4                     	if	0	;There are less than 3 active tblptr bytes
  4485  0008C4                     	endif
  4486  0008C4  0009               	tblrd		*+
  4487  0008C6  CFF5 F021          	movff	tablat,___llmod@divisor
  4488  0008CA  0009               	tblrd		*+
  4489  0008CC  CFF5 F022          	movff	tablat,___llmod@divisor+1
  4490  0008D0  0009               	tblrd		*+
  4491  0008D2  CFF5 F023          	movff	tablat,___llmod@divisor+2
  4492  0008D6  000A               	tblrd		*-
  4493  0008D8  CFF5 F024          	movff	tablat,___llmod@divisor+3
  4494  0008DC  ECB8  F015         	call	___llmod	;wreg free
  4495  0008E0  C01D  F0E7         	movff	?___llmod,sprintf@val
  4496  0008E4  C01E  F0E8         	movff	?___llmod+1,sprintf@val+1
  4497  0008E8  C01F  F0E9         	movff	?___llmod+2,sprintf@val+2
  4498  0008EC  C020  F0EA         	movff	?___llmod+3,sprintf@val+3
  4499  0008F0                     l6179:
  4500  0008F0  0100               	movlb	0	; () banked
  4501  0008F2  07F0               	decf	sprintf@c& (0+255),f,b
  4502  0008F4  0100               	movlb	0	; () banked
  4503  0008F6  29F0               	incf	sprintf@c& (0+255),w,b
  4504  0008F8  B4D8               	btfsc	status,2,c
  4505  0008FA  D00E               	goto	l6187
  4506  0008FC  D786               	goto	l6169
  4507  0008FE                     l6181:
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4511  0008FE  C0C9  FFD9         	movff	sprintf@sp,fsr2l
  4512  000902  C0CA  FFDA         	movff	sprintf@sp+1,fsr2h
  4513  000906  0E30               	movlw	48
  4514  000908  6EDF               	movwf	indf2,c
  4515                           
  4516                           ; BSR set to: 0
  4517  00090A  0100               	movlb	0	; () banked
  4518  00090C  4BC9               	infsnz	sprintf@sp& (0+255),f,b
  4519  00090E  2BCA               	incf	(sprintf@sp+1)& (0+255),f,b
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;doprnt.c: 1237: prec--;
  4523  000910  0100               	movlb	0	; () banked
  4524  000912  07EE               	decf	sprintf@prec& (0+255),f,b
  4525  000914  A0D8               	btfss	status,0,c
  4526  000916  07EF               	decf	(sprintf@prec+1)& (0+255),f,b
  4527  000918                     l6187:
  4528                           
  4529                           ; BSR set to: 0
  4530  000918  0100               	movlb	0	; () banked
  4531  00091A  51EE               	movf	sprintf@prec& (0+255),w,b
  4532  00091C  0100               	movlb	0	; () banked
  4533  00091E  11EF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4534  000920  B4D8               	btfsc	status,2,c
  4535  000922  D0F2               	goto	l6241
  4536  000924  D7EC               	goto	l6181
  4537  000926                     l6189:
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;doprnt.c: 1246: }
  4541                           ;doprnt.c: 1253: {
  4542                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4543  000926  C0DD  FFD9         	movff	sprintf@ap,fsr2l
  4544  00092A  C0DE  FFDA         	movff	sprintf@ap+1,fsr2h
  4545  00092E  CFDE F0E7          	movff	postinc2,sprintf@val
  4546  000932  CFDD F0E8          	movff	postdec2,sprintf@val+1
  4547  000936  0100               	movlb	0	; () banked
  4548  000938  0E00               	movlw	0
  4549  00093A  BFE8               	btfsc	(sprintf@val+1)& (0+255),7,b
  4550  00093C  0EFF               	movlw	-1
  4551  00093E  6FE9               	movwf	(sprintf@val+2)& (0+255),b
  4552  000940  6FEA               	movwf	(sprintf@val+3)& (0+255),b
  4553                           
  4554                           ; BSR set to: 0
  4555  000942  0E02               	movlw	2
  4556  000944  0100               	movlb	0	; () banked
  4557  000946  27DD               	addwf	sprintf@ap& (0+255),f,b
  4558  000948  0E00               	movlw	0
  4559  00094A  23DE               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;doprnt.c: 1261: if((long)val < 0) {
  4563  00094C  0100               	movlb	0	; () banked
  4564  00094E  AFEA               	btfss	(sprintf@val+3)& (0+255),7,b
  4565  000950  D00C               	goto	l6199
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;doprnt.c: 1262: flag |= 0x03;
  4569  000952  0E03               	movlw	3
  4570  000954  0100               	movlb	0	; () banked
  4571  000956  13DF               	iorwf	sprintf@flag& (0+255),f,b
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;doprnt.c: 1263: val = -val;
  4575  000958  0100               	movlb	0	; () banked
  4576  00095A  1FEA               	comf	(sprintf@val+3)& (0+255),f,b
  4577  00095C  1FE9               	comf	(sprintf@val+2)& (0+255),f,b
  4578  00095E  1FE8               	comf	(sprintf@val+1)& (0+255),f,b
  4579  000960  6DE7               	negf	sprintf@val& (0+255),b
  4580  000962  0E00               	movlw	0
  4581  000964  23E8               	addwfc	(sprintf@val+1)& (0+255),f,b
  4582  000966  23E9               	addwfc	(sprintf@val+2)& (0+255),f,b
  4583  000968  23EA               	addwfc	(sprintf@val+3)& (0+255),f,b
  4584  00096A                     l6199:
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;doprnt.c: 1264: }
  4588                           ;doprnt.c: 1266: }
  4589                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4590  00096A  0100               	movlb	0	; () banked
  4591  00096C  51EE               	movf	sprintf@prec& (0+255),w,b
  4592  00096E  0100               	movlb	0	; () banked
  4593  000970  11EF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4594  000972  A4D8               	btfss	status,2,c
  4595  000974  D00D               	goto	l6205
  4596                           
  4597                           ; BSR set to: 0
  4598  000976  0100               	movlb	0	; () banked
  4599  000978  51E7               	movf	sprintf@val& (0+255),w,b
  4600  00097A  0100               	movlb	0	; () banked
  4601  00097C  11E8               	iorwf	(sprintf@val+1)& (0+255),w,b
  4602  00097E  0100               	movlb	0	; () banked
  4603  000980  11E9               	iorwf	(sprintf@val+2)& (0+255),w,b
  4604  000982  0100               	movlb	0	; () banked
  4605  000984  11EA               	iorwf	(sprintf@val+3)& (0+255),w,b
  4606  000986  A4D8               	btfss	status,2,c
  4607  000988  D003               	goto	l6205
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;doprnt.c: 1291: prec++;
  4611  00098A  0100               	movlb	0	; () banked
  4612  00098C  4BEE               	infsnz	sprintf@prec& (0+255),f,b
  4613  00098E  2BEF               	incf	(sprintf@prec+1)& (0+255),f,b
  4614  000990                     l6205:
  4615                           
  4616                           ; BSR set to: 0
  4617                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4618  000990  0E01               	movlw	1
  4619  000992  0100               	movlb	0	; () banked
  4620  000994  6FF0               	movwf	sprintf@c& (0+255),b
  4621  000996                     l6207:
  4622                           
  4623                           ; BSR set to: 0
  4624  000996  0E0A               	movlw	10
  4625  000998  0100               	movlb	0	; () banked
  4626  00099A  19F0               	xorwf	sprintf@c& (0+255),w,b
  4627  00099C  B4D8               	btfsc	status,2,c
  4628  00099E  D01E               	goto	l6219
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;doprnt.c: 1306: if(val < dpowers[c])
  4632                           
  4633                           ; BSR set to: 0
  4634                           
  4635                           ; BSR set to: 0
  4636  0009A0  0100               	movlb	0	; () banked
  4637  0009A2  51F0               	movf	sprintf@c& (0+255),w,b
  4638  0009A4  0D04               	mullw	4
  4639  0009A6  0EFB               	movlw	low _dpowers
  4640  0009A8  24F3               	addwf	prodl,w,c
  4641  0009AA  6EF6               	movwf	tblptrl,c
  4642  0009AC  0EFD               	movlw	high _dpowers
  4643  0009AE  20F4               	addwfc	prodh,w,c
  4644  0009B0  6EF7               	movwf	tblptrh,c
  4645  0009B2                     	if	0	;There are less than 3 active tblptr bytes
  4646  0009B2                     	endif
  4647  0009B2  0009               	tblrd		*+
  4648  0009B4  50F5               	movf	tablat,w,c
  4649  0009B6  0100               	movlb	0	; () banked
  4650  0009B8  5DE7               	subwf	sprintf@val& (0+255),w,b
  4651  0009BA  0009               	tblrd		*+
  4652  0009BC  50F5               	movf	tablat,w,c
  4653  0009BE  0100               	movlb	0	; () banked
  4654  0009C0  59E8               	subwfb	(sprintf@val+1)& (0+255),w,b
  4655  0009C2  0009               	tblrd		*+
  4656  0009C4  50F5               	movf	tablat,w,c
  4657  0009C6  0100               	movlb	0	; () banked
  4658  0009C8  59E9               	subwfb	(sprintf@val+2)& (0+255),w,b
  4659  0009CA  0009               	tblrd		*+
  4660  0009CC  50F5               	movf	tablat,w,c
  4661  0009CE  0100               	movlb	0	; () banked
  4662  0009D0  59EA               	subwfb	(sprintf@val+3)& (0+255),w,b
  4663  0009D2  A0D8               	btfss	status,0,c
  4664  0009D4  D003               	goto	l6219
  4665                           
  4666                           ; BSR set to: 0
  4667                           
  4668                           ; BSR set to: 0
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;doprnt.c: 1307: break;
  4672  0009D6  0100               	movlb	0	; () banked
  4673  0009D8  2BF0               	incf	sprintf@c& (0+255),f,b
  4674  0009DA  D7DD               	goto	l6207
  4675  0009DC                     l6219:
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;doprnt.c: 1339: if(c < prec)
  4679  0009DC  0E80               	movlw	128
  4680  0009DE  0100               	movlb	0	; () banked
  4681  0009E0  BFF0               	btfsc	sprintf@c& (0+255),7,b
  4682  0009E2  0E7F               	movlw	127
  4683  0009E4  0100               	movlb	0	; () banked
  4684  0009E6  6FD0               	movwf	??_sprintf& (0+255),b
  4685  0009E8  0100               	movlb	0	; () banked
  4686  0009EA  51EE               	movf	sprintf@prec& (0+255),w,b
  4687  0009EC  0100               	movlb	0	; () banked
  4688  0009EE  5DF0               	subwf	sprintf@c& (0+255),w,b
  4689  0009F0  0100               	movlb	0	; () banked
  4690  0009F2  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  4691  0009F4  0A80               	xorlw	128
  4692  0009F6  0100               	movlb	0	; () banked
  4693  0009F8  59D0               	subwfb	??_sprintf& (0+255),w,b
  4694  0009FA  B0D8               	btfsc	status,0,c
  4695  0009FC  D003               	goto	l6223
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;doprnt.c: 1340: c = prec;
  4699  0009FE  C0EE  F0F0         	movff	sprintf@prec,sprintf@c
  4700  000A02  D018               	goto	l6227
  4701  000A04                     l6223:
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;doprnt.c: 1341: else if(prec < c)
  4705  000A04  0100               	movlb	0	; () banked
  4706  000A06  51EF               	movf	(sprintf@prec+1)& (0+255),w,b
  4707  000A08  0A80               	xorlw	128
  4708  000A0A  0100               	movlb	0	; () banked
  4709  000A0C  6FD0               	movwf	??_sprintf& (0+255),b
  4710  000A0E  0100               	movlb	0	; () banked
  4711  000A10  51F0               	movf	sprintf@c& (0+255),w,b
  4712  000A12  0100               	movlb	0	; () banked
  4713  000A14  5DEE               	subwf	sprintf@prec& (0+255),w,b
  4714  000A16  0E80               	movlw	128
  4715  000A18  0100               	movlb	0	; () banked
  4716  000A1A  BFF0               	btfsc	sprintf@c& (0+255),7,b
  4717  000A1C  0E7F               	movlw	127
  4718  000A1E  0100               	movlb	0	; () banked
  4719  000A20  59D0               	subwfb	??_sprintf& (0+255),w,b
  4720  000A22  B0D8               	btfsc	status,0,c
  4721  000A24  D007               	goto	l6227
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;doprnt.c: 1342: prec = c;
  4725  000A26  0100               	movlb	0	; () banked
  4726  000A28  51F0               	movf	sprintf@c& (0+255),w,b
  4727  000A2A  0100               	movlb	0	; () banked
  4728  000A2C  6FEE               	movwf	sprintf@prec& (0+255),b
  4729  000A2E  6BEF               	clrf	(sprintf@prec+1)& (0+255),b
  4730  000A30  BFEE               	btfsc	sprintf@prec& (0+255),7,b
  4731  000A32  07EF               	decf	(sprintf@prec+1)& (0+255),f,b
  4732  000A34                     l6227:
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;doprnt.c: 1422: {
  4736                           ;doprnt.c: 1438: if(flag & 0x03)
  4737  000A34  0E03               	movlw	3
  4738  000A36  0100               	movlb	0	; () banked
  4739  000A38  15DF               	andwf	sprintf@flag& (0+255),w,b
  4740  000A3A  0100               	movlb	0	; () banked
  4741  000A3C  6FD0               	movwf	??_sprintf& (0+255),b
  4742  000A3E  0E00               	movlw	0
  4743  000A40  0100               	movlb	0	; () banked
  4744  000A42  15E0               	andwf	(sprintf@flag+1)& (0+255),w,b
  4745  000A44  0100               	movlb	0	; () banked
  4746  000A46  6FD1               	movwf	(??_sprintf+1)& (0+255),b
  4747  000A48  0100               	movlb	0	; () banked
  4748  000A4A  51D0               	movf	??_sprintf& (0+255),w,b
  4749  000A4C  0100               	movlb	0	; () banked
  4750  000A4E  11D1               	iorwf	(??_sprintf+1)& (0+255),w,b
  4751  000A50  B4D8               	btfsc	status,2,c
  4752  000A52  D04F               	goto	l6239
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4756  000A54  C0C9  FFD9         	movff	sprintf@sp,fsr2l
  4757  000A58  C0CA  FFDA         	movff	sprintf@sp+1,fsr2h
  4758  000A5C  0E2D               	movlw	45
  4759  000A5E  6EDF               	movwf	indf2,c
  4760  000A60  D045               	goto	l6237
  4761  000A62                     l6233:
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;doprnt.c: 1478: {
  4765                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4766  000A62  C0EE  F0D0         	movff	sprintf@prec,??_sprintf
  4767  000A66  C0EF  F0D1         	movff	sprintf@prec+1,??_sprintf+1
  4768  000A6A  0100               	movlb	0	; () banked
  4769  000A6C  90D8               	bcf	status,0,c
  4770  000A6E  37D0               	rlcf	??_sprintf& (0+255),f,b
  4771  000A70  37D1               	rlcf	(??_sprintf+1)& (0+255),f,b
  4772  000A72  0100               	movlb	0	; () banked
  4773  000A74  90D8               	bcf	status,0,c
  4774  000A76  37D0               	rlcf	??_sprintf& (0+255),f,b
  4775  000A78  37D1               	rlcf	(??_sprintf+1)& (0+255),f,b
  4776  000A7A  0EFB               	movlw	low _dpowers
  4777  000A7C  0100               	movlb	0	; () banked
  4778  000A7E  25D0               	addwf	??_sprintf& (0+255),w,b
  4779  000A80  6EF6               	movwf	tblptrl,c
  4780  000A82  0EFD               	movlw	high _dpowers
  4781  000A84  21D1               	addwfc	(??_sprintf+1)& (0+255),w,b
  4782  000A86  6EF7               	movwf	tblptrh,c
  4783  000A88                     	if	0	;There are less than 3 active tblptr bytes
  4784  000A88                     	endif
  4785  000A88  0009               	tblrd		*+
  4786  000A8A  CFF5 F014          	movff	tablat,___lldiv@divisor
  4787  000A8E  0009               	tblrd		*+
  4788  000A90  CFF5 F015          	movff	tablat,___lldiv@divisor+1
  4789  000A94  0009               	tblrd		*+
  4790  000A96  CFF5 F016          	movff	tablat,___lldiv@divisor+2
  4791  000A9A  000A               	tblrd		*-
  4792  000A9C  CFF5 F017          	movff	tablat,___lldiv@divisor+3
  4793  000AA0  C0E7  F010         	movff	sprintf@val,___lldiv@dividend
  4794  000AA4  C0E8  F011         	movff	sprintf@val+1,___lldiv@dividend+1
  4795  000AA8  C0E9  F012         	movff	sprintf@val+2,___lldiv@dividend+2
  4796  000AAC  C0EA  F013         	movff	sprintf@val+3,___lldiv@dividend+3
  4797  000AB0  ECFF  F014         	call	___lldiv	;wreg free
  4798  000AB4  C010  F01D         	movff	?___lldiv,___llmod@dividend
  4799  000AB8  C011  F01E         	movff	?___lldiv+1,___llmod@dividend+1
  4800  000ABC  C012  F01F         	movff	?___lldiv+2,___llmod@dividend+2
  4801  000AC0  C013  F020         	movff	?___lldiv+3,___llmod@dividend+3
  4802  000AC4  0E0A               	movlw	10
  4803  000AC6  6E21               	movwf	___llmod@divisor,c
  4804  000AC8  0E00               	movlw	0
  4805  000ACA  6E22               	movwf	___llmod@divisor+1,c
  4806  000ACC  0E00               	movlw	0
  4807  000ACE  6E23               	movwf	___llmod@divisor+2,c
  4808  000AD0  0E00               	movlw	0
  4809  000AD2  6E24               	movwf	___llmod@divisor+3,c
  4810  000AD4  ECB8  F015         	call	___llmod	;wreg free
  4811  000AD8  501D               	movf	?___llmod,w,c
  4812  000ADA  0F30               	addlw	48
  4813  000ADC  0100               	movlb	0	; () banked
  4814  000ADE  6FF0               	movwf	sprintf@c& (0+255),b
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;doprnt.c: 1523: }
  4818                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4819  000AE0  C0C9  FFD9         	movff	sprintf@sp,fsr2l
  4820  000AE4  C0CA  FFDA         	movff	sprintf@sp+1,fsr2h
  4821  000AE8  C0F0  FFDF         	movff	sprintf@c,indf2
  4822  000AEC                     l6237:
  4823                           
  4824                           ; BSR set to: 0
  4825  000AEC  0100               	movlb	0	; () banked
  4826  000AEE  4BC9               	infsnz	sprintf@sp& (0+255),f,b
  4827  000AF0  2BCA               	incf	(sprintf@sp+1)& (0+255),f,b
  4828  000AF2                     l6239:
  4829                           
  4830                           ; BSR set to: 0
  4831  000AF2  0100               	movlb	0	; () banked
  4832  000AF4  07EE               	decf	sprintf@prec& (0+255),f,b
  4833  000AF6  A0D8               	btfss	status,0,c
  4834  000AF8  07EF               	decf	(sprintf@prec+1)& (0+255),f,b
  4835  000AFA  0100               	movlb	0	; () banked
  4836  000AFC  29EE               	incf	sprintf@prec& (0+255),w,b
  4837  000AFE  E1B1               	bnz	l6233
  4838  000B00  0100               	movlb	0	; () banked
  4839  000B02  29EF               	incf	(sprintf@prec+1)& (0+255),w,b
  4840  000B04  A4D8               	btfss	status,2,c
  4841  000B06  D7AD               	goto	l6233
  4842  000B08                     l6241:
  4843                           
  4844                           ; BSR set to: 0
  4845  000B08  C0CB  FFF6         	movff	sprintf@f,tblptrl
  4846  000B0C  C0CC  FFF7         	movff	sprintf@f+1,tblptrh
  4847  000B10  0100               	movlb	0	; () banked
  4848  000B12  4BCB               	infsnz	sprintf@f& (0+255),f,b
  4849  000B14  2BCC               	incf	(sprintf@f+1)& (0+255),f,b
  4850  000B16                     	if	0	;tblptru may be non-zero
  4851  000B16                     	endif
  4852  000B16                     	if	0	;tblptru may be non-zero
  4853  000B16                     	endif
  4854  000B16  0008               	tblrd		*
  4855  000B18  CFF5 F0F0          	movff	tablat,sprintf@c
  4856  000B1C  0100               	movlb	0	; () banked
  4857  000B1E  51F0               	movf	sprintf@c& (0+255),w,b
  4858  000B20  A4D8               	btfss	status,2,c
  4859  000B22  EFC1  F000         	goto	l5993
  4860  000B26                     l6243:
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;doprnt.c: 1538: *sp = 0;
  4864  000B26  C0C9  FFD9         	movff	sprintf@sp,fsr2l
  4865  000B2A  C0CA  FFDA         	movff	sprintf@sp+1,fsr2h
  4866  000B2E  0E00               	movlw	0
  4867  000B30  6EDF               	movwf	indf2,c
  4868  000B32  0012               	return	
  4869  000B34                     __end_of_sprintf:
  4870                           	opt stack 0
  4871                           tblptru	equ	0xFF8
  4872                           tblptrh	equ	0xFF7
  4873                           tblptrl	equ	0xFF6
  4874                           tablat	equ	0xFF5
  4875                           prodh	equ	0xFF4
  4876                           prodl	equ	0xFF3
  4877                           postinc0	equ	0xFEE
  4878                           wreg	equ	0xFE8
  4879                           indf1	equ	0xFE7
  4880                           postdec1	equ	0xFE5
  4881                           fsr1h	equ	0xFE2
  4882                           fsr1l	equ	0xFE1
  4883                           indf2	equ	0xFDF
  4884                           postinc2	equ	0xFDE
  4885                           postdec2	equ	0xFDD
  4886                           fsr2h	equ	0xFDA
  4887                           fsr2l	equ	0xFD9
  4888                           status	equ	0xFD8
  4889                           
  4890 ;; *************** function _scale *****************
  4891 ;; Defined at:
  4892 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;  scl             1    wreg     char 
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;  scl             1   12[BANK0 ] char 
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  3    6[BANK0 ] char 
  4899 ;; Registers used:
  4900 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4906 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4907 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4909 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4910 ;;Total ram usage:        7 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; Hardware stack levels required when called:    4
  4913 ;; This function calls:
  4914 ;;		___awdiv
  4915 ;;		___awmod
  4916 ;;		___ftmul
  4917 ;;		___wmul
  4918 ;; This function is called by:
  4919 ;;		_sprintf
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text4
  4924  0012BA                     __ptext4:
  4925                           	opt stack 0
  4926  0012BA                     _scale:
  4927                           	opt stack 24
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;incstack = 0
  4931                           ;scale@scl stored from wreg
  4932  0012BA  0100               	movlb	0	; () banked
  4933  0012BC  6FB9               	movwf	scale@scl& (0+255),b
  4934                           
  4935                           ;doprnt.c: 428: if(scl < 0) {
  4936  0012BE  0100               	movlb	0	; () banked
  4937  0012C0  AFB9               	btfss	scale@scl& (0+255),7,b
  4938  0012C2  D104               	goto	l5515
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;doprnt.c: 429: scl = -scl;
  4942  0012C4  0100               	movlb	0	; () banked
  4943  0012C6  6DB9               	negf	scale@scl& (0+255),b
  4944                           
  4945                           ;doprnt.c: 430: if(scl>=110)
  4946  0012C8  0100               	movlb	0	; () banked
  4947  0012CA  51B9               	movf	scale@scl& (0+255),w,b
  4948  0012CC  0A80               	xorlw	128
  4949  0012CE  0F12               	addlw	-238
  4950  0012D0  A0D8               	btfss	status,0,c
  4951  0012D2  D094               	goto	l5505
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4955  0012D4  0E00               	movlw	0
  4956  0012D6  6E21               	movwf	___wmul@multiplicand+1,c
  4957  0012D8  0E03               	movlw	3
  4958  0012DA  6E20               	movwf	___wmul@multiplicand,c
  4959  0012DC  0E00               	movlw	0
  4960  0012DE  6E19               	movwf	___awdiv@divisor+1,c
  4961  0012E0  0E0A               	movlw	10
  4962  0012E2  6E18               	movwf	___awdiv@divisor,c
  4963  0012E4  0E00               	movlw	0
  4964  0012E6  6E13               	movwf	___awmod@divisor+1,c
  4965  0012E8  0E64               	movlw	100
  4966  0012EA  6E12               	movwf	___awmod@divisor,c
  4967  0012EC  0100               	movlb	0	; () banked
  4968  0012EE  51B9               	movf	scale@scl& (0+255),w,b
  4969  0012F0  6E10               	movwf	___awmod@dividend,c
  4970  0012F2  6A11               	clrf	___awmod@dividend+1,c
  4971  0012F4  BE10               	btfsc	___awmod@dividend,7,c
  4972  0012F6  0611               	decf	___awmod@dividend+1,f,c
  4973  0012F8  EC80  F015         	call	___awmod	;wreg free
  4974  0012FC  C010  F016         	movff	?___awmod,___awdiv@dividend
  4975  001300  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  4976  001304  ECBD  F014         	call	___awdiv	;wreg free
  4977  001308  0E09               	movlw	9
  4978  00130A  2416               	addwf	?___awdiv,w,c
  4979  00130C  6E1E               	movwf	___wmul@multiplier,c
  4980  00130E  0E00               	movlw	0
  4981  001310  2017               	addwfc	?___awdiv+1,w,c
  4982  001312  6E1F               	movwf	___wmul@multiplier+1,c
  4983  001314  EC6C  F017         	call	___wmul	;wreg free
  4984  001318  0E23               	movlw	low __npowers_
  4985  00131A  241E               	addwf	?___wmul,w,c
  4986  00131C  6EF6               	movwf	tblptrl,c
  4987  00131E  0EFE               	movlw	high __npowers_
  4988  001320  201F               	addwfc	?___wmul+1,w,c
  4989  001322  6EF7               	movwf	tblptrh,c
  4990  001324                     	if	0	;There are less than 3 active tblptr bytes
  4991  001324                     	endif
  4992  001324  0009               	tblrd		*+
  4993  001326  CFF5 F03A          	movff	tablat,___ftmul@f2
  4994  00132A  0009               	tblrd		*+
  4995  00132C  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  4996  001330  000A               	tblrd		*-
  4997  001332  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  4998  001336  0E00               	movlw	0
  4999  001338  6E19               	movwf	___awdiv@divisor+1,c
  5000  00133A  0E64               	movlw	100
  5001  00133C  6E18               	movwf	___awdiv@divisor,c
  5002  00133E  0100               	movlb	0	; () banked
  5003  001340  51B9               	movf	scale@scl& (0+255),w,b
  5004  001342  6E16               	movwf	___awdiv@dividend,c
  5005  001344  6A17               	clrf	___awdiv@dividend+1,c
  5006  001346  BE16               	btfsc	___awdiv@dividend,7,c
  5007  001348  0617               	decf	___awdiv@dividend+1,f,c
  5008  00134A  ECBD  F014         	call	___awdiv	;wreg free
  5009  00134E  0E12               	movlw	18
  5010  001350  2416               	addwf	?___awdiv,w,c
  5011  001352  6E1E               	movwf	___wmul@multiplier,c
  5012  001354  0E00               	movlw	0
  5013  001356  2017               	addwfc	?___awdiv+1,w,c
  5014  001358  6E1F               	movwf	___wmul@multiplier+1,c
  5015  00135A  0E00               	movlw	0
  5016  00135C  6E21               	movwf	___wmul@multiplicand+1,c
  5017  00135E  0E03               	movlw	3
  5018  001360  6E20               	movwf	___wmul@multiplicand,c
  5019  001362  EC6C  F017         	call	___wmul	;wreg free
  5020  001366  0E23               	movlw	low __npowers_
  5021  001368  241E               	addwf	?___wmul,w,c
  5022  00136A  6EF6               	movwf	tblptrl,c
  5023  00136C  0EFE               	movlw	high __npowers_
  5024  00136E  201F               	addwfc	?___wmul+1,w,c
  5025  001370  6EF7               	movwf	tblptrh,c
  5026  001372                     	if	0	;There are less than 3 active tblptr bytes
  5027  001372                     	endif
  5028  001372  0009               	tblrd		*+
  5029  001374  CFF5 F037          	movff	tablat,___ftmul@f1
  5030  001378  0009               	tblrd		*+
  5031  00137A  CFF5 F038          	movff	tablat,___ftmul@f1+1
  5032  00137E  000A               	tblrd		*-
  5033  001380  CFF5 F039          	movff	tablat,___ftmul@f1+2
  5034  001384  EC21  F012         	call	___ftmul	;wreg free
  5035  001388  C037  F0B6         	movff	?___ftmul,_scale$2552
  5036  00138C  C038  F0B7         	movff	?___ftmul+1,_scale$2552+1
  5037  001390  C039  F0B8         	movff	?___ftmul+2,_scale$2552+2
  5038                           
  5039                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5040  001394  C0B6  F037         	movff	_scale$2552,___ftmul@f1
  5041  001398  C0B7  F038         	movff	_scale$2552+1,___ftmul@f1+1
  5042  00139C  C0B8  F039         	movff	_scale$2552+2,___ftmul@f1+2
  5043  0013A0  0E00               	movlw	0
  5044  0013A2  6E21               	movwf	___wmul@multiplicand+1,c
  5045  0013A4  0E03               	movlw	3
  5046  0013A6  6E20               	movwf	___wmul@multiplicand,c
  5047  0013A8  0E00               	movlw	0
  5048  0013AA  6E13               	movwf	___awmod@divisor+1,c
  5049  0013AC  0E0A               	movlw	10
  5050  0013AE  6E12               	movwf	___awmod@divisor,c
  5051  0013B0  0100               	movlb	0	; () banked
  5052  0013B2  51B9               	movf	scale@scl& (0+255),w,b
  5053  0013B4  6E10               	movwf	___awmod@dividend,c
  5054  0013B6  6A11               	clrf	___awmod@dividend+1,c
  5055  0013B8  BE10               	btfsc	___awmod@dividend,7,c
  5056  0013BA  0611               	decf	___awmod@dividend+1,f,c
  5057  0013BC  EC80  F015         	call	___awmod	;wreg free
  5058  0013C0  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5059  0013C4  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5060  0013C8  EC6C  F017         	call	___wmul	;wreg free
  5061  0013CC  0E23               	movlw	low __npowers_
  5062  0013CE  241E               	addwf	?___wmul,w,c
  5063  0013D0  6EF6               	movwf	tblptrl,c
  5064  0013D2  0EFE               	movlw	high __npowers_
  5065  0013D4  201F               	addwfc	?___wmul+1,w,c
  5066  0013D6  6EF7               	movwf	tblptrh,c
  5067  0013D8                     	if	0	;There are less than 3 active tblptr bytes
  5068  0013D8                     	endif
  5069  0013D8  0009               	tblrd		*+
  5070  0013DA  CFF5 F03A          	movff	tablat,___ftmul@f2
  5071  0013DE  0009               	tblrd		*+
  5072  0013E0  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5073  0013E4  000A               	tblrd		*-
  5074  0013E6  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5075  0013EA  EC21  F012         	call	___ftmul	;wreg free
  5076  0013EE  C037  F0B3         	movff	?___ftmul,?_scale
  5077  0013F2  C038  F0B4         	movff	?___ftmul+1,?_scale+1
  5078  0013F6  C039  F0B5         	movff	?___ftmul+2,?_scale+2
  5079  0013FA  0012               	return	
  5080  0013FC                     l5505:
  5081                           
  5082                           ;doprnt.c: 432: else if(scl > 10)
  5083  0013FC  0100               	movlb	0	; () banked
  5084  0013FE  51B9               	movf	scale@scl& (0+255),w,b
  5085  001400  0A80               	xorlw	128
  5086  001402  0F75               	addlw	-139
  5087  001404  A0D8               	btfss	status,0,c
  5088  001406  D04F               	goto	l5511
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5092  001408  0E00               	movlw	0
  5093  00140A  6E19               	movwf	___awdiv@divisor+1,c
  5094  00140C  0E0A               	movlw	10
  5095  00140E  6E18               	movwf	___awdiv@divisor,c
  5096  001410  0100               	movlb	0	; () banked
  5097  001412  51B9               	movf	scale@scl& (0+255),w,b
  5098  001414  6E16               	movwf	___awdiv@dividend,c
  5099  001416  6A17               	clrf	___awdiv@dividend+1,c
  5100  001418  BE16               	btfsc	___awdiv@dividend,7,c
  5101  00141A  0617               	decf	___awdiv@dividend+1,f,c
  5102  00141C  ECBD  F014         	call	___awdiv	;wreg free
  5103  001420  0E09               	movlw	9
  5104  001422  2416               	addwf	?___awdiv,w,c
  5105  001424  6E1E               	movwf	___wmul@multiplier,c
  5106  001426  0E00               	movlw	0
  5107  001428  2017               	addwfc	?___awdiv+1,w,c
  5108  00142A  6E1F               	movwf	___wmul@multiplier+1,c
  5109  00142C  0E00               	movlw	0
  5110  00142E  6E21               	movwf	___wmul@multiplicand+1,c
  5111  001430  0E03               	movlw	3
  5112  001432  6E20               	movwf	___wmul@multiplicand,c
  5113  001434  EC6C  F017         	call	___wmul	;wreg free
  5114  001438  0E23               	movlw	low __npowers_
  5115  00143A  241E               	addwf	?___wmul,w,c
  5116  00143C  6EF6               	movwf	tblptrl,c
  5117  00143E  0EFE               	movlw	high __npowers_
  5118  001440  201F               	addwfc	?___wmul+1,w,c
  5119  001442  6EF7               	movwf	tblptrh,c
  5120  001444                     	if	0	;There are less than 3 active tblptr bytes
  5121  001444                     	endif
  5122  001444  0009               	tblrd		*+
  5123  001446  CFF5 F037          	movff	tablat,___ftmul@f1
  5124  00144A  0009               	tblrd		*+
  5125  00144C  CFF5 F038          	movff	tablat,___ftmul@f1+1
  5126  001450  000A               	tblrd		*-
  5127  001452  CFF5 F039          	movff	tablat,___ftmul@f1+2
  5128  001456  0E00               	movlw	0
  5129  001458  6E21               	movwf	___wmul@multiplicand+1,c
  5130  00145A  0E03               	movlw	3
  5131  00145C  6E20               	movwf	___wmul@multiplicand,c
  5132  00145E  0E00               	movlw	0
  5133  001460  6E13               	movwf	___awmod@divisor+1,c
  5134  001462  0E0A               	movlw	10
  5135  001464  6E12               	movwf	___awmod@divisor,c
  5136  001466  0100               	movlb	0	; () banked
  5137  001468  51B9               	movf	scale@scl& (0+255),w,b
  5138  00146A  6E10               	movwf	___awmod@dividend,c
  5139  00146C  6A11               	clrf	___awmod@dividend+1,c
  5140  00146E  BE10               	btfsc	___awmod@dividend,7,c
  5141  001470  0611               	decf	___awmod@dividend+1,f,c
  5142  001472  EC80  F015         	call	___awmod	;wreg free
  5143  001476  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5144  00147A  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5145  00147E  EC6C  F017         	call	___wmul	;wreg free
  5146  001482  0E23               	movlw	low __npowers_
  5147  001484  241E               	addwf	?___wmul,w,c
  5148  001486  6EF6               	movwf	tblptrl,c
  5149  001488  0EFE               	movlw	high __npowers_
  5150  00148A  201F               	addwfc	?___wmul+1,w,c
  5151  00148C  6EF7               	movwf	tblptrh,c
  5152  00148E                     	if	0	;There are less than 3 active tblptr bytes
  5153  00148E                     	endif
  5154  00148E  0009               	tblrd		*+
  5155  001490  CFF5 F03A          	movff	tablat,___ftmul@f2
  5156  001494  0009               	tblrd		*+
  5157  001496  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5158  00149A  000A               	tblrd		*-
  5159  00149C  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5160  0014A0  EC21  F012         	call	___ftmul	;wreg free
  5161  0014A4  D7A4               	goto	L3
  5162  0014A6                     l5511:
  5163                           
  5164                           ;doprnt.c: 434: return _npowers_[scl];
  5165  0014A6  0100               	movlb	0	; () banked
  5166  0014A8  51B9               	movf	scale@scl& (0+255),w,b
  5167  0014AA  0D03               	mullw	3
  5168  0014AC  0E23               	movlw	low __npowers_
  5169  0014AE  24F3               	addwf	prodl,w,c
  5170  0014B0  6EF6               	movwf	tblptrl,c
  5171  0014B2  0EFE               	movlw	high __npowers_
  5172  0014B4  20F4               	addwfc	prodh,w,c
  5173  0014B6  6EF7               	movwf	tblptrh,c
  5174  0014B8                     	if	0	;There are less than 3 active tblptr bytes
  5175  0014B8                     	endif
  5176  0014B8  0009               	tblrd		*+
  5177  0014BA  CFF5 F0B3          	movff	tablat,?_scale
  5178  0014BE  0009               	tblrd		*+
  5179  0014C0  CFF5 F0B4          	movff	tablat,?_scale+1
  5180  0014C4  000A               	tblrd		*-
  5181  0014C6  CFF5 F0B5          	movff	tablat,?_scale+2
  5182                           
  5183                           ; BSR set to: 0
  5184  0014CA  0012               	return	
  5185  0014CC                     l5515:
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;doprnt.c: 435: }
  5189                           ;doprnt.c: 436: if(scl>=110)
  5190  0014CC  0100               	movlb	0	; () banked
  5191  0014CE  51B9               	movf	scale@scl& (0+255),w,b
  5192  0014D0  0A80               	xorlw	128
  5193  0014D2  0F12               	addlw	-238
  5194  0014D4  A0D8               	btfss	status,0,c
  5195  0014D6  D094               	goto	l5523
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5199  0014D8  0E00               	movlw	0
  5200  0014DA  6E21               	movwf	___wmul@multiplicand+1,c
  5201  0014DC  0E03               	movlw	3
  5202  0014DE  6E20               	movwf	___wmul@multiplicand,c
  5203  0014E0  0E00               	movlw	0
  5204  0014E2  6E19               	movwf	___awdiv@divisor+1,c
  5205  0014E4  0E0A               	movlw	10
  5206  0014E6  6E18               	movwf	___awdiv@divisor,c
  5207  0014E8  0E00               	movlw	0
  5208  0014EA  6E13               	movwf	___awmod@divisor+1,c
  5209  0014EC  0E64               	movlw	100
  5210  0014EE  6E12               	movwf	___awmod@divisor,c
  5211  0014F0  0100               	movlb	0	; () banked
  5212  0014F2  51B9               	movf	scale@scl& (0+255),w,b
  5213  0014F4  6E10               	movwf	___awmod@dividend,c
  5214  0014F6  6A11               	clrf	___awmod@dividend+1,c
  5215  0014F8  BE10               	btfsc	___awmod@dividend,7,c
  5216  0014FA  0611               	decf	___awmod@dividend+1,f,c
  5217  0014FC  EC80  F015         	call	___awmod	;wreg free
  5218  001500  C010  F016         	movff	?___awmod,___awdiv@dividend
  5219  001504  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  5220  001508  ECBD  F014         	call	___awdiv	;wreg free
  5221  00150C  0E09               	movlw	9
  5222  00150E  2416               	addwf	?___awdiv,w,c
  5223  001510  6E1E               	movwf	___wmul@multiplier,c
  5224  001512  0E00               	movlw	0
  5225  001514  2017               	addwfc	?___awdiv+1,w,c
  5226  001516  6E1F               	movwf	___wmul@multiplier+1,c
  5227  001518  EC6C  F017         	call	___wmul	;wreg free
  5228  00151C  0E4A               	movlw	low __powers_
  5229  00151E  241E               	addwf	?___wmul,w,c
  5230  001520  6EF6               	movwf	tblptrl,c
  5231  001522  0EFE               	movlw	high __powers_
  5232  001524  201F               	addwfc	?___wmul+1,w,c
  5233  001526  6EF7               	movwf	tblptrh,c
  5234  001528                     	if	0	;There are less than 3 active tblptr bytes
  5235  001528                     	endif
  5236  001528  0009               	tblrd		*+
  5237  00152A  CFF5 F03A          	movff	tablat,___ftmul@f2
  5238  00152E  0009               	tblrd		*+
  5239  001530  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5240  001534  000A               	tblrd		*-
  5241  001536  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5242  00153A  0E00               	movlw	0
  5243  00153C  6E19               	movwf	___awdiv@divisor+1,c
  5244  00153E  0E64               	movlw	100
  5245  001540  6E18               	movwf	___awdiv@divisor,c
  5246  001542  0100               	movlb	0	; () banked
  5247  001544  51B9               	movf	scale@scl& (0+255),w,b
  5248  001546  6E16               	movwf	___awdiv@dividend,c
  5249  001548  6A17               	clrf	___awdiv@dividend+1,c
  5250  00154A  BE16               	btfsc	___awdiv@dividend,7,c
  5251  00154C  0617               	decf	___awdiv@dividend+1,f,c
  5252  00154E  ECBD  F014         	call	___awdiv	;wreg free
  5253  001552  0E12               	movlw	18
  5254  001554  2416               	addwf	?___awdiv,w,c
  5255  001556  6E1E               	movwf	___wmul@multiplier,c
  5256  001558  0E00               	movlw	0
  5257  00155A  2017               	addwfc	?___awdiv+1,w,c
  5258  00155C  6E1F               	movwf	___wmul@multiplier+1,c
  5259  00155E  0E00               	movlw	0
  5260  001560  6E21               	movwf	___wmul@multiplicand+1,c
  5261  001562  0E03               	movlw	3
  5262  001564  6E20               	movwf	___wmul@multiplicand,c
  5263  001566  EC6C  F017         	call	___wmul	;wreg free
  5264  00156A  0E4A               	movlw	low __powers_
  5265  00156C  241E               	addwf	?___wmul,w,c
  5266  00156E  6EF6               	movwf	tblptrl,c
  5267  001570  0EFE               	movlw	high __powers_
  5268  001572  201F               	addwfc	?___wmul+1,w,c
  5269  001574  6EF7               	movwf	tblptrh,c
  5270  001576                     	if	0	;There are less than 3 active tblptr bytes
  5271  001576                     	endif
  5272  001576  0009               	tblrd		*+
  5273  001578  CFF5 F037          	movff	tablat,___ftmul@f1
  5274  00157C  0009               	tblrd		*+
  5275  00157E  CFF5 F038          	movff	tablat,___ftmul@f1+1
  5276  001582  000A               	tblrd		*-
  5277  001584  CFF5 F039          	movff	tablat,___ftmul@f1+2
  5278  001588  EC21  F012         	call	___ftmul	;wreg free
  5279  00158C  C037  F0B6         	movff	?___ftmul,_scale$2552
  5280  001590  C038  F0B7         	movff	?___ftmul+1,_scale$2552+1
  5281  001594  C039  F0B8         	movff	?___ftmul+2,_scale$2552+2
  5282                           
  5283                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5284  001598  C0B6  F037         	movff	_scale$2552,___ftmul@f1
  5285  00159C  C0B7  F038         	movff	_scale$2552+1,___ftmul@f1+1
  5286  0015A0  C0B8  F039         	movff	_scale$2552+2,___ftmul@f1+2
  5287  0015A4  0E00               	movlw	0
  5288  0015A6  6E21               	movwf	___wmul@multiplicand+1,c
  5289  0015A8  0E03               	movlw	3
  5290  0015AA  6E20               	movwf	___wmul@multiplicand,c
  5291  0015AC  0E00               	movlw	0
  5292  0015AE  6E13               	movwf	___awmod@divisor+1,c
  5293  0015B0  0E0A               	movlw	10
  5294  0015B2  6E12               	movwf	___awmod@divisor,c
  5295  0015B4  0100               	movlb	0	; () banked
  5296  0015B6  51B9               	movf	scale@scl& (0+255),w,b
  5297  0015B8  6E10               	movwf	___awmod@dividend,c
  5298  0015BA  6A11               	clrf	___awmod@dividend+1,c
  5299  0015BC  BE10               	btfsc	___awmod@dividend,7,c
  5300  0015BE  0611               	decf	___awmod@dividend+1,f,c
  5301  0015C0  EC80  F015         	call	___awmod	;wreg free
  5302  0015C4  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5303  0015C8  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5304  0015CC  EC6C  F017         	call	___wmul	;wreg free
  5305  0015D0  0E4A               	movlw	low __powers_
  5306  0015D2  241E               	addwf	?___wmul,w,c
  5307  0015D4  6EF6               	movwf	tblptrl,c
  5308  0015D6  0EFE               	movlw	high __powers_
  5309  0015D8  201F               	addwfc	?___wmul+1,w,c
  5310  0015DA  6EF7               	movwf	tblptrh,c
  5311  0015DC                     	if	0	;There are less than 3 active tblptr bytes
  5312  0015DC                     	endif
  5313  0015DC  0009               	tblrd		*+
  5314  0015DE  CFF5 F03A          	movff	tablat,___ftmul@f2
  5315  0015E2  0009               	tblrd		*+
  5316  0015E4  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5317  0015E8  000A               	tblrd		*-
  5318  0015EA  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5319  0015EE  EC21  F012         	call	___ftmul	;wreg free
  5320  0015F2  C037  F0B3         	movff	?___ftmul,?_scale
  5321  0015F6  C038  F0B4         	movff	?___ftmul+1,?_scale+1
  5322  0015FA  C039  F0B5         	movff	?___ftmul+2,?_scale+2
  5323  0015FE  0012               	return	
  5324  001600                     l5523:
  5325                           
  5326                           ;doprnt.c: 438: else if(scl > 10)
  5327  001600  0100               	movlb	0	; () banked
  5328  001602  51B9               	movf	scale@scl& (0+255),w,b
  5329  001604  0A80               	xorlw	128
  5330  001606  0F75               	addlw	-139
  5331  001608  A0D8               	btfss	status,0,c
  5332  00160A  D04F               	goto	l5529
  5333                           
  5334                           ; BSR set to: 0
  5335                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5336  00160C  0E00               	movlw	0
  5337  00160E  6E19               	movwf	___awdiv@divisor+1,c
  5338  001610  0E0A               	movlw	10
  5339  001612  6E18               	movwf	___awdiv@divisor,c
  5340  001614  0100               	movlb	0	; () banked
  5341  001616  51B9               	movf	scale@scl& (0+255),w,b
  5342  001618  6E16               	movwf	___awdiv@dividend,c
  5343  00161A  6A17               	clrf	___awdiv@dividend+1,c
  5344  00161C  BE16               	btfsc	___awdiv@dividend,7,c
  5345  00161E  0617               	decf	___awdiv@dividend+1,f,c
  5346  001620  ECBD  F014         	call	___awdiv	;wreg free
  5347  001624  0E09               	movlw	9
  5348  001626  2416               	addwf	?___awdiv,w,c
  5349  001628  6E1E               	movwf	___wmul@multiplier,c
  5350  00162A  0E00               	movlw	0
  5351  00162C  2017               	addwfc	?___awdiv+1,w,c
  5352  00162E  6E1F               	movwf	___wmul@multiplier+1,c
  5353  001630  0E00               	movlw	0
  5354  001632  6E21               	movwf	___wmul@multiplicand+1,c
  5355  001634  0E03               	movlw	3
  5356  001636  6E20               	movwf	___wmul@multiplicand,c
  5357  001638  EC6C  F017         	call	___wmul	;wreg free
  5358  00163C  0E4A               	movlw	low __powers_
  5359  00163E  241E               	addwf	?___wmul,w,c
  5360  001640  6EF6               	movwf	tblptrl,c
  5361  001642  0EFE               	movlw	high __powers_
  5362  001644  201F               	addwfc	?___wmul+1,w,c
  5363  001646  6EF7               	movwf	tblptrh,c
  5364  001648                     	if	0	;There are less than 3 active tblptr bytes
  5365  001648                     	endif
  5366  001648  0009               	tblrd		*+
  5367  00164A  CFF5 F037          	movff	tablat,___ftmul@f1
  5368  00164E  0009               	tblrd		*+
  5369  001650  CFF5 F038          	movff	tablat,___ftmul@f1+1
  5370  001654  000A               	tblrd		*-
  5371  001656  CFF5 F039          	movff	tablat,___ftmul@f1+2
  5372  00165A  0E00               	movlw	0
  5373  00165C  6E21               	movwf	___wmul@multiplicand+1,c
  5374  00165E  0E03               	movlw	3
  5375  001660  6E20               	movwf	___wmul@multiplicand,c
  5376  001662  0E00               	movlw	0
  5377  001664  6E13               	movwf	___awmod@divisor+1,c
  5378  001666  0E0A               	movlw	10
  5379  001668  6E12               	movwf	___awmod@divisor,c
  5380  00166A  0100               	movlb	0	; () banked
  5381  00166C  51B9               	movf	scale@scl& (0+255),w,b
  5382  00166E  6E10               	movwf	___awmod@dividend,c
  5383  001670  6A11               	clrf	___awmod@dividend+1,c
  5384  001672  BE10               	btfsc	___awmod@dividend,7,c
  5385  001674  0611               	decf	___awmod@dividend+1,f,c
  5386  001676  EC80  F015         	call	___awmod	;wreg free
  5387  00167A  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5388  00167E  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5389  001682  EC6C  F017         	call	___wmul	;wreg free
  5390  001686  0E4A               	movlw	low __powers_
  5391  001688  241E               	addwf	?___wmul,w,c
  5392  00168A  6EF6               	movwf	tblptrl,c
  5393  00168C  0EFE               	movlw	high __powers_
  5394  00168E  201F               	addwfc	?___wmul+1,w,c
  5395  001690  6EF7               	movwf	tblptrh,c
  5396  001692                     	if	0	;There are less than 3 active tblptr bytes
  5397  001692                     	endif
  5398  001692  0009               	tblrd		*+
  5399  001694  CFF5 F03A          	movff	tablat,___ftmul@f2
  5400  001698  0009               	tblrd		*+
  5401  00169A  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5402  00169E  000A               	tblrd		*-
  5403  0016A0  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5404  0016A4  EC21  F012         	call	___ftmul	;wreg free
  5405  0016A8  D7A4               	goto	L4
  5406  0016AA                     l5529:
  5407                           
  5408                           ;doprnt.c: 440: return _powers_[scl];
  5409  0016AA  0100               	movlb	0	; () banked
  5410  0016AC  51B9               	movf	scale@scl& (0+255),w,b
  5411  0016AE  0D03               	mullw	3
  5412  0016B0  0E4A               	movlw	low __powers_
  5413  0016B2  24F3               	addwf	prodl,w,c
  5414  0016B4  6EF6               	movwf	tblptrl,c
  5415  0016B6  0EFE               	movlw	high __powers_
  5416  0016B8  20F4               	addwfc	prodh,w,c
  5417  0016BA  6EF7               	movwf	tblptrh,c
  5418  0016BC                     	if	0	;There are less than 3 active tblptr bytes
  5419  0016BC                     	endif
  5420  0016BC  0009               	tblrd		*+
  5421  0016BE  CFF5 F0B3          	movff	tablat,?_scale
  5422  0016C2  0009               	tblrd		*+
  5423  0016C4  CFF5 F0B4          	movff	tablat,?_scale+1
  5424  0016C8  000A               	tblrd		*-
  5425  0016CA  CFF5 F0B5          	movff	tablat,?_scale+2
  5426  0016CE  0012               	return	
  5427  0016D0                     __end_of_scale:
  5428                           	opt stack 0
  5429                           tblptru	equ	0xFF8
  5430                           tblptrh	equ	0xFF7
  5431                           tblptrl	equ	0xFF6
  5432                           tablat	equ	0xFF5
  5433                           prodh	equ	0xFF4
  5434                           prodl	equ	0xFF3
  5435                           postinc0	equ	0xFEE
  5436                           wreg	equ	0xFE8
  5437                           indf1	equ	0xFE7
  5438                           postdec1	equ	0xFE5
  5439                           fsr1h	equ	0xFE2
  5440                           fsr1l	equ	0xFE1
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           fsr2h	equ	0xFDA
  5445                           fsr2l	equ	0xFD9
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function _isdigit *****************
  5449 ;; Defined at:
  5450 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  c               1    wreg     unsigned char 
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;  c               1   17[COMRAM] unsigned char 
  5455 ;; Return value:  Size  Location     Type
  5456 ;;		None               void
  5457 ;; Registers used:
  5458 ;;		wreg, status,2, status,0
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;Total ram usage:        3 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:    2
  5471 ;; This function calls:
  5472 ;;		Nothing
  5473 ;; This function is called by:
  5474 ;;		_sprintf
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	text5
  5479  002F88                     __ptext5:
  5480                           	opt stack 0
  5481  002F88                     _isdigit:
  5482                           	opt stack 26
  5483                           
  5484                           ;incstack = 0
  5485                           ;isdigit@c stored from wreg
  5486  002F88  6E12               	movwf	isdigit@c,c
  5487  002F8A  0E00               	movlw	0
  5488  002F8C  6E11               	movwf	_isdigit$2142,c
  5489  002F8E  0E3A               	movlw	58
  5490  002F90  6012               	cpfslt	isdigit@c,c
  5491  002F92  D005               	goto	l5541
  5492  002F94  0E2F               	movlw	47
  5493  002F96  6412               	cpfsgt	isdigit@c,c
  5494  002F98  D002               	goto	l5541
  5495  002F9A  0E01               	movlw	1
  5496  002F9C  6E11               	movwf	_isdigit$2142,c
  5497  002F9E                     l5541:
  5498  002F9E  C011  F010         	movff	_isdigit$2142,??_isdigit
  5499  002FA2  3010               	rrcf	??_isdigit,w,c
  5500  002FA4  0012               	return	
  5501  002FA6                     __end_of_isdigit:
  5502                           	opt stack 0
  5503                           tblptru	equ	0xFF8
  5504                           tblptrh	equ	0xFF7
  5505                           tblptrl	equ	0xFF6
  5506                           tablat	equ	0xFF5
  5507                           prodh	equ	0xFF4
  5508                           prodl	equ	0xFF3
  5509                           postinc0	equ	0xFEE
  5510                           wreg	equ	0xFE8
  5511                           indf1	equ	0xFE7
  5512                           postdec1	equ	0xFE5
  5513                           fsr1h	equ	0xFE2
  5514                           fsr1l	equ	0xFE1
  5515                           indf2	equ	0xFDF
  5516                           postinc2	equ	0xFDE
  5517                           postdec2	equ	0xFDD
  5518                           fsr2h	equ	0xFDA
  5519                           fsr2l	equ	0xFD9
  5520                           status	equ	0xFD8
  5521                           
  5522 ;; *************** function _fround *****************
  5523 ;; Defined at:
  5524 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  prec            1    wreg     unsigned char 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  prec            1   15[BANK0 ] unsigned char 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;                  3    6[BANK0 ] unsigned char 
  5531 ;; Registers used:
  5532 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5538 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5539 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5542 ;;Total ram usage:       10 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:    4
  5545 ;; This function calls:
  5546 ;;		___awdiv
  5547 ;;		___awmod
  5548 ;;		___ftmul
  5549 ;;		___wmul
  5550 ;; This function is called by:
  5551 ;;		_sprintf
  5552 ;; This function uses a non-reentrant model
  5553 ;;
  5554                           
  5555                           	psect	text6
  5556  0016D0                     __ptext6:
  5557                           	opt stack 0
  5558  0016D0                     _fround:
  5559                           	opt stack 24
  5560                           
  5561                           ;incstack = 0
  5562                           ;fround@prec stored from wreg
  5563  0016D0  0100               	movlb	0	; () banked
  5564  0016D2  6FBC               	movwf	fround@prec& (0+255),b
  5565                           
  5566                           ;doprnt.c: 413: if(prec>=110)
  5567  0016D4  0E6D               	movlw	109
  5568  0016D6  0100               	movlb	0	; () banked
  5569  0016D8  65BC               	cpfsgt	fround@prec& (0+255),b
  5570  0016DA  D09F               	goto	l5483
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5574  0016DC  0E00               	movlw	0
  5575  0016DE  6E21               	movwf	___wmul@multiplicand+1,c
  5576  0016E0  0E03               	movlw	3
  5577  0016E2  6E20               	movwf	___wmul@multiplicand,c
  5578  0016E4  0E00               	movlw	0
  5579  0016E6  6E19               	movwf	___awdiv@divisor+1,c
  5580  0016E8  0E0A               	movlw	10
  5581  0016EA  6E18               	movwf	___awdiv@divisor,c
  5582  0016EC  0E00               	movlw	0
  5583  0016EE  6E13               	movwf	___awmod@divisor+1,c
  5584  0016F0  0E64               	movlw	100
  5585  0016F2  6E12               	movwf	___awmod@divisor,c
  5586  0016F4  C0BC  F010         	movff	fround@prec,___awmod@dividend
  5587  0016F8  6A11               	clrf	___awmod@dividend+1,c
  5588  0016FA  EC80  F015         	call	___awmod	;wreg free
  5589  0016FE  C010  F016         	movff	?___awmod,___awdiv@dividend
  5590  001702  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  5591  001706  ECBD  F014         	call	___awdiv	;wreg free
  5592  00170A  0E09               	movlw	9
  5593  00170C  2416               	addwf	?___awdiv,w,c
  5594  00170E  6E1E               	movwf	___wmul@multiplier,c
  5595  001710  0E00               	movlw	0
  5596  001712  2017               	addwfc	?___awdiv+1,w,c
  5597  001714  6E1F               	movwf	___wmul@multiplier+1,c
  5598  001716  EC6C  F017         	call	___wmul	;wreg free
  5599  00171A  0E23               	movlw	low __npowers_
  5600  00171C  241E               	addwf	?___wmul,w,c
  5601  00171E  6EF6               	movwf	tblptrl,c
  5602  001720  0EFE               	movlw	high __npowers_
  5603  001722  201F               	addwfc	?___wmul+1,w,c
  5604  001724  6EF7               	movwf	tblptrh,c
  5605  001726                     	if	0	;There are less than 3 active tblptr bytes
  5606  001726                     	endif
  5607  001726  0009               	tblrd		*+
  5608  001728  CFF5 F03A          	movff	tablat,___ftmul@f2
  5609  00172C  0009               	tblrd		*+
  5610  00172E  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5611  001732  000A               	tblrd		*-
  5612  001734  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5613  001738  0E00               	movlw	0
  5614  00173A  6E19               	movwf	___awdiv@divisor+1,c
  5615  00173C  0E64               	movlw	100
  5616  00173E  6E18               	movwf	___awdiv@divisor,c
  5617  001740  C0BC  F016         	movff	fround@prec,___awdiv@dividend
  5618  001744  6A17               	clrf	___awdiv@dividend+1,c
  5619  001746  ECBD  F014         	call	___awdiv	;wreg free
  5620  00174A  0E12               	movlw	18
  5621  00174C  2416               	addwf	?___awdiv,w,c
  5622  00174E  6E1E               	movwf	___wmul@multiplier,c
  5623  001750  0E00               	movlw	0
  5624  001752  2017               	addwfc	?___awdiv+1,w,c
  5625  001754  6E1F               	movwf	___wmul@multiplier+1,c
  5626  001756  0E00               	movlw	0
  5627  001758  6E21               	movwf	___wmul@multiplicand+1,c
  5628  00175A  0E03               	movlw	3
  5629  00175C  6E20               	movwf	___wmul@multiplicand,c
  5630  00175E  EC6C  F017         	call	___wmul	;wreg free
  5631  001762  0E23               	movlw	low __npowers_
  5632  001764  241E               	addwf	?___wmul,w,c
  5633  001766  6EF6               	movwf	tblptrl,c
  5634  001768  0EFE               	movlw	high __npowers_
  5635  00176A  201F               	addwfc	?___wmul+1,w,c
  5636  00176C  6EF7               	movwf	tblptrh,c
  5637  00176E                     	if	0	;There are less than 3 active tblptr bytes
  5638  00176E                     	endif
  5639  00176E  0009               	tblrd		*+
  5640  001770  CFF5 F037          	movff	tablat,___ftmul@f1
  5641  001774  0009               	tblrd		*+
  5642  001776  CFF5 F038          	movff	tablat,___ftmul@f1+1
  5643  00177A  000A               	tblrd		*-
  5644  00177C  CFF5 F039          	movff	tablat,___ftmul@f1+2
  5645  001780  EC21  F012         	call	___ftmul	;wreg free
  5646  001784  C037  F0B9         	movff	?___ftmul,_fround$2550
  5647  001788  C038  F0BA         	movff	?___ftmul+1,_fround$2550+1
  5648  00178C  C039  F0BB         	movff	?___ftmul+2,_fround$2550+2
  5649                           
  5650                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5651  001790  0E00               	movlw	0
  5652  001792  6E21               	movwf	___wmul@multiplicand+1,c
  5653  001794  0E03               	movlw	3
  5654  001796  6E20               	movwf	___wmul@multiplicand,c
  5655  001798  0E00               	movlw	0
  5656  00179A  6E13               	movwf	___awmod@divisor+1,c
  5657  00179C  0E0A               	movlw	10
  5658  00179E  6E12               	movwf	___awmod@divisor,c
  5659  0017A0  C0BC  F010         	movff	fround@prec,___awmod@dividend
  5660  0017A4  6A11               	clrf	___awmod@dividend+1,c
  5661  0017A6  EC80  F015         	call	___awmod	;wreg free
  5662  0017AA  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5663  0017AE  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5664  0017B2  EC6C  F017         	call	___wmul	;wreg free
  5665  0017B6  0E23               	movlw	low __npowers_
  5666  0017B8  241E               	addwf	?___wmul,w,c
  5667  0017BA  6EF6               	movwf	tblptrl,c
  5668  0017BC  0EFE               	movlw	high __npowers_
  5669  0017BE  201F               	addwfc	?___wmul+1,w,c
  5670  0017C0  6EF7               	movwf	tblptrh,c
  5671  0017C2                     	if	0	;There are less than 3 active tblptr bytes
  5672  0017C2                     	endif
  5673  0017C2  0009               	tblrd		*+
  5674  0017C4  CFF5 F03A          	movff	tablat,___ftmul@f2
  5675  0017C8  0009               	tblrd		*+
  5676  0017CA  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5677  0017CE  000A               	tblrd		*-
  5678  0017D0  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5679  0017D4  C0B9  F037         	movff	_fround$2550,___ftmul@f1
  5680  0017D8  C0BA  F038         	movff	_fround$2550+1,___ftmul@f1+1
  5681  0017DC  C0BB  F039         	movff	_fround$2550+2,___ftmul@f1+2
  5682  0017E0  EC21  F012         	call	___ftmul	;wreg free
  5683  0017E4  C037  F0B6         	movff	?___ftmul,_fround$2551
  5684  0017E8  C038  F0B7         	movff	?___ftmul+1,_fround$2551+1
  5685  0017EC  C039  F0B8         	movff	?___ftmul+2,_fround$2551+2
  5686                           
  5687                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5688  0017F0  C0B6  F037         	movff	_fround$2551,___ftmul@f1
  5689  0017F4  C0B7  F038         	movff	_fround$2551+1,___ftmul@f1+1
  5690  0017F8  C0B8  F039         	movff	_fround$2551+2,___ftmul@f1+2
  5691  0017FC  0E00               	movlw	0
  5692  0017FE  6E3A               	movwf	___ftmul@f2,c
  5693  001800  0E00               	movlw	0
  5694  001802  6E3B               	movwf	___ftmul@f2+1,c
  5695  001804  0E3F               	movlw	63
  5696  001806  6E3C               	movwf	___ftmul@f2+2,c
  5697  001808  EC21  F012         	call	___ftmul	;wreg free
  5698  00180C  C037  F0B3         	movff	?___ftmul,?_fround
  5699  001810  C038  F0B4         	movff	?___ftmul+1,?_fround+1
  5700  001814  C039  F0B5         	movff	?___ftmul+2,?_fround+2
  5701  001818  0012               	return	
  5702  00181A                     l5483:
  5703                           
  5704                           ;doprnt.c: 415: else if(prec > 10)
  5705  00181A  0E0A               	movlw	10
  5706  00181C  0100               	movlb	0	; () banked
  5707  00181E  65BC               	cpfsgt	fround@prec& (0+255),b
  5708  001820  D05D               	goto	l5491
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5712  001822  0E00               	movlw	0
  5713  001824  6E21               	movwf	___wmul@multiplicand+1,c
  5714  001826  0E03               	movlw	3
  5715  001828  6E20               	movwf	___wmul@multiplicand,c
  5716  00182A  0E00               	movlw	0
  5717  00182C  6E13               	movwf	___awmod@divisor+1,c
  5718  00182E  0E0A               	movlw	10
  5719  001830  6E12               	movwf	___awmod@divisor,c
  5720  001832  C0BC  F010         	movff	fround@prec,___awmod@dividend
  5721  001836  6A11               	clrf	___awmod@dividend+1,c
  5722  001838  EC80  F015         	call	___awmod	;wreg free
  5723  00183C  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5724  001840  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5725  001844  EC6C  F017         	call	___wmul	;wreg free
  5726  001848  0E23               	movlw	low __npowers_
  5727  00184A  241E               	addwf	?___wmul,w,c
  5728  00184C  6EF6               	movwf	tblptrl,c
  5729  00184E  0EFE               	movlw	high __npowers_
  5730  001850  201F               	addwfc	?___wmul+1,w,c
  5731  001852  6EF7               	movwf	tblptrh,c
  5732  001854                     	if	0	;There are less than 3 active tblptr bytes
  5733  001854                     	endif
  5734  001854  0009               	tblrd		*+
  5735  001856  CFF5 F03A          	movff	tablat,___ftmul@f2
  5736  00185A  0009               	tblrd		*+
  5737  00185C  CFF5 F03B          	movff	tablat,___ftmul@f2+1
  5738  001860  000A               	tblrd		*-
  5739  001862  CFF5 F03C          	movff	tablat,___ftmul@f2+2
  5740  001866  0E00               	movlw	0
  5741  001868  6E19               	movwf	___awdiv@divisor+1,c
  5742  00186A  0E0A               	movlw	10
  5743  00186C  6E18               	movwf	___awdiv@divisor,c
  5744  00186E  C0BC  F016         	movff	fround@prec,___awdiv@dividend
  5745  001872  6A17               	clrf	___awdiv@dividend+1,c
  5746  001874  ECBD  F014         	call	___awdiv	;wreg free
  5747  001878  0E09               	movlw	9
  5748  00187A  2416               	addwf	?___awdiv,w,c
  5749  00187C  6E1E               	movwf	___wmul@multiplier,c
  5750  00187E  0E00               	movlw	0
  5751  001880  2017               	addwfc	?___awdiv+1,w,c
  5752  001882  6E1F               	movwf	___wmul@multiplier+1,c
  5753  001884  0E00               	movlw	0
  5754  001886  6E21               	movwf	___wmul@multiplicand+1,c
  5755  001888  0E03               	movlw	3
  5756  00188A  6E20               	movwf	___wmul@multiplicand,c
  5757  00188C  EC6C  F017         	call	___wmul	;wreg free
  5758  001890  0E23               	movlw	low __npowers_
  5759  001892  241E               	addwf	?___wmul,w,c
  5760  001894  6EF6               	movwf	tblptrl,c
  5761  001896  0EFE               	movlw	high __npowers_
  5762  001898  201F               	addwfc	?___wmul+1,w,c
  5763  00189A  6EF7               	movwf	tblptrh,c
  5764  00189C                     	if	0	;There are less than 3 active tblptr bytes
  5765  00189C                     	endif
  5766  00189C  0009               	tblrd		*+
  5767  00189E  CFF5 F037          	movff	tablat,___ftmul@f1
  5768  0018A2  0009               	tblrd		*+
  5769  0018A4  CFF5 F038          	movff	tablat,___ftmul@f1+1
  5770  0018A8  000A               	tblrd		*-
  5771  0018AA  CFF5 F039          	movff	tablat,___ftmul@f1+2
  5772  0018AE  EC21  F012         	call	___ftmul	;wreg free
  5773  0018B2  C037  F0B9         	movff	?___ftmul,_fround$2550
  5774  0018B6  C038  F0BA         	movff	?___ftmul+1,_fround$2550+1
  5775  0018BA  C039  F0BB         	movff	?___ftmul+2,_fround$2550+2
  5776                           
  5777                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5778  0018BE  C0B9  F037         	movff	_fround$2550,___ftmul@f1
  5779  0018C2  C0BA  F038         	movff	_fround$2550+1,___ftmul@f1+1
  5780  0018C6  C0BB  F039         	movff	_fround$2550+2,___ftmul@f1+2
  5781  0018CA  0E00               	movlw	0
  5782  0018CC  6E3A               	movwf	___ftmul@f2,c
  5783  0018CE  0E00               	movlw	0
  5784  0018D0  6E3B               	movwf	___ftmul@f2+1,c
  5785  0018D2  0E3F               	movlw	63
  5786  0018D4  6E3C               	movwf	___ftmul@f2+2,c
  5787  0018D6  EC21  F012         	call	___ftmul	;wreg free
  5788  0018DA  D798               	goto	L5
  5789  0018DC                     l5491:
  5790                           
  5791                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5792  0018DC  0100               	movlb	0	; () banked
  5793  0018DE  51BC               	movf	fround@prec& (0+255),w,b
  5794  0018E0  0D03               	mullw	3
  5795  0018E2  0E23               	movlw	low __npowers_
  5796  0018E4  24F3               	addwf	prodl,w,c
  5797  0018E6  6EF6               	movwf	tblptrl,c
  5798  0018E8  0EFE               	movlw	high __npowers_
  5799  0018EA  20F4               	addwfc	prodh,w,c
  5800  0018EC  6EF7               	movwf	tblptrh,c
  5801  0018EE                     	if	0	;There are less than 3 active tblptr bytes
  5802  0018EE                     	endif
  5803  0018EE  0009               	tblrd		*+
  5804  0018F0  CFF5 F037          	movff	tablat,___ftmul@f1
  5805  0018F4  0009               	tblrd		*+
  5806  0018F6  CFF5 F038          	movff	tablat,___ftmul@f1+1
  5807  0018FA  000A               	tblrd		*-
  5808  0018FC  CFF5 F039          	movff	tablat,___ftmul@f1+2
  5809  001900  0E00               	movlw	0
  5810  001902  6E3A               	movwf	___ftmul@f2,c
  5811  001904  0E00               	movlw	0
  5812  001906  6E3B               	movwf	___ftmul@f2+1,c
  5813  001908  0E3F               	movlw	63
  5814  00190A  6E3C               	movwf	___ftmul@f2+2,c
  5815  00190C  EC21  F012         	call	___ftmul	;wreg free
  5816  001910  C037  F0B3         	movff	?___ftmul,?_fround
  5817  001914  C038  F0B4         	movff	?___ftmul+1,?_fround+1
  5818  001918  C039  F0B5         	movff	?___ftmul+2,?_fround+2
  5819  00191C  0012               	return	
  5820  00191E                     __end_of_fround:
  5821                           	opt stack 0
  5822                           tblptru	equ	0xFF8
  5823                           tblptrh	equ	0xFF7
  5824                           tblptrl	equ	0xFF6
  5825                           tablat	equ	0xFF5
  5826                           prodh	equ	0xFF4
  5827                           prodl	equ	0xFF3
  5828                           postinc0	equ	0xFEE
  5829                           wreg	equ	0xFE8
  5830                           indf1	equ	0xFE7
  5831                           postdec1	equ	0xFE5
  5832                           fsr1h	equ	0xFE2
  5833                           fsr1l	equ	0xFE1
  5834                           indf2	equ	0xFDF
  5835                           postinc2	equ	0xFDE
  5836                           postdec2	equ	0xFDD
  5837                           fsr2h	equ	0xFDA
  5838                           fsr2l	equ	0xFD9
  5839                           status	equ	0xFD8
  5840                           
  5841 ;; *************** function ___awmod *****************
  5842 ;; Defined at:
  5843 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;  dividend        2   15[COMRAM] int 
  5846 ;;  divisor         2   17[COMRAM] int 
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;  sign            1   20[COMRAM] unsigned char 
  5849 ;;  counter         1   19[COMRAM] unsigned char 
  5850 ;; Return value:  Size  Location     Type
  5851 ;;                  2   15[COMRAM] int 
  5852 ;; Registers used:
  5853 ;;		wreg, status,2, status,0
  5854 ;; Tracked objects:
  5855 ;;		On entry : 0/0
  5856 ;;		On exit  : 0/0
  5857 ;;		Unchanged: 0/0
  5858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5859 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5862 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5863 ;;Total ram usage:        6 bytes
  5864 ;; Hardware stack levels used:    1
  5865 ;; Hardware stack levels required when called:    2
  5866 ;; This function calls:
  5867 ;;		Nothing
  5868 ;; This function is called by:
  5869 ;;		_fround
  5870 ;;		_scale
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           	psect	text7
  5875  002B00                     __ptext7:
  5876                           	opt stack 0
  5877  002B00                     ___awmod:
  5878                           	opt stack 25
  5879                           
  5880                           ;incstack = 0
  5881  002B00  0E00               	movlw	0
  5882  002B02  6E15               	movwf	___awmod@sign,c
  5883  002B04  AE11               	btfss	___awmod@dividend+1,7,c
  5884  002B06  D006               	goto	l5321
  5885  002B08  6C10               	negf	___awmod@dividend,c
  5886  002B0A  1E11               	comf	___awmod@dividend+1,f,c
  5887  002B0C  B0D8               	btfsc	status,0,c
  5888  002B0E  2A11               	incf	___awmod@dividend+1,f,c
  5889  002B10  0E01               	movlw	1
  5890  002B12  6E15               	movwf	___awmod@sign,c
  5891  002B14                     l5321:
  5892  002B14  AE13               	btfss	___awmod@divisor+1,7,c
  5893  002B16  D004               	goto	l5325
  5894  002B18  6C12               	negf	___awmod@divisor,c
  5895  002B1A  1E13               	comf	___awmod@divisor+1,f,c
  5896  002B1C  B0D8               	btfsc	status,0,c
  5897  002B1E  2A13               	incf	___awmod@divisor+1,f,c
  5898  002B20                     l5325:
  5899  002B20  5012               	movf	___awmod@divisor,w,c
  5900  002B22  1013               	iorwf	___awmod@divisor+1,w,c
  5901  002B24  B4D8               	btfsc	status,2,c
  5902  002B26  D018               	goto	l5341
  5903  002B28  0E01               	movlw	1
  5904  002B2A  6E14               	movwf	___awmod@counter,c
  5905  002B2C  D004               	goto	l5331
  5906  002B2E                     l5329:
  5907  002B2E  90D8               	bcf	status,0,c
  5908  002B30  3612               	rlcf	___awmod@divisor,f,c
  5909  002B32  3613               	rlcf	___awmod@divisor+1,f,c
  5910  002B34  2A14               	incf	___awmod@counter,f,c
  5911  002B36                     l5331:
  5912  002B36  AE13               	btfss	___awmod@divisor+1,7,c
  5913  002B38  D7FA               	goto	l5329
  5914  002B3A                     l5333:
  5915  002B3A  5012               	movf	___awmod@divisor,w,c
  5916  002B3C  5C10               	subwf	___awmod@dividend,w,c
  5917  002B3E  5013               	movf	___awmod@divisor+1,w,c
  5918  002B40  5811               	subwfb	___awmod@dividend+1,w,c
  5919  002B42  A0D8               	btfss	status,0,c
  5920  002B44  D004               	goto	l5337
  5921  002B46  5012               	movf	___awmod@divisor,w,c
  5922  002B48  5E10               	subwf	___awmod@dividend,f,c
  5923  002B4A  5013               	movf	___awmod@divisor+1,w,c
  5924  002B4C  5A11               	subwfb	___awmod@dividend+1,f,c
  5925  002B4E                     l5337:
  5926  002B4E  90D8               	bcf	status,0,c
  5927  002B50  3213               	rrcf	___awmod@divisor+1,f,c
  5928  002B52  3212               	rrcf	___awmod@divisor,f,c
  5929  002B54  2E14               	decfsz	___awmod@counter,f,c
  5930  002B56  D7F1               	goto	l5333
  5931  002B58                     l5341:
  5932  002B58  5015               	movf	___awmod@sign,w,c
  5933  002B5A  B4D8               	btfsc	status,2,c
  5934  002B5C  D004               	goto	l5345
  5935  002B5E  6C10               	negf	___awmod@dividend,c
  5936  002B60  1E11               	comf	___awmod@dividend+1,f,c
  5937  002B62  B0D8               	btfsc	status,0,c
  5938  002B64  2A11               	incf	___awmod@dividend+1,f,c
  5939  002B66                     l5345:
  5940  002B66  C010  F010         	movff	___awmod@dividend,?___awmod
  5941  002B6A  C011  F011         	movff	___awmod@dividend+1,?___awmod+1
  5942  002B6E  0012               	return	
  5943  002B70                     __end_of___awmod:
  5944                           	opt stack 0
  5945                           tblptru	equ	0xFF8
  5946                           tblptrh	equ	0xFF7
  5947                           tblptrl	equ	0xFF6
  5948                           tablat	equ	0xFF5
  5949                           prodh	equ	0xFF4
  5950                           prodl	equ	0xFF3
  5951                           postinc0	equ	0xFEE
  5952                           wreg	equ	0xFE8
  5953                           indf1	equ	0xFE7
  5954                           postdec1	equ	0xFE5
  5955                           fsr1h	equ	0xFE2
  5956                           fsr1l	equ	0xFE1
  5957                           indf2	equ	0xFDF
  5958                           postinc2	equ	0xFDE
  5959                           postdec2	equ	0xFDD
  5960                           fsr2h	equ	0xFDA
  5961                           fsr2l	equ	0xFD9
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function ___awdiv *****************
  5965 ;; Defined at:
  5966 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  dividend        2   21[COMRAM] int 
  5969 ;;  divisor         2   23[COMRAM] int 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  quotient        2   27[COMRAM] int 
  5972 ;;  sign            1   26[COMRAM] unsigned char 
  5973 ;;  counter         1   25[COMRAM] unsigned char 
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  2   21[COMRAM] int 
  5976 ;; Registers used:
  5977 ;;		wreg, status,2, status,0
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5983 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;Total ram usage:        8 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    2
  5990 ;; This function calls:
  5991 ;;		Nothing
  5992 ;; This function is called by:
  5993 ;;		_fround
  5994 ;;		_scale
  5995 ;;		_sprintf
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           	psect	text8
  6000  00297A                     __ptext8:
  6001                           	opt stack 0
  6002  00297A                     ___awdiv:
  6003                           	opt stack 25
  6004                           
  6005                           ;incstack = 0
  6006  00297A  0E00               	movlw	0
  6007  00297C  6E1B               	movwf	___awdiv@sign,c
  6008  00297E  AE19               	btfss	___awdiv@divisor+1,7,c
  6009  002980  D006               	goto	l5277
  6010  002982  6C18               	negf	___awdiv@divisor,c
  6011  002984  1E19               	comf	___awdiv@divisor+1,f,c
  6012  002986  B0D8               	btfsc	status,0,c
  6013  002988  2A19               	incf	___awdiv@divisor+1,f,c
  6014  00298A  0E01               	movlw	1
  6015  00298C  6E1B               	movwf	___awdiv@sign,c
  6016  00298E                     l5277:
  6017  00298E  AE17               	btfss	___awdiv@dividend+1,7,c
  6018  002990  D006               	goto	l5283
  6019  002992  6C16               	negf	___awdiv@dividend,c
  6020  002994  1E17               	comf	___awdiv@dividend+1,f,c
  6021  002996  B0D8               	btfsc	status,0,c
  6022  002998  2A17               	incf	___awdiv@dividend+1,f,c
  6023  00299A  0E01               	movlw	1
  6024  00299C  1A1B               	xorwf	___awdiv@sign,f,c
  6025  00299E                     l5283:
  6026  00299E  0E00               	movlw	0
  6027  0029A0  6E1D               	movwf	___awdiv@quotient+1,c
  6028  0029A2  0E00               	movlw	0
  6029  0029A4  6E1C               	movwf	___awdiv@quotient,c
  6030  0029A6  5018               	movf	___awdiv@divisor,w,c
  6031  0029A8  1019               	iorwf	___awdiv@divisor+1,w,c
  6032  0029AA  B4D8               	btfsc	status,2,c
  6033  0029AC  D01C               	goto	l5305
  6034  0029AE  0E01               	movlw	1
  6035  0029B0  6E1A               	movwf	___awdiv@counter,c
  6036  0029B2  D004               	goto	l5291
  6037  0029B4                     l5289:
  6038  0029B4  90D8               	bcf	status,0,c
  6039  0029B6  3618               	rlcf	___awdiv@divisor,f,c
  6040  0029B8  3619               	rlcf	___awdiv@divisor+1,f,c
  6041  0029BA  2A1A               	incf	___awdiv@counter,f,c
  6042  0029BC                     l5291:
  6043  0029BC  AE19               	btfss	___awdiv@divisor+1,7,c
  6044  0029BE  D7FA               	goto	l5289
  6045  0029C0                     l5293:
  6046  0029C0  90D8               	bcf	status,0,c
  6047  0029C2  361C               	rlcf	___awdiv@quotient,f,c
  6048  0029C4  361D               	rlcf	___awdiv@quotient+1,f,c
  6049  0029C6  5018               	movf	___awdiv@divisor,w,c
  6050  0029C8  5C16               	subwf	___awdiv@dividend,w,c
  6051  0029CA  5019               	movf	___awdiv@divisor+1,w,c
  6052  0029CC  5817               	subwfb	___awdiv@dividend+1,w,c
  6053  0029CE  A0D8               	btfss	status,0,c
  6054  0029D0  D005               	goto	l5301
  6055  0029D2  5018               	movf	___awdiv@divisor,w,c
  6056  0029D4  5E16               	subwf	___awdiv@dividend,f,c
  6057  0029D6  5019               	movf	___awdiv@divisor+1,w,c
  6058  0029D8  5A17               	subwfb	___awdiv@dividend+1,f,c
  6059  0029DA  801C               	bsf	___awdiv@quotient,0,c
  6060  0029DC                     l5301:
  6061  0029DC  90D8               	bcf	status,0,c
  6062  0029DE  3219               	rrcf	___awdiv@divisor+1,f,c
  6063  0029E0  3218               	rrcf	___awdiv@divisor,f,c
  6064  0029E2  2E1A               	decfsz	___awdiv@counter,f,c
  6065  0029E4  D7ED               	goto	l5293
  6066  0029E6                     l5305:
  6067  0029E6  501B               	movf	___awdiv@sign,w,c
  6068  0029E8  B4D8               	btfsc	status,2,c
  6069  0029EA  D004               	goto	l5309
  6070  0029EC  6C1C               	negf	___awdiv@quotient,c
  6071  0029EE  1E1D               	comf	___awdiv@quotient+1,f,c
  6072  0029F0  B0D8               	btfsc	status,0,c
  6073  0029F2  2A1D               	incf	___awdiv@quotient+1,f,c
  6074  0029F4                     l5309:
  6075  0029F4  C01C  F016         	movff	___awdiv@quotient,?___awdiv
  6076  0029F8  C01D  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  6077  0029FC  0012               	return	
  6078  0029FE                     __end_of___awdiv:
  6079                           	opt stack 0
  6080                           tblptru	equ	0xFF8
  6081                           tblptrh	equ	0xFF7
  6082                           tblptrl	equ	0xFF6
  6083                           tablat	equ	0xFF5
  6084                           prodh	equ	0xFF4
  6085                           prodl	equ	0xFF3
  6086                           postinc0	equ	0xFEE
  6087                           wreg	equ	0xFE8
  6088                           indf1	equ	0xFE7
  6089                           postdec1	equ	0xFE5
  6090                           fsr1h	equ	0xFE2
  6091                           fsr1l	equ	0xFE1
  6092                           indf2	equ	0xFDF
  6093                           postinc2	equ	0xFDE
  6094                           postdec2	equ	0xFDD
  6095                           fsr2h	equ	0xFDA
  6096                           fsr2l	equ	0xFD9
  6097                           status	equ	0xFD8
  6098                           
  6099 ;; *************** function __tdiv_to_l_ *****************
  6100 ;; Defined at:
  6101 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdivl.c"
  6102 ;; Parameters:    Size  Location     Type
  6103 ;;  f1              3   15[COMRAM] float 
  6104 ;;  f2              3   18[COMRAM] float 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  quot            4   24[COMRAM] unsigned long 
  6107 ;;  exp1            1   29[COMRAM] unsigned char 
  6108 ;;  cntr            1   28[COMRAM] unsigned char 
  6109 ;; Return value:  Size  Location     Type
  6110 ;;                  4   15[COMRAM] unsigned long 
  6111 ;; Registers used:
  6112 ;;		wreg, status,2, status,0
  6113 ;; Tracked objects:
  6114 ;;		On entry : 0/0
  6115 ;;		On exit  : 0/0
  6116 ;;		Unchanged: 0/0
  6117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6118 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;Total ram usage:       15 bytes
  6123 ;; Hardware stack levels used:    1
  6124 ;; Hardware stack levels required when called:    2
  6125 ;; This function calls:
  6126 ;;		Nothing
  6127 ;; This function is called by:
  6128 ;;		_sprintf
  6129 ;; This function uses a non-reentrant model
  6130 ;;
  6131                           
  6132                           	psect	text9
  6133  0021E8                     __ptext9:
  6134                           	opt stack 0
  6135  0021E8                     __tdiv_to_l_:
  6136                           	opt stack 26
  6137                           
  6138                           ;incstack = 0
  6139  0021E8  C012  F016         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6140  0021EC  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6141  0021EE  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6142  0021F0  3411               	rlcf	__tdiv_to_l_@f1+1,w,c
  6143  0021F2  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6144  0021F4  E301               	bnc	u5851
  6145  0021F6  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6146  0021F8                     u5851:
  6147  0021F8  5016               	movf	??__tdiv_to_l_,w,c
  6148  0021FA  6E1E               	movwf	__tdiv_to_l_@exp1,c
  6149  0021FC  501E               	movf	__tdiv_to_l_@exp1,w,c
  6150  0021FE  A4D8               	btfss	status,2,c
  6151  002200  D009               	goto	l5551
  6152  002202  0E00               	movlw	0
  6153  002204  6E10               	movwf	?__tdiv_to_l_,c
  6154  002206  0E00               	movlw	0
  6155  002208  6E11               	movwf	?__tdiv_to_l_+1,c
  6156  00220A  0E00               	movlw	0
  6157  00220C  6E12               	movwf	?__tdiv_to_l_+2,c
  6158  00220E  0E00               	movlw	0
  6159  002210  6E13               	movwf	?__tdiv_to_l_+3,c
  6160  002212  0012               	return	
  6161  002214                     l5551:
  6162  002214  C015  F016         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6163  002218  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6164  00221A  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6165  00221C  3414               	rlcf	__tdiv_to_l_@f2+1,w,c
  6166  00221E  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6167  002220  E301               	bnc	u5871
  6168  002222  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6169  002224                     u5871:
  6170  002224  5016               	movf	??__tdiv_to_l_,w,c
  6171  002226  6E1D               	movwf	__tdiv_to_l_@cntr,c
  6172  002228  501D               	movf	__tdiv_to_l_@cntr,w,c
  6173  00222A  A4D8               	btfss	status,2,c
  6174  00222C  D009               	goto	l5557
  6175  00222E  0E00               	movlw	0
  6176  002230  6E10               	movwf	?__tdiv_to_l_,c
  6177  002232  0E00               	movlw	0
  6178  002234  6E11               	movwf	?__tdiv_to_l_+1,c
  6179  002236  0E00               	movlw	0
  6180  002238  6E12               	movwf	?__tdiv_to_l_+2,c
  6181  00223A  0E00               	movlw	0
  6182  00223C  6E13               	movwf	?__tdiv_to_l_+3,c
  6183  00223E  0012               	return	
  6184  002240                     l5557:
  6185  002240  8E11               	bsf	__tdiv_to_l_@f1+1,7,c
  6186  002242  0EFF               	movlw	255
  6187  002244  1610               	andwf	__tdiv_to_l_@f1,f,c
  6188  002246  0EFF               	movlw	255
  6189  002248  1611               	andwf	__tdiv_to_l_@f1+1,f,c
  6190  00224A  0E00               	movlw	0
  6191  00224C  1612               	andwf	__tdiv_to_l_@f1+2,f,c
  6192  00224E  8E14               	bsf	__tdiv_to_l_@f2+1,7,c
  6193  002250  0EFF               	movlw	255
  6194  002252  1613               	andwf	__tdiv_to_l_@f2,f,c
  6195  002254  0EFF               	movlw	255
  6196  002256  1614               	andwf	__tdiv_to_l_@f2+1,f,c
  6197  002258  0E00               	movlw	0
  6198  00225A  1615               	andwf	__tdiv_to_l_@f2+2,f,c
  6199  00225C  0E00               	movlw	0
  6200  00225E  6E19               	movwf	__tdiv_to_l_@quot,c
  6201  002260  0E00               	movlw	0
  6202  002262  6E1A               	movwf	__tdiv_to_l_@quot+1,c
  6203  002264  0E00               	movlw	0
  6204  002266  6E1B               	movwf	__tdiv_to_l_@quot+2,c
  6205  002268  0E00               	movlw	0
  6206  00226A  6E1C               	movwf	__tdiv_to_l_@quot+3,c
  6207  00226C  0E7F               	movlw	127
  6208  00226E  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  6209  002270  501D               	movf	__tdiv_to_l_@cntr,w,c
  6210  002272  0F98               	addlw	152
  6211  002274  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  6212  002276  0E18               	movlw	24
  6213  002278  6E1D               	movwf	__tdiv_to_l_@cntr,c
  6214  00227A                     l1125:
  6215  00227A  90D8               	bcf	status,0,c
  6216  00227C  3619               	rlcf	__tdiv_to_l_@quot,f,c
  6217  00227E  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  6218  002280  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  6219  002282  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  6220  002284  5013               	movf	__tdiv_to_l_@f2,w,c
  6221  002286  5C10               	subwf	__tdiv_to_l_@f1,w,c
  6222  002288  5014               	movf	__tdiv_to_l_@f2+1,w,c
  6223  00228A  5811               	subwfb	__tdiv_to_l_@f1+1,w,c
  6224  00228C  5015               	movf	__tdiv_to_l_@f2+2,w,c
  6225  00228E  5812               	subwfb	__tdiv_to_l_@f1+2,w,c
  6226  002290  A0D8               	btfss	status,0,c
  6227  002292  D007               	goto	l1126
  6228  002294  5013               	movf	__tdiv_to_l_@f2,w,c
  6229  002296  5E10               	subwf	__tdiv_to_l_@f1,f,c
  6230  002298  5014               	movf	__tdiv_to_l_@f2+1,w,c
  6231  00229A  5A11               	subwfb	__tdiv_to_l_@f1+1,f,c
  6232  00229C  5015               	movf	__tdiv_to_l_@f2+2,w,c
  6233  00229E  5A12               	subwfb	__tdiv_to_l_@f1+2,f,c
  6234  0022A0  8019               	bsf	__tdiv_to_l_@quot,0,c
  6235  0022A2                     l1126:
  6236  0022A2  90D8               	bcf	status,0,c
  6237  0022A4  3610               	rlcf	__tdiv_to_l_@f1,f,c
  6238  0022A6  3611               	rlcf	__tdiv_to_l_@f1+1,f,c
  6239  0022A8  3612               	rlcf	__tdiv_to_l_@f1+2,f,c
  6240  0022AA  2E1D               	decfsz	__tdiv_to_l_@cntr,f,c
  6241  0022AC  D7E6               	goto	l1125
  6242  0022AE  AE1E               	btfss	__tdiv_to_l_@exp1,7,c
  6243  0022B0  D016               	goto	l5591
  6244  0022B2  501E               	movf	__tdiv_to_l_@exp1,w,c
  6245  0022B4  0A80               	xorlw	128
  6246  0022B6  0F97               	addlw	151
  6247  0022B8  B0D8               	btfsc	status,0,c
  6248  0022BA  D009               	goto	l5587
  6249  0022BC  0E00               	movlw	0
  6250  0022BE  6E10               	movwf	?__tdiv_to_l_,c
  6251  0022C0  0E00               	movlw	0
  6252  0022C2  6E11               	movwf	?__tdiv_to_l_+1,c
  6253  0022C4  0E00               	movlw	0
  6254  0022C6  6E12               	movwf	?__tdiv_to_l_+2,c
  6255  0022C8  0E00               	movlw	0
  6256  0022CA  6E13               	movwf	?__tdiv_to_l_+3,c
  6257  0022CC  0012               	return	
  6258  0022CE                     l5587:
  6259  0022CE  90D8               	bcf	status,0,c
  6260  0022D0  321C               	rrcf	__tdiv_to_l_@quot+3,f,c
  6261  0022D2  321B               	rrcf	__tdiv_to_l_@quot+2,f,c
  6262  0022D4  321A               	rrcf	__tdiv_to_l_@quot+1,f,c
  6263  0022D6  3219               	rrcf	__tdiv_to_l_@quot,f,c
  6264  0022D8  3E1E               	incfsz	__tdiv_to_l_@exp1,f,c
  6265  0022DA  D7F9               	goto	l5587
  6266  0022DC  D015               	goto	l1132
  6267  0022DE                     l5591:
  6268  0022DE  0E17               	movlw	23
  6269  0022E0  641E               	cpfsgt	__tdiv_to_l_@exp1,c
  6270  0022E2  D00F               	goto	l5599
  6271  0022E4  0E00               	movlw	0
  6272  0022E6  6E10               	movwf	?__tdiv_to_l_,c
  6273  0022E8  0E00               	movlw	0
  6274  0022EA  6E11               	movwf	?__tdiv_to_l_+1,c
  6275  0022EC  0E00               	movlw	0
  6276  0022EE  6E12               	movwf	?__tdiv_to_l_+2,c
  6277  0022F0  0E00               	movlw	0
  6278  0022F2  6E13               	movwf	?__tdiv_to_l_+3,c
  6279  0022F4  0012               	return	
  6280  0022F6                     l5597:
  6281  0022F6  90D8               	bcf	status,0,c
  6282  0022F8  3619               	rlcf	__tdiv_to_l_@quot,f,c
  6283  0022FA  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  6284  0022FC  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  6285  0022FE  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  6286  002300  061E               	decf	__tdiv_to_l_@exp1,f,c
  6287  002302                     l5599:
  6288  002302  501E               	movf	__tdiv_to_l_@exp1,w,c
  6289  002304  A4D8               	btfss	status,2,c
  6290  002306  D7F7               	goto	l5597
  6291  002308                     l1132:
  6292  002308  C019  F010         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6293  00230C  C01A  F011         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6294  002310  C01B  F012         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6295  002314  C01C  F013         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6296  002318  0012               	return		;funcret
  6297  00231A                     __end_of__tdiv_to_l_:
  6298                           	opt stack 0
  6299                           tblptru	equ	0xFF8
  6300                           tblptrh	equ	0xFF7
  6301                           tblptrl	equ	0xFF6
  6302                           tablat	equ	0xFF5
  6303                           prodh	equ	0xFF4
  6304                           prodl	equ	0xFF3
  6305                           postinc0	equ	0xFEE
  6306                           wreg	equ	0xFE8
  6307                           indf1	equ	0xFE7
  6308                           postdec1	equ	0xFE5
  6309                           fsr1h	equ	0xFE2
  6310                           fsr1l	equ	0xFE1
  6311                           indf2	equ	0xFDF
  6312                           postinc2	equ	0xFDE
  6313                           postdec2	equ	0xFDD
  6314                           fsr2h	equ	0xFDA
  6315                           fsr2l	equ	0xFD9
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function __div_to_l_ *****************
  6319 ;; Defined at:
  6320 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fldivl.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  f1              3   15[COMRAM] unsigned long 
  6323 ;;  f2              3   18[COMRAM] unsigned long 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;  quot            4   21[COMRAM] unsigned long 
  6326 ;;  exp1            1   26[COMRAM] unsigned char 
  6327 ;;  cntr            1   25[COMRAM] unsigned char 
  6328 ;; Return value:  Size  Location     Type
  6329 ;;                  4   15[COMRAM] unsigned long 
  6330 ;; Registers used:
  6331 ;;		wreg, status,2, status,0
  6332 ;; Tracked objects:
  6333 ;;		On entry : 0/0
  6334 ;;		On exit  : 0/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6337 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;Total ram usage:       12 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; Hardware stack levels required when called:    2
  6344 ;; This function calls:
  6345 ;;		Nothing
  6346 ;; This function is called by:
  6347 ;;		_sprintf
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           	psect	text10
  6352  00231A                     __ptext10:
  6353                           	opt stack 0
  6354  00231A                     __div_to_l_:
  6355                           	opt stack 26
  6356                           
  6357                           ;incstack = 0
  6358  00231A  3412               	rlcf	__div_to_l_@f1+2,w,c
  6359  00231C  3413               	rlcf	__div_to_l_@f1+3,w,c
  6360  00231E  6E1B               	movwf	__div_to_l_@exp1,c
  6361  002320  501B               	movf	__div_to_l_@exp1,w,c
  6362  002322  A4D8               	btfss	status,2,c
  6363  002324  D009               	goto	l5607
  6364  002326  0E00               	movlw	0
  6365  002328  6E10               	movwf	?__div_to_l_,c
  6366  00232A  0E00               	movlw	0
  6367  00232C  6E11               	movwf	?__div_to_l_+1,c
  6368  00232E  0E00               	movlw	0
  6369  002330  6E12               	movwf	?__div_to_l_+2,c
  6370  002332  0E00               	movlw	0
  6371  002334  6E13               	movwf	?__div_to_l_+3,c
  6372  002336  0012               	return	
  6373  002338                     l5607:
  6374  002338  3415               	rlcf	__div_to_l_@f2+2,w,c
  6375  00233A  3416               	rlcf	__div_to_l_@f2+3,w,c
  6376  00233C  6E1A               	movwf	__div_to_l_@cntr,c
  6377  00233E  501A               	movf	__div_to_l_@cntr,w,c
  6378  002340  A4D8               	btfss	status,2,c
  6379  002342  D009               	goto	l5613
  6380  002344  0E00               	movlw	0
  6381  002346  6E10               	movwf	?__div_to_l_,c
  6382  002348  0E00               	movlw	0
  6383  00234A  6E11               	movwf	?__div_to_l_+1,c
  6384  00234C  0E00               	movlw	0
  6385  00234E  6E12               	movwf	?__div_to_l_+2,c
  6386  002350  0E00               	movlw	0
  6387  002352  6E13               	movwf	?__div_to_l_+3,c
  6388  002354  0012               	return	
  6389  002356                     l5613:
  6390  002356  8E12               	bsf	__div_to_l_@f1+2,7,c
  6391  002358  0EFF               	movlw	255
  6392  00235A  1610               	andwf	__div_to_l_@f1,f,c
  6393  00235C  0EFF               	movlw	255
  6394  00235E  1611               	andwf	__div_to_l_@f1+1,f,c
  6395  002360  0EFF               	movlw	255
  6396  002362  1612               	andwf	__div_to_l_@f1+2,f,c
  6397  002364  0E00               	movlw	0
  6398  002366  1613               	andwf	__div_to_l_@f1+3,f,c
  6399  002368  8E15               	bsf	__div_to_l_@f2+2,7,c
  6400  00236A  0EFF               	movlw	255
  6401  00236C  1613               	andwf	__div_to_l_@f2,f,c
  6402  00236E  0EFF               	movlw	255
  6403  002370  1614               	andwf	__div_to_l_@f2+1,f,c
  6404  002372  0EFF               	movlw	255
  6405  002374  1615               	andwf	__div_to_l_@f2+2,f,c
  6406  002376  0E00               	movlw	0
  6407  002378  1616               	andwf	__div_to_l_@f2+3,f,c
  6408  00237A  0E00               	movlw	0
  6409  00237C  6E16               	movwf	__div_to_l_@quot,c
  6410  00237E  0E00               	movlw	0
  6411  002380  6E17               	movwf	__div_to_l_@quot+1,c
  6412  002382  0E00               	movlw	0
  6413  002384  6E18               	movwf	__div_to_l_@quot+2,c
  6414  002386  0E00               	movlw	0
  6415  002388  6E19               	movwf	__div_to_l_@quot+3,c
  6416  00238A  0E7F               	movlw	127
  6417  00238C  5E1B               	subwf	__div_to_l_@exp1,f,c
  6418  00238E  501A               	movf	__div_to_l_@cntr,w,c
  6419  002390  0FA0               	addlw	160
  6420  002392  5E1B               	subwf	__div_to_l_@exp1,f,c
  6421  002394  0E20               	movlw	32
  6422  002396  6E1A               	movwf	__div_to_l_@cntr,c
  6423  002398                     l5627:
  6424  002398  90D8               	bcf	status,0,c
  6425  00239A  3616               	rlcf	__div_to_l_@quot,f,c
  6426  00239C  3617               	rlcf	__div_to_l_@quot+1,f,c
  6427  00239E  3618               	rlcf	__div_to_l_@quot+2,f,c
  6428  0023A0  3619               	rlcf	__div_to_l_@quot+3,f,c
  6429  0023A2  5013               	movf	__div_to_l_@f2,w,c
  6430  0023A4  5C10               	subwf	__div_to_l_@f1,w,c
  6431  0023A6  5014               	movf	__div_to_l_@f2+1,w,c
  6432  0023A8  5811               	subwfb	__div_to_l_@f1+1,w,c
  6433  0023AA  5015               	movf	__div_to_l_@f2+2,w,c
  6434  0023AC  5812               	subwfb	__div_to_l_@f1+2,w,c
  6435  0023AE  5016               	movf	__div_to_l_@f2+3,w,c
  6436  0023B0  5813               	subwfb	__div_to_l_@f1+3,w,c
  6437  0023B2  A0D8               	btfss	status,0,c
  6438  0023B4  D009               	goto	l5635
  6439  0023B6  5013               	movf	__div_to_l_@f2,w,c
  6440  0023B8  5E10               	subwf	__div_to_l_@f1,f,c
  6441  0023BA  5014               	movf	__div_to_l_@f2+1,w,c
  6442  0023BC  5A11               	subwfb	__div_to_l_@f1+1,f,c
  6443  0023BE  5015               	movf	__div_to_l_@f2+2,w,c
  6444  0023C0  5A12               	subwfb	__div_to_l_@f1+2,f,c
  6445  0023C2  5016               	movf	__div_to_l_@f2+3,w,c
  6446  0023C4  5A13               	subwfb	__div_to_l_@f1+3,f,c
  6447  0023C6  8016               	bsf	__div_to_l_@quot,0,c
  6448  0023C8                     l5635:
  6449  0023C8  90D8               	bcf	status,0,c
  6450  0023CA  3610               	rlcf	__div_to_l_@f1,f,c
  6451  0023CC  3611               	rlcf	__div_to_l_@f1+1,f,c
  6452  0023CE  3612               	rlcf	__div_to_l_@f1+2,f,c
  6453  0023D0  3613               	rlcf	__div_to_l_@f1+3,f,c
  6454  0023D2  2E1A               	decfsz	__div_to_l_@cntr,f,c
  6455  0023D4  D7E1               	goto	l5627
  6456  0023D6  AE1B               	btfss	__div_to_l_@exp1,7,c
  6457  0023D8  D016               	goto	l5651
  6458  0023DA  501B               	movf	__div_to_l_@exp1,w,c
  6459  0023DC  0A80               	xorlw	128
  6460  0023DE  0F9F               	addlw	159
  6461  0023E0  B0D8               	btfsc	status,0,c
  6462  0023E2  D009               	goto	l5647
  6463  0023E4  0E00               	movlw	0
  6464  0023E6  6E10               	movwf	?__div_to_l_,c
  6465  0023E8  0E00               	movlw	0
  6466  0023EA  6E11               	movwf	?__div_to_l_+1,c
  6467  0023EC  0E00               	movlw	0
  6468  0023EE  6E12               	movwf	?__div_to_l_+2,c
  6469  0023F0  0E00               	movlw	0
  6470  0023F2  6E13               	movwf	?__div_to_l_+3,c
  6471  0023F4  0012               	return	
  6472  0023F6                     l5647:
  6473  0023F6  90D8               	bcf	status,0,c
  6474  0023F8  3219               	rrcf	__div_to_l_@quot+3,f,c
  6475  0023FA  3218               	rrcf	__div_to_l_@quot+2,f,c
  6476  0023FC  3217               	rrcf	__div_to_l_@quot+1,f,c
  6477  0023FE  3216               	rrcf	__div_to_l_@quot,f,c
  6478  002400  3E1B               	incfsz	__div_to_l_@exp1,f,c
  6479  002402  D7F9               	goto	l5647
  6480  002404  D015               	goto	l1028
  6481  002406                     l5651:
  6482  002406  0E1F               	movlw	31
  6483  002408  641B               	cpfsgt	__div_to_l_@exp1,c
  6484  00240A  D00F               	goto	l5659
  6485  00240C  0E00               	movlw	0
  6486  00240E  6E10               	movwf	?__div_to_l_,c
  6487  002410  0E00               	movlw	0
  6488  002412  6E11               	movwf	?__div_to_l_+1,c
  6489  002414  0E00               	movlw	0
  6490  002416  6E12               	movwf	?__div_to_l_+2,c
  6491  002418  0E00               	movlw	0
  6492  00241A  6E13               	movwf	?__div_to_l_+3,c
  6493  00241C  0012               	return	
  6494  00241E                     l5657:
  6495  00241E  90D8               	bcf	status,0,c
  6496  002420  3616               	rlcf	__div_to_l_@quot,f,c
  6497  002422  3617               	rlcf	__div_to_l_@quot+1,f,c
  6498  002424  3618               	rlcf	__div_to_l_@quot+2,f,c
  6499  002426  3619               	rlcf	__div_to_l_@quot+3,f,c
  6500  002428  061B               	decf	__div_to_l_@exp1,f,c
  6501  00242A                     l5659:
  6502  00242A  501B               	movf	__div_to_l_@exp1,w,c
  6503  00242C  A4D8               	btfss	status,2,c
  6504  00242E  D7F7               	goto	l5657
  6505  002430                     l1028:
  6506  002430  C016  F010         	movff	__div_to_l_@quot,?__div_to_l_
  6507  002434  C017  F011         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6508  002438  C018  F012         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6509  00243C  C019  F013         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6510  002440  0012               	return		;funcret
  6511  002442                     __end_of__div_to_l_:
  6512                           	opt stack 0
  6513                           tblptru	equ	0xFF8
  6514                           tblptrh	equ	0xFF7
  6515                           tblptrl	equ	0xFF6
  6516                           tablat	equ	0xFF5
  6517                           prodh	equ	0xFF4
  6518                           prodl	equ	0xFF3
  6519                           postinc0	equ	0xFEE
  6520                           wreg	equ	0xFE8
  6521                           indf1	equ	0xFE7
  6522                           postdec1	equ	0xFE5
  6523                           fsr1h	equ	0xFE2
  6524                           fsr1l	equ	0xFE1
  6525                           indf2	equ	0xFDF
  6526                           postinc2	equ	0xFDE
  6527                           postdec2	equ	0xFDD
  6528                           fsr2h	equ	0xFDA
  6529                           fsr2l	equ	0xFD9
  6530                           status	equ	0xFD8
  6531                           
  6532 ;; *************** function ___lltoft *****************
  6533 ;; Defined at:
  6534 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;  c               4   23[COMRAM] unsigned long 
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;  exp             1   31[COMRAM] unsigned char 
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  3   23[COMRAM] float 
  6541 ;; Registers used:
  6542 ;;		wreg, status,2, status,0, cstack
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6548 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6552 ;;Total ram usage:        9 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    3
  6555 ;; This function calls:
  6556 ;;		___ftpack
  6557 ;; This function is called by:
  6558 ;;		_sprintf
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text11
  6563  002C96                     __ptext11:
  6564                           	opt stack 0
  6565  002C96                     ___lltoft:
  6566                           	opt stack 25
  6567                           
  6568                           ;incstack = 0
  6569  002C96  0E8E               	movlw	142
  6570  002C98  6E20               	movwf	___lltoft@exp,c
  6571  002C9A  D006               	goto	l5841
  6572  002C9C                     l5839:
  6573  002C9C  90D8               	bcf	status,0,c
  6574  002C9E  321B               	rrcf	___lltoft@c+3,f,c
  6575  002CA0  321A               	rrcf	___lltoft@c+2,f,c
  6576  002CA2  3219               	rrcf	___lltoft@c+1,f,c
  6577  002CA4  3218               	rrcf	___lltoft@c,f,c
  6578  002CA6  2A20               	incf	___lltoft@exp,f,c
  6579  002CA8                     l5841:
  6580  002CA8  0E00               	movlw	0
  6581  002CAA  1418               	andwf	___lltoft@c,w,c
  6582  002CAC  6E1C               	movwf	??___lltoft& (0+255),c
  6583  002CAE  0E00               	movlw	0
  6584  002CB0  1419               	andwf	___lltoft@c+1,w,c
  6585  002CB2  6E1D               	movwf	(??___lltoft+1)& (0+255),c
  6586  002CB4  0E00               	movlw	0
  6587  002CB6  141A               	andwf	___lltoft@c+2,w,c
  6588  002CB8  6E1E               	movwf	(??___lltoft+2)& (0+255),c
  6589  002CBA  0EFF               	movlw	255
  6590  002CBC  141B               	andwf	___lltoft@c+3,w,c
  6591  002CBE  6E1F               	movwf	(??___lltoft+3)& (0+255),c
  6592  002CC0  501C               	movf	??___lltoft,w,c
  6593  002CC2  101D               	iorwf	??___lltoft+1,w,c
  6594  002CC4  101E               	iorwf	??___lltoft+2,w,c
  6595  002CC6  101F               	iorwf	??___lltoft+3,w,c
  6596  002CC8  A4D8               	btfss	status,2,c
  6597  002CCA  D7E8               	goto	l5839
  6598  002CCC  C018  F010         	movff	___lltoft@c,___ftpack@arg
  6599  002CD0  C019  F011         	movff	___lltoft@c+1,___ftpack@arg+1
  6600  002CD4  C01A  F012         	movff	___lltoft@c+2,___ftpack@arg+2
  6601  002CD8  C020  F013         	movff	___lltoft@exp,___ftpack@exp
  6602  002CDC  0E00               	movlw	0
  6603  002CDE  6E14               	movwf	___ftpack@sign,c
  6604  002CE0  EC94  F013         	call	___ftpack	;wreg free
  6605  002CE4  C010  F018         	movff	?___ftpack,?___lltoft
  6606  002CE8  C011  F019         	movff	?___ftpack+1,?___lltoft+1
  6607  002CEC  C012  F01A         	movff	?___ftpack+2,?___lltoft+2
  6608  002CF0  0012               	return	
  6609  002CF2                     __end_of___lltoft:
  6610                           	opt stack 0
  6611                           tblptru	equ	0xFF8
  6612                           tblptrh	equ	0xFF7
  6613                           tblptrl	equ	0xFF6
  6614                           tablat	equ	0xFF5
  6615                           prodh	equ	0xFF4
  6616                           prodl	equ	0xFF3
  6617                           postinc0	equ	0xFEE
  6618                           wreg	equ	0xFE8
  6619                           indf1	equ	0xFE7
  6620                           postdec1	equ	0xFE5
  6621                           fsr1h	equ	0xFE2
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           postinc2	equ	0xFDE
  6625                           postdec2	equ	0xFDD
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           
  6630 ;; *************** function ___llmod *****************
  6631 ;; Defined at:
  6632 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\llmod.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;  dividend        4   28[COMRAM] unsigned long 
  6635 ;;  divisor         4   32[COMRAM] unsigned long 
  6636 ;; Auto vars:     Size  Location     Type
  6637 ;;  counter         1   36[COMRAM] unsigned char 
  6638 ;; Return value:  Size  Location     Type
  6639 ;;                  4   28[COMRAM] unsigned long 
  6640 ;; Registers used:
  6641 ;;		wreg, status,2, status,0
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6647 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6651 ;;Total ram usage:        9 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:    2
  6654 ;; This function calls:
  6655 ;;		Nothing
  6656 ;; This function is called by:
  6657 ;;		_sprintf
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           	psect	text12
  6662  002B70                     __ptext12:
  6663                           	opt stack 0
  6664  002B70                     ___llmod:
  6665                           	opt stack 26
  6666                           
  6667                           ;incstack = 0
  6668  002B70  5021               	movf	___llmod@divisor,w,c
  6669  002B72  1022               	iorwf	___llmod@divisor+1,w,c
  6670  002B74  1023               	iorwf	___llmod@divisor+2,w,c
  6671  002B76  1024               	iorwf	___llmod@divisor+3,w,c
  6672  002B78  B4D8               	btfsc	status,2,c
  6673  002B7A  D024               	goto	l1217
  6674  002B7C  0E01               	movlw	1
  6675  002B7E  6E25               	movwf	___llmod@counter,c
  6676  002B80  D006               	goto	l5827
  6677  002B82                     l5825:
  6678  002B82  90D8               	bcf	status,0,c
  6679  002B84  3621               	rlcf	___llmod@divisor,f,c
  6680  002B86  3622               	rlcf	___llmod@divisor+1,f,c
  6681  002B88  3623               	rlcf	___llmod@divisor+2,f,c
  6682  002B8A  3624               	rlcf	___llmod@divisor+3,f,c
  6683  002B8C  2A25               	incf	___llmod@counter,f,c
  6684  002B8E                     l5827:
  6685  002B8E  AE24               	btfss	___llmod@divisor+3,7,c
  6686  002B90  D7F8               	goto	l5825
  6687  002B92                     l5829:
  6688  002B92  5021               	movf	___llmod@divisor,w,c
  6689  002B94  5C1D               	subwf	___llmod@dividend,w,c
  6690  002B96  5022               	movf	___llmod@divisor+1,w,c
  6691  002B98  581E               	subwfb	___llmod@dividend+1,w,c
  6692  002B9A  5023               	movf	___llmod@divisor+2,w,c
  6693  002B9C  581F               	subwfb	___llmod@dividend+2,w,c
  6694  002B9E  5024               	movf	___llmod@divisor+3,w,c
  6695  002BA0  5820               	subwfb	___llmod@dividend+3,w,c
  6696  002BA2  A0D8               	btfss	status,0,c
  6697  002BA4  D008               	goto	l5833
  6698  002BA6  5021               	movf	___llmod@divisor,w,c
  6699  002BA8  5E1D               	subwf	___llmod@dividend,f,c
  6700  002BAA  5022               	movf	___llmod@divisor+1,w,c
  6701  002BAC  5A1E               	subwfb	___llmod@dividend+1,f,c
  6702  002BAE  5023               	movf	___llmod@divisor+2,w,c
  6703  002BB0  5A1F               	subwfb	___llmod@dividend+2,f,c
  6704  002BB2  5024               	movf	___llmod@divisor+3,w,c
  6705  002BB4  5A20               	subwfb	___llmod@dividend+3,f,c
  6706  002BB6                     l5833:
  6707  002BB6  90D8               	bcf	status,0,c
  6708  002BB8  3224               	rrcf	___llmod@divisor+3,f,c
  6709  002BBA  3223               	rrcf	___llmod@divisor+2,f,c
  6710  002BBC  3222               	rrcf	___llmod@divisor+1,f,c
  6711  002BBE  3221               	rrcf	___llmod@divisor,f,c
  6712  002BC0  2E25               	decfsz	___llmod@counter,f,c
  6713  002BC2  D7E7               	goto	l5829
  6714  002BC4                     l1217:
  6715  002BC4  C01D  F01D         	movff	___llmod@dividend,?___llmod
  6716  002BC8  C01E  F01E         	movff	___llmod@dividend+1,?___llmod+1
  6717  002BCC  C01F  F01F         	movff	___llmod@dividend+2,?___llmod+2
  6718  002BD0  C020  F020         	movff	___llmod@dividend+3,?___llmod+3
  6719  002BD4  0012               	return		;funcret
  6720  002BD6                     __end_of___llmod:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           postinc0	equ	0xFEE
  6729                           wreg	equ	0xFE8
  6730                           indf1	equ	0xFE7
  6731                           postdec1	equ	0xFE5
  6732                           fsr1h	equ	0xFE2
  6733                           fsr1l	equ	0xFE1
  6734                           indf2	equ	0xFDF
  6735                           postinc2	equ	0xFDE
  6736                           postdec2	equ	0xFDD
  6737                           fsr2h	equ	0xFDA
  6738                           fsr2l	equ	0xFD9
  6739                           status	equ	0xFD8
  6740                           
  6741 ;; *************** function ___lldiv *****************
  6742 ;; Defined at:
  6743 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lldiv.c"
  6744 ;; Parameters:    Size  Location     Type
  6745 ;;  dividend        4   15[COMRAM] unsigned long 
  6746 ;;  divisor         4   19[COMRAM] unsigned long 
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;  quotient        4   23[COMRAM] unsigned long 
  6749 ;;  counter         1   27[COMRAM] unsigned char 
  6750 ;; Return value:  Size  Location     Type
  6751 ;;                  4   15[COMRAM] unsigned long 
  6752 ;; Registers used:
  6753 ;;		wreg, status,2, status,0
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6759 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;Total ram usage:       13 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    2
  6766 ;; This function calls:
  6767 ;;		Nothing
  6768 ;; This function is called by:
  6769 ;;		_sprintf
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	text13
  6774  0029FE                     __ptext13:
  6775                           	opt stack 0
  6776  0029FE                     ___lldiv:
  6777                           	opt stack 26
  6778                           
  6779                           ;incstack = 0
  6780  0029FE  0E00               	movlw	0
  6781  002A00  6E18               	movwf	___lldiv@quotient,c
  6782  002A02  0E00               	movlw	0
  6783  002A04  6E19               	movwf	___lldiv@quotient+1,c
  6784  002A06  0E00               	movlw	0
  6785  002A08  6E1A               	movwf	___lldiv@quotient+2,c
  6786  002A0A  0E00               	movlw	0
  6787  002A0C  6E1B               	movwf	___lldiv@quotient+3,c
  6788  002A0E  5014               	movf	___lldiv@divisor,w,c
  6789  002A10  1015               	iorwf	___lldiv@divisor+1,w,c
  6790  002A12  1016               	iorwf	___lldiv@divisor+2,w,c
  6791  002A14  1017               	iorwf	___lldiv@divisor+3,w,c
  6792  002A16  B4D8               	btfsc	status,2,c
  6793  002A18  D02A               	goto	l1207
  6794  002A1A  0E01               	movlw	1
  6795  002A1C  6E1C               	movwf	___lldiv@counter,c
  6796  002A1E  D006               	goto	l5807
  6797  002A20                     l5805:
  6798  002A20  90D8               	bcf	status,0,c
  6799  002A22  3614               	rlcf	___lldiv@divisor,f,c
  6800  002A24  3615               	rlcf	___lldiv@divisor+1,f,c
  6801  002A26  3616               	rlcf	___lldiv@divisor+2,f,c
  6802  002A28  3617               	rlcf	___lldiv@divisor+3,f,c
  6803  002A2A  2A1C               	incf	___lldiv@counter,f,c
  6804  002A2C                     l5807:
  6805  002A2C  AE17               	btfss	___lldiv@divisor+3,7,c
  6806  002A2E  D7F8               	goto	l5805
  6807  002A30                     l5809:
  6808  002A30  90D8               	bcf	status,0,c
  6809  002A32  3618               	rlcf	___lldiv@quotient,f,c
  6810  002A34  3619               	rlcf	___lldiv@quotient+1,f,c
  6811  002A36  361A               	rlcf	___lldiv@quotient+2,f,c
  6812  002A38  361B               	rlcf	___lldiv@quotient+3,f,c
  6813  002A3A  5014               	movf	___lldiv@divisor,w,c
  6814  002A3C  5C10               	subwf	___lldiv@dividend,w,c
  6815  002A3E  5015               	movf	___lldiv@divisor+1,w,c
  6816  002A40  5811               	subwfb	___lldiv@dividend+1,w,c
  6817  002A42  5016               	movf	___lldiv@divisor+2,w,c
  6818  002A44  5812               	subwfb	___lldiv@dividend+2,w,c
  6819  002A46  5017               	movf	___lldiv@divisor+3,w,c
  6820  002A48  5813               	subwfb	___lldiv@dividend+3,w,c
  6821  002A4A  A0D8               	btfss	status,0,c
  6822  002A4C  D009               	goto	l5817
  6823  002A4E  5014               	movf	___lldiv@divisor,w,c
  6824  002A50  5E10               	subwf	___lldiv@dividend,f,c
  6825  002A52  5015               	movf	___lldiv@divisor+1,w,c
  6826  002A54  5A11               	subwfb	___lldiv@dividend+1,f,c
  6827  002A56  5016               	movf	___lldiv@divisor+2,w,c
  6828  002A58  5A12               	subwfb	___lldiv@dividend+2,f,c
  6829  002A5A  5017               	movf	___lldiv@divisor+3,w,c
  6830  002A5C  5A13               	subwfb	___lldiv@dividend+3,f,c
  6831  002A5E  8018               	bsf	___lldiv@quotient,0,c
  6832  002A60                     l5817:
  6833  002A60  90D8               	bcf	status,0,c
  6834  002A62  3217               	rrcf	___lldiv@divisor+3,f,c
  6835  002A64  3216               	rrcf	___lldiv@divisor+2,f,c
  6836  002A66  3215               	rrcf	___lldiv@divisor+1,f,c
  6837  002A68  3214               	rrcf	___lldiv@divisor,f,c
  6838  002A6A  2E1C               	decfsz	___lldiv@counter,f,c
  6839  002A6C  D7E1               	goto	l5809
  6840  002A6E                     l1207:
  6841  002A6E  C018  F010         	movff	___lldiv@quotient,?___lldiv
  6842  002A72  C019  F011         	movff	___lldiv@quotient+1,?___lldiv+1
  6843  002A76  C01A  F012         	movff	___lldiv@quotient+2,?___lldiv+2
  6844  002A7A  C01B  F013         	movff	___lldiv@quotient+3,?___lldiv+3
  6845  002A7E  0012               	return		;funcret
  6846  002A80                     __end_of___lldiv:
  6847                           	opt stack 0
  6848                           tblptru	equ	0xFF8
  6849                           tblptrh	equ	0xFF7
  6850                           tblptrl	equ	0xFF6
  6851                           tablat	equ	0xFF5
  6852                           prodh	equ	0xFF4
  6853                           prodl	equ	0xFF3
  6854                           postinc0	equ	0xFEE
  6855                           wreg	equ	0xFE8
  6856                           indf1	equ	0xFE7
  6857                           postdec1	equ	0xFE5
  6858                           fsr1h	equ	0xFE2
  6859                           fsr1l	equ	0xFE1
  6860                           indf2	equ	0xFDF
  6861                           postinc2	equ	0xFDE
  6862                           postdec2	equ	0xFDD
  6863                           fsr2h	equ	0xFDA
  6864                           fsr2l	equ	0xFD9
  6865                           status	equ	0xFD8
  6866                           
  6867 ;; *************** function ___fttol *****************
  6868 ;; Defined at:
  6869 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;  f1              3   13[BANK0 ] float 
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;  lval            4   23[BANK0 ] unsigned long 
  6874 ;;  exp1            1   27[BANK0 ] unsigned char 
  6875 ;;  sign1           1   22[BANK0 ] unsigned char 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;                  4   13[BANK0 ] long 
  6878 ;; Registers used:
  6879 ;;		wreg, status,2, status,0
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6885 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6889 ;;Total ram usage:       15 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; Hardware stack levels required when called:    2
  6892 ;; This function calls:
  6893 ;;		Nothing
  6894 ;; This function is called by:
  6895 ;;		_sprintf
  6896 ;; This function uses a non-reentrant model
  6897 ;;
  6898                           
  6899                           	psect	text14
  6900  001E36                     __ptext14:
  6901                           	opt stack 0
  6902  001E36                     ___fttol:
  6903                           	opt stack 26
  6904                           
  6905                           ;incstack = 0
  6906  001E36  C0BC  F0BE         	movff	___fttol@f1+2,??___fttol
  6907  001E3A  0100               	movlb	0	; () banked
  6908  001E3C  6BBF               	clrf	(??___fttol+1)& (0+255),b
  6909  001E3E  6BC0               	clrf	(??___fttol+2)& (0+255),b
  6910  001E40  0100               	movlb	0	; () banked
  6911  001E42  35BB               	rlcf	(___fttol@f1+1)& (0+255),w,b
  6912  001E44  0100               	movlb	0	; () banked
  6913  001E46  37BE               	rlcf	??___fttol& (0+255),f,b
  6914  001E48  E301               	bnc	u6121
  6915  001E4A  81BF               	bsf	(??___fttol+1)& (0+255),0,b
  6916  001E4C                     u6121:
  6917  001E4C  0100               	movlb	0	; () banked
  6918  001E4E  51BE               	movf	??___fttol& (0+255),w,b
  6919  001E50  0100               	movlb	0	; () banked
  6920  001E52  6FC8               	movwf	___fttol@exp1& (0+255),b
  6921  001E54  0100               	movlb	0	; () banked
  6922  001E56  51C8               	movf	___fttol@exp1& (0+255),w,b
  6923  001E58  A4D8               	btfss	status,2,c
  6924  001E5A  D00A               	goto	l5755
  6925                           
  6926                           ; BSR set to: 0
  6927  001E5C  0E00               	movlw	0
  6928  001E5E  0100               	movlb	0	; () banked
  6929  001E60  6FBA               	movwf	?___fttol& (0+255),b
  6930  001E62  0E00               	movlw	0
  6931  001E64  6FBB               	movwf	(?___fttol+1)& (0+255),b
  6932  001E66  0E00               	movlw	0
  6933  001E68  6FBC               	movwf	(?___fttol+2)& (0+255),b
  6934  001E6A  0E00               	movlw	0
  6935  001E6C  6FBD               	movwf	(?___fttol+3)& (0+255),b
  6936                           
  6937                           ; BSR set to: 0
  6938  001E6E  0012               	return	
  6939  001E70                     l5755:
  6940                           
  6941                           ; BSR set to: 0
  6942  001E70  0E17               	movlw	23
  6943  001E72  0100               	movlb	0	; () banked
  6944  001E74  6FBE               	movwf	??___fttol& (0+255),b
  6945  001E76  C0BA  F0BF         	movff	___fttol@f1,??___fttol+1
  6946  001E7A  C0BB  F0C0         	movff	___fttol@f1+1,??___fttol+2
  6947  001E7E  C0BC  F0C1         	movff	___fttol@f1+2,??___fttol+3
  6948  001E82  0100               	movlb	0	; () banked
  6949  001E84  29BE               	incf	??___fttol& (0+255),w,b
  6950  001E86  0100               	movlb	0	; () banked
  6951  001E88  6FC2               	movwf	(??___fttol+4)& (0+255),b
  6952  001E8A  D005               	goto	u6140
  6953  001E8C                     u6145:
  6954  001E8C  0100               	movlb	0	; () banked
  6955  001E8E  90D8               	bcf	status,0,c
  6956  001E90  33C1               	rrcf	(??___fttol+3)& (0+255),f,b
  6957  001E92  33C0               	rrcf	(??___fttol+2)& (0+255),f,b
  6958  001E94  33BF               	rrcf	(??___fttol+1)& (0+255),f,b
  6959  001E96                     u6140:
  6960  001E96  0100               	movlb	0	; () banked
  6961  001E98  2FC2               	decfsz	(??___fttol+4)& (0+255),f,b
  6962  001E9A  D7F8               	goto	u6145
  6963  001E9C  0100               	movlb	0	; () banked
  6964  001E9E  51BF               	movf	(??___fttol+1)& (0+255),w,b
  6965  001EA0  0100               	movlb	0	; () banked
  6966  001EA2  6FC3               	movwf	___fttol@sign1& (0+255),b
  6967                           
  6968                           ; BSR set to: 0
  6969  001EA4  0100               	movlb	0	; () banked
  6970  001EA6  8FBB               	bsf	(___fttol@f1+1)& (0+255),7,b
  6971                           
  6972                           ; BSR set to: 0
  6973  001EA8  0EFF               	movlw	255
  6974  001EAA  0100               	movlb	0	; () banked
  6975  001EAC  17BA               	andwf	___fttol@f1& (0+255),f,b
  6976  001EAE  0EFF               	movlw	255
  6977  001EB0  0100               	movlb	0	; () banked
  6978  001EB2  17BB               	andwf	(___fttol@f1+1)& (0+255),f,b
  6979  001EB4  0E00               	movlw	0
  6980  001EB6  0100               	movlb	0	; () banked
  6981  001EB8  17BC               	andwf	(___fttol@f1+2)& (0+255),f,b
  6982                           
  6983                           ; BSR set to: 0
  6984  001EBA  0100               	movlb	0	; () banked
  6985  001EBC  51BA               	movf	___fttol@f1& (0+255),w,b
  6986  001EBE  0100               	movlb	0	; () banked
  6987  001EC0  6FC4               	movwf	___fttol@lval& (0+255),b
  6988  001EC2  0100               	movlb	0	; () banked
  6989  001EC4  51BB               	movf	(___fttol@f1+1)& (0+255),w,b
  6990  001EC6  0100               	movlb	0	; () banked
  6991  001EC8  6FC5               	movwf	(___fttol@lval+1)& (0+255),b
  6992  001ECA  0100               	movlb	0	; () banked
  6993  001ECC  51BC               	movf	(___fttol@f1+2)& (0+255),w,b
  6994  001ECE  0100               	movlb	0	; () banked
  6995  001ED0  6FC6               	movwf	(___fttol@lval+2)& (0+255),b
  6996  001ED2  0100               	movlb	0	; () banked
  6997  001ED4  6BC7               	clrf	(___fttol@lval+3)& (0+255),b
  6998                           
  6999                           ; BSR set to: 0
  7000  001ED6  0E8E               	movlw	142
  7001  001ED8  0100               	movlb	0	; () banked
  7002  001EDA  5FC8               	subwf	___fttol@exp1& (0+255),f,b
  7003                           
  7004                           ; BSR set to: 0
  7005  001EDC  0100               	movlb	0	; () banked
  7006  001EDE  AFC8               	btfss	___fttol@exp1& (0+255),7,b
  7007  001EE0  D01A               	goto	l5777
  7008                           
  7009                           ; BSR set to: 0
  7010  001EE2  0100               	movlb	0	; () banked
  7011  001EE4  51C8               	movf	___fttol@exp1& (0+255),w,b
  7012  001EE6  0A80               	xorlw	128
  7013  001EE8  0F8F               	addlw	143
  7014  001EEA  B0D8               	btfsc	status,0,c
  7015  001EEC  D00A               	goto	l5773
  7016                           
  7017                           ; BSR set to: 0
  7018  001EEE  0E00               	movlw	0
  7019  001EF0  0100               	movlb	0	; () banked
  7020  001EF2  6FBA               	movwf	?___fttol& (0+255),b
  7021  001EF4  0E00               	movlw	0
  7022  001EF6  6FBB               	movwf	(?___fttol+1)& (0+255),b
  7023  001EF8  0E00               	movlw	0
  7024  001EFA  6FBC               	movwf	(?___fttol+2)& (0+255),b
  7025  001EFC  0E00               	movlw	0
  7026  001EFE  6FBD               	movwf	(?___fttol+3)& (0+255),b
  7027                           
  7028                           ; BSR set to: 0
  7029  001F00  0012               	return	
  7030  001F02                     l5773:
  7031                           
  7032                           ; BSR set to: 0
  7033  001F02  0100               	movlb	0	; () banked
  7034  001F04  90D8               	bcf	status,0,c
  7035  001F06  33C7               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7036  001F08  33C6               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7037  001F0A  33C5               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7038  001F0C  33C4               	rrcf	___fttol@lval& (0+255),f,b
  7039                           
  7040                           ; BSR set to: 0
  7041  001F0E  0100               	movlb	0	; () banked
  7042  001F10  3FC8               	incfsz	___fttol@exp1& (0+255),f,b
  7043  001F12  D7F7               	goto	l5773
  7044                           
  7045                           ; BSR set to: 0
  7046  001F14  D01B               	goto	l5787
  7047  001F16                     l5777:
  7048                           
  7049                           ; BSR set to: 0
  7050  001F16  0E17               	movlw	23
  7051  001F18  0100               	movlb	0	; () banked
  7052  001F1A  65C8               	cpfsgt	___fttol@exp1& (0+255),b
  7053  001F1C  D012               	goto	l5785
  7054                           
  7055                           ; BSR set to: 0
  7056  001F1E  0E00               	movlw	0
  7057  001F20  0100               	movlb	0	; () banked
  7058  001F22  6FBA               	movwf	?___fttol& (0+255),b
  7059  001F24  0E00               	movlw	0
  7060  001F26  6FBB               	movwf	(?___fttol+1)& (0+255),b
  7061  001F28  0E00               	movlw	0
  7062  001F2A  6FBC               	movwf	(?___fttol+2)& (0+255),b
  7063  001F2C  0E00               	movlw	0
  7064  001F2E  6FBD               	movwf	(?___fttol+3)& (0+255),b
  7065                           
  7066                           ; BSR set to: 0
  7067  001F30  0012               	return	
  7068  001F32                     l5783:
  7069                           
  7070                           ; BSR set to: 0
  7071  001F32  0100               	movlb	0	; () banked
  7072  001F34  90D8               	bcf	status,0,c
  7073  001F36  37C4               	rlcf	___fttol@lval& (0+255),f,b
  7074  001F38  37C5               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7075  001F3A  37C6               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7076  001F3C  37C7               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7077  001F3E  0100               	movlb	0	; () banked
  7078  001F40  07C8               	decf	___fttol@exp1& (0+255),f,b
  7079  001F42                     l5785:
  7080                           
  7081                           ; BSR set to: 0
  7082  001F42  0100               	movlb	0	; () banked
  7083  001F44  51C8               	movf	___fttol@exp1& (0+255),w,b
  7084  001F46  0100               	movlb	0	; () banked
  7085  001F48  A4D8               	btfss	status,2,c
  7086  001F4A  D7F3               	goto	l5783
  7087  001F4C                     l5787:
  7088                           
  7089                           ; BSR set to: 0
  7090  001F4C  0100               	movlb	0	; () banked
  7091  001F4E  51C3               	movf	___fttol@sign1& (0+255),w,b
  7092  001F50  0100               	movlb	0	; () banked
  7093  001F52  B4D8               	btfsc	status,2,c
  7094  001F54  D009               	goto	l5791
  7095                           
  7096                           ; BSR set to: 0
  7097  001F56  0100               	movlb	0	; () banked
  7098  001F58  1FC7               	comf	(___fttol@lval+3)& (0+255),f,b
  7099  001F5A  1FC6               	comf	(___fttol@lval+2)& (0+255),f,b
  7100  001F5C  1FC5               	comf	(___fttol@lval+1)& (0+255),f,b
  7101  001F5E  6DC4               	negf	___fttol@lval& (0+255),b
  7102  001F60  0E00               	movlw	0
  7103  001F62  23C5               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7104  001F64  23C6               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7105  001F66  23C7               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7106  001F68                     l5791:
  7107                           
  7108                           ; BSR set to: 0
  7109  001F68  C0C4  F0BA         	movff	___fttol@lval,?___fttol
  7110  001F6C  C0C5  F0BB         	movff	___fttol@lval+1,?___fttol+1
  7111  001F70  C0C6  F0BC         	movff	___fttol@lval+2,?___fttol+2
  7112  001F74  C0C7  F0BD         	movff	___fttol@lval+3,?___fttol+3
  7113  001F78  0012               	return	
  7114  001F7A                     __end_of___fttol:
  7115                           	opt stack 0
  7116                           tblptru	equ	0xFF8
  7117                           tblptrh	equ	0xFF7
  7118                           tblptrl	equ	0xFF6
  7119                           tablat	equ	0xFF5
  7120                           prodh	equ	0xFF4
  7121                           prodl	equ	0xFF3
  7122                           postinc0	equ	0xFEE
  7123                           wreg	equ	0xFE8
  7124                           indf1	equ	0xFE7
  7125                           postdec1	equ	0xFE5
  7126                           fsr1h	equ	0xFE2
  7127                           fsr1l	equ	0xFE1
  7128                           indf2	equ	0xFDF
  7129                           postinc2	equ	0xFDE
  7130                           postdec2	equ	0xFDD
  7131                           fsr2h	equ	0xFDA
  7132                           fsr2l	equ	0xFD9
  7133                           status	equ	0xFD8
  7134                           
  7135 ;; *************** function ___ftsub *****************
  7136 ;; Defined at:
  7137 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftsub.c"
  7138 ;; Parameters:    Size  Location     Type
  7139 ;;  f1              3   54[COMRAM] float 
  7140 ;;  f2              3   57[COMRAM] float 
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;		None
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  3   54[COMRAM] float 
  7145 ;; Registers used:
  7146 ;;		wreg, status,2, status,0, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7152 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;Total ram usage:        6 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    4
  7159 ;; This function calls:
  7160 ;;		___ftadd
  7161 ;; This function is called by:
  7162 ;;		_sprintf
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           	psect	text15
  7167  002D98                     __ptext15:
  7168                           	opt stack 0
  7169  002D98                     ___ftsub:
  7170                           	opt stack 24
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;incstack = 0
  7174  002D98  503A               	movf	___ftsub@f2,w,c
  7175  002D9A  103B               	iorwf	___ftsub@f2+1,w,c
  7176  002D9C  103C               	iorwf	___ftsub@f2+2,w,c
  7177  002D9E  B4D8               	btfsc	status,2,c
  7178  002DA0  D006               	goto	l5711
  7179  002DA2  0E00               	movlw	0
  7180  002DA4  1A3A               	xorwf	___ftsub@f2,f,c
  7181  002DA6  0E00               	movlw	0
  7182  002DA8  1A3B               	xorwf	___ftsub@f2+1,f,c
  7183  002DAA  0E80               	movlw	128
  7184  002DAC  1A3C               	xorwf	___ftsub@f2+2,f,c
  7185  002DAE                     l5711:
  7186  002DAE  C037  F02B         	movff	___ftsub@f1,___ftadd@f1
  7187  002DB2  C038  F02C         	movff	___ftsub@f1+1,___ftadd@f1+1
  7188  002DB6  C039  F02D         	movff	___ftsub@f1+2,___ftadd@f1+2
  7189  002DBA  C03A  F02E         	movff	___ftsub@f2,___ftadd@f2
  7190  002DBE  C03B  F02F         	movff	___ftsub@f2+1,___ftadd@f2+1
  7191  002DC2  C03C  F030         	movff	___ftsub@f2+2,___ftadd@f2+2
  7192  002DC6  EC9B  F00D         	call	___ftadd	;wreg free
  7193  002DCA  C02B  F037         	movff	?___ftadd,?___ftsub
  7194  002DCE  C02C  F038         	movff	?___ftadd+1,?___ftsub+1
  7195  002DD2  C02D  F039         	movff	?___ftadd+2,?___ftsub+2
  7196  002DD6  0012               	return	
  7197  002DD8                     __end_of___ftsub:
  7198                           	opt stack 0
  7199                           tblptru	equ	0xFF8
  7200                           tblptrh	equ	0xFF7
  7201                           tblptrl	equ	0xFF6
  7202                           tablat	equ	0xFF5
  7203                           prodh	equ	0xFF4
  7204                           prodl	equ	0xFF3
  7205                           postinc0	equ	0xFEE
  7206                           wreg	equ	0xFE8
  7207                           indf1	equ	0xFE7
  7208                           postdec1	equ	0xFE5
  7209                           fsr1h	equ	0xFE2
  7210                           fsr1l	equ	0xFE1
  7211                           indf2	equ	0xFDF
  7212                           postinc2	equ	0xFDE
  7213                           postdec2	equ	0xFDD
  7214                           fsr2h	equ	0xFDA
  7215                           fsr2l	equ	0xFD9
  7216                           status	equ	0xFD8
  7217                           
  7218 ;; *************** function ___ftge *****************
  7219 ;; Defined at:
  7220 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  7221 ;; Parameters:    Size  Location     Type
  7222 ;;  ff1             3   15[COMRAM] float 
  7223 ;;  ff2             3   18[COMRAM] float 
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;		None
  7226 ;; Return value:  Size  Location     Type
  7227 ;;		None               void
  7228 ;; Registers used:
  7229 ;;		wreg, status,2, status,0
  7230 ;; Tracked objects:
  7231 ;;		On entry : 0/0
  7232 ;;		On exit  : 0/0
  7233 ;;		Unchanged: 0/0
  7234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7235 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;Total ram usage:        9 bytes
  7240 ;; Hardware stack levels used:    1
  7241 ;; Hardware stack levels required when called:    2
  7242 ;; This function calls:
  7243 ;;		Nothing
  7244 ;; This function is called by:
  7245 ;;		_output_logic
  7246 ;;		_sprintf
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           	psect	text16
  7251  0027D6                     __ptext16:
  7252                           	opt stack 0
  7253  0027D6                     ___ftge:
  7254                           	opt stack 26
  7255                           
  7256                           ;incstack = 0
  7257  0027D6  AE12               	btfss	___ftge@ff1+2,7,c
  7258  0027D8  D016               	goto	l5731
  7259  0027DA  C010  F016         	movff	___ftge@ff1,??___ftge
  7260  0027DE  C011  F017         	movff	___ftge@ff1+1,??___ftge+1
  7261  0027E2  C012  F018         	movff	___ftge@ff1+2,??___ftge+2
  7262  0027E6  1E16               	comf	??___ftge,f,c
  7263  0027E8  1E17               	comf	??___ftge+1,f,c
  7264  0027EA  1E18               	comf	??___ftge+2,f,c
  7265  0027EC  2A16               	incf	??___ftge,f,c
  7266  0027EE  0E00               	movlw	0
  7267  0027F0  2217               	addwfc	??___ftge+1,f,c
  7268  0027F2  2218               	addwfc	??___ftge+2,f,c
  7269  0027F4  0E00               	movlw	0
  7270  0027F6  2416               	addwf	??___ftge,w,c
  7271  0027F8  6E10               	movwf	___ftge@ff1,c
  7272  0027FA  0E00               	movlw	0
  7273  0027FC  2017               	addwfc	??___ftge+1,w,c
  7274  0027FE  6E11               	movwf	___ftge@ff1+1,c
  7275  002800  0E80               	movlw	128
  7276  002802  2018               	addwfc	??___ftge+2,w,c
  7277  002804  6E12               	movwf	___ftge@ff1+2,c
  7278  002806                     l5731:
  7279  002806  AE15               	btfss	___ftge@ff2+2,7,c
  7280  002808  D016               	goto	l5735
  7281  00280A  C013  F016         	movff	___ftge@ff2,??___ftge
  7282  00280E  C014  F017         	movff	___ftge@ff2+1,??___ftge+1
  7283  002812  C015  F018         	movff	___ftge@ff2+2,??___ftge+2
  7284  002816  1E16               	comf	??___ftge,f,c
  7285  002818  1E17               	comf	??___ftge+1,f,c
  7286  00281A  1E18               	comf	??___ftge+2,f,c
  7287  00281C  2A16               	incf	??___ftge,f,c
  7288  00281E  0E00               	movlw	0
  7289  002820  2217               	addwfc	??___ftge+1,f,c
  7290  002822  2218               	addwfc	??___ftge+2,f,c
  7291  002824  0E00               	movlw	0
  7292  002826  2416               	addwf	??___ftge,w,c
  7293  002828  6E13               	movwf	___ftge@ff2,c
  7294  00282A  0E00               	movlw	0
  7295  00282C  2017               	addwfc	??___ftge+1,w,c
  7296  00282E  6E14               	movwf	___ftge@ff2+1,c
  7297  002830  0E80               	movlw	128
  7298  002832  2018               	addwfc	??___ftge+2,w,c
  7299  002834  6E15               	movwf	___ftge@ff2+2,c
  7300  002836                     l5735:
  7301  002836  0E00               	movlw	0
  7302  002838  1A10               	xorwf	___ftge@ff1,f,c
  7303  00283A  0E00               	movlw	0
  7304  00283C  1A11               	xorwf	___ftge@ff1+1,f,c
  7305  00283E  0E80               	movlw	128
  7306  002840  1A12               	xorwf	___ftge@ff1+2,f,c
  7307  002842  0E00               	movlw	0
  7308  002844  1A13               	xorwf	___ftge@ff2,f,c
  7309  002846  0E00               	movlw	0
  7310  002848  1A14               	xorwf	___ftge@ff2+1,f,c
  7311  00284A  0E80               	movlw	128
  7312  00284C  1A15               	xorwf	___ftge@ff2+2,f,c
  7313  00284E  5013               	movf	___ftge@ff2,w,c
  7314  002850  5C10               	subwf	___ftge@ff1,w,c
  7315  002852  5014               	movf	___ftge@ff2+1,w,c
  7316  002854  5811               	subwfb	___ftge@ff1+1,w,c
  7317  002856  5015               	movf	___ftge@ff2+2,w,c
  7318  002858  5812               	subwfb	___ftge@ff1+2,w,c
  7319  00285A  B0D8               	btfsc	status,0,c
  7320  00285C  D002               	goto	l5741
  7321  00285E  90D8               	bcf	status,0,c
  7322  002860  0012               	return	
  7323  002862                     l5741:
  7324  002862  80D8               	bsf	status,0,c
  7325  002864  0012               	return	
  7326  002866                     __end_of___ftge:
  7327                           	opt stack 0
  7328                           tblptru	equ	0xFF8
  7329                           tblptrh	equ	0xFF7
  7330                           tblptrl	equ	0xFF6
  7331                           tablat	equ	0xFF5
  7332                           prodh	equ	0xFF4
  7333                           prodl	equ	0xFF3
  7334                           postinc0	equ	0xFEE
  7335                           wreg	equ	0xFE8
  7336                           indf1	equ	0xFE7
  7337                           postdec1	equ	0xFE5
  7338                           fsr1h	equ	0xFE2
  7339                           fsr1l	equ	0xFE1
  7340                           indf2	equ	0xFDF
  7341                           postinc2	equ	0xFDE
  7342                           postdec2	equ	0xFDD
  7343                           fsr2h	equ	0xFDA
  7344                           fsr2l	equ	0xFD9
  7345                           status	equ	0xFD8
  7346                           
  7347 ;; *************** function _log *****************
  7348 ;; Defined at:
  7349 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\log.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  x               3   18[BANK0 ] float 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  exponent        2   21[BANK0 ] int 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  3   18[BANK0 ] int 
  7356 ;; Registers used:
  7357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7363 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7364 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;Total ram usage:        5 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    5
  7370 ;; This function calls:
  7371 ;;		___awtoft
  7372 ;;		___ftadd
  7373 ;;		___ftmul
  7374 ;;		_eval_poly
  7375 ;;		_frexp
  7376 ;; This function is called by:
  7377 ;;		_output_logic
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           	psect	text17
  7382  001F7A                     __ptext17:
  7383                           	opt stack 0
  7384  001F7A                     _log:
  7385                           	opt stack 24
  7386                           
  7387                           ;incstack = 0
  7388  001F7A  0100               	movlb	0	; () banked
  7389  001F7C  AFC1               	btfss	(log@x+2)& (0+255),7,b
  7390  001F7E  D00F               	goto	l6253
  7391                           
  7392                           ; BSR set to: 0
  7393  001F80  0E00               	movlw	0
  7394  001F82  0100               	movlb	0	; () banked
  7395  001F84  6F95               	movwf	(_errno+1)& (0+255),b
  7396  001F86  0E21               	movlw	33
  7397  001F88  6F94               	movwf	_errno& (0+255),b
  7398  001F8A  0E00               	movlw	0
  7399  001F8C  0100               	movlb	0	; () banked
  7400  001F8E  6FBF               	movwf	?_log& (0+255),b
  7401  001F90  0E00               	movlw	0
  7402  001F92  0100               	movlb	0	; () banked
  7403  001F94  6FC0               	movwf	(?_log+1)& (0+255),b
  7404  001F96  0E00               	movlw	0
  7405  001F98  0100               	movlb	0	; () banked
  7406  001F9A  6FC1               	movwf	(?_log+2)& (0+255),b
  7407                           
  7408                           ; BSR set to: 0
  7409  001F9C  0012               	return	
  7410  001F9E                     l6253:
  7411                           
  7412                           ; BSR set to: 0
  7413  001F9E  0100               	movlb	0	; () banked
  7414  001FA0  51BF               	movf	log@x& (0+255),w,b
  7415  001FA2  0100               	movlb	0	; () banked
  7416  001FA4  11C0               	iorwf	(log@x+1)& (0+255),w,b
  7417  001FA6  0100               	movlb	0	; () banked
  7418  001FA8  11C1               	iorwf	(log@x+2)& (0+255),w,b
  7419  001FAA  A4D8               	btfss	status,2,c
  7420  001FAC  D00F               	goto	l6259
  7421                           
  7422                           ; BSR set to: 0
  7423  001FAE  0E00               	movlw	0
  7424  001FB0  0100               	movlb	0	; () banked
  7425  001FB2  6F95               	movwf	(_errno+1)& (0+255),b
  7426  001FB4  0E22               	movlw	34
  7427  001FB6  6F94               	movwf	_errno& (0+255),b
  7428  001FB8  0E00               	movlw	0
  7429  001FBA  0100               	movlb	0	; () banked
  7430  001FBC  6FBF               	movwf	?_log& (0+255),b
  7431  001FBE  0E00               	movlw	0
  7432  001FC0  0100               	movlb	0	; () banked
  7433  001FC2  6FC0               	movwf	(?_log+1)& (0+255),b
  7434  001FC4  0E00               	movlw	0
  7435  001FC6  0100               	movlb	0	; () banked
  7436  001FC8  6FC1               	movwf	(?_log+2)& (0+255),b
  7437                           
  7438                           ; BSR set to: 0
  7439  001FCA  0012               	return	
  7440  001FCC                     l6259:
  7441                           
  7442                           ; BSR set to: 0
  7443  001FCC  0E00               	movlw	0
  7444  001FCE  6E3A               	movwf	___ftmul@f2,c
  7445  001FD0  0E00               	movlw	0
  7446  001FD2  6E3B               	movwf	___ftmul@f2+1,c
  7447  001FD4  0E40               	movlw	64
  7448  001FD6  6E3C               	movwf	___ftmul@f2+2,c
  7449  001FD8  0EC2               	movlw	low log@exponent
  7450  001FDA  6E13               	movwf	frexp@eptr,c
  7451  001FDC  0E00               	movlw	high log@exponent
  7452  001FDE  6E14               	movwf	frexp@eptr+1,c
  7453  001FE0  C0BF  F010         	movff	log@x,frexp@value
  7454  001FE4  C0C0  F011         	movff	log@x+1,frexp@value+1
  7455  001FE8  C0C1  F012         	movff	log@x+2,frexp@value+2
  7456  001FEC  EC33  F014         	call	_frexp	;wreg free
  7457  001FF0  C010  F037         	movff	?_frexp,___ftmul@f1
  7458  001FF4  C011  F038         	movff	?_frexp+1,___ftmul@f1+1
  7459  001FF8  C012  F039         	movff	?_frexp+2,___ftmul@f1+2
  7460  001FFC  EC21  F012         	call	___ftmul	;wreg free
  7461  002000  C037  F02B         	movff	?___ftmul,___ftadd@f1
  7462  002004  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  7463  002008  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  7464  00200C  0E00               	movlw	0
  7465  00200E  6E2E               	movwf	___ftadd@f2,c
  7466  002010  0E80               	movlw	128
  7467  002012  6E2F               	movwf	___ftadd@f2+1,c
  7468  002014  0EBF               	movlw	191
  7469  002016  6E30               	movwf	___ftadd@f2+2,c
  7470  002018  EC9B  F00D         	call	___ftadd	;wreg free
  7471  00201C  C02B  F0BF         	movff	?___ftadd,log@x
  7472  002020  C02C  F0C0         	movff	?___ftadd+1,log@x+1
  7473  002024  C02D  F0C1         	movff	?___ftadd+2,log@x+2
  7474  002028  0100               	movlb	0	; () banked
  7475  00202A  07C2               	decf	log@exponent& (0+255),f,b
  7476  00202C  A0D8               	btfss	status,0,c
  7477  00202E  07C3               	decf	(log@exponent+1)& (0+255),f,b
  7478                           
  7479                           ; BSR set to: 0
  7480  002030  C0BF  F0B3         	movff	log@x,eval_poly@x
  7481  002034  C0C0  F0B4         	movff	log@x+1,eval_poly@x+1
  7482  002038  C0C1  F0B5         	movff	log@x+2,eval_poly@x+2
  7483  00203C  0E71               	movlw	low log@coeff
  7484  00203E  0100               	movlb	0	; () banked
  7485  002040  6FB6               	movwf	eval_poly@d& (0+255),b
  7486  002042  0EFE               	movlw	high log@coeff
  7487  002044  0100               	movlb	0	; () banked
  7488  002046  6FB7               	movwf	(eval_poly@d+1)& (0+255),b
  7489  002048  0E00               	movlw	0
  7490  00204A  0100               	movlb	0	; () banked
  7491  00204C  6FB9               	movwf	(eval_poly@n+1)& (0+255),b
  7492  00204E  0E08               	movlw	8
  7493  002050  6FB8               	movwf	eval_poly@n& (0+255),b
  7494  002052  EC24  F013         	call	_eval_poly	;wreg free
  7495  002056  C0B3  F0BF         	movff	?_eval_poly,log@x
  7496  00205A  C0B4  F0C0         	movff	?_eval_poly+1,log@x+1
  7497  00205E  C0B5  F0C1         	movff	?_eval_poly+2,log@x+2
  7498  002062  0E72               	movlw	114
  7499  002064  6E3A               	movwf	___ftmul@f2,c
  7500  002066  0E31               	movlw	49
  7501  002068  6E3B               	movwf	___ftmul@f2+1,c
  7502  00206A  0E3F               	movlw	63
  7503  00206C  6E3C               	movwf	___ftmul@f2+2,c
  7504  00206E  C0C2  F018         	movff	log@exponent,___awtoft@c
  7505  002072  C0C3  F019         	movff	log@exponent+1,___awtoft@c+1
  7506  002076  EC0A  F017         	call	___awtoft	;wreg free
  7507  00207A  C018  F037         	movff	?___awtoft,___ftmul@f1
  7508  00207E  C019  F038         	movff	?___awtoft+1,___ftmul@f1+1
  7509  002082  C01A  F039         	movff	?___awtoft+2,___ftmul@f1+2
  7510  002086  EC21  F012         	call	___ftmul	;wreg free
  7511  00208A  C037  F02B         	movff	?___ftmul,___ftadd@f1
  7512  00208E  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  7513  002092  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  7514  002096  C0BF  F02E         	movff	log@x,___ftadd@f2
  7515  00209A  C0C0  F02F         	movff	log@x+1,___ftadd@f2+1
  7516  00209E  C0C1  F030         	movff	log@x+2,___ftadd@f2+2
  7517  0020A2  EC9B  F00D         	call	___ftadd	;wreg free
  7518  0020A6  C02B  F0BF         	movff	?___ftadd,?_log
  7519  0020AA  C02C  F0C0         	movff	?___ftadd+1,?_log+1
  7520  0020AE  C02D  F0C1         	movff	?___ftadd+2,?_log+2
  7521  0020B2  0012               	return	
  7522  0020B4                     __end_of_log:
  7523                           	opt stack 0
  7524                           tblptru	equ	0xFF8
  7525                           tblptrh	equ	0xFF7
  7526                           tblptrl	equ	0xFF6
  7527                           tablat	equ	0xFF5
  7528                           prodh	equ	0xFF4
  7529                           prodl	equ	0xFF3
  7530                           postinc0	equ	0xFEE
  7531                           wreg	equ	0xFE8
  7532                           indf1	equ	0xFE7
  7533                           postdec1	equ	0xFE5
  7534                           fsr1h	equ	0xFE2
  7535                           fsr1l	equ	0xFE1
  7536                           indf2	equ	0xFDF
  7537                           postinc2	equ	0xFDE
  7538                           postdec2	equ	0xFDD
  7539                           fsr2h	equ	0xFDA
  7540                           fsr2l	equ	0xFD9
  7541                           status	equ	0xFD8
  7542                           
  7543 ;; *************** function _frexp *****************
  7544 ;; Defined at:
  7545 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\frexp.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;  value           3   15[COMRAM] int 
  7548 ;;  eptr            2   18[COMRAM] PTR int 
  7549 ;;		 -> log@exponent(2), 
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;		None
  7552 ;; Return value:  Size  Location     Type
  7553 ;;                  3   15[COMRAM] PTR int 
  7554 ;; Registers used:
  7555 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7561 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;Total ram usage:        7 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; Hardware stack levels required when called:    2
  7568 ;; This function calls:
  7569 ;;		Nothing
  7570 ;; This function is called by:
  7571 ;;		_log
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           	psect	text18
  7576  002866                     __ptext18:
  7577                           	opt stack 0
  7578  002866                     _frexp:
  7579                           	opt stack 26
  7580                           
  7581                           ;incstack = 0
  7582  002866  5010               	movf	frexp@value,w,c
  7583  002868  1011               	iorwf	frexp@value+1,w,c
  7584  00286A  1012               	iorwf	frexp@value+2,w,c
  7585  00286C  A4D8               	btfss	status,2,c
  7586  00286E  D00F               	goto	l5855
  7587  002870  C013  FFD9         	movff	frexp@eptr,fsr2l
  7588  002874  C014  FFDA         	movff	frexp@eptr+1,fsr2h
  7589  002878  0E00               	movlw	0
  7590  00287A  6EDE               	movwf	postinc2,c
  7591  00287C  0E00               	movlw	0
  7592  00287E  6EDD               	movwf	postdec2,c
  7593  002880  0E00               	movlw	0
  7594  002882  6E10               	movwf	?_frexp,c
  7595  002884  0E00               	movlw	0
  7596  002886  6E11               	movwf	?_frexp+1,c
  7597  002888  0E00               	movlw	0
  7598  00288A  6E12               	movwf	?_frexp+2,c
  7599  00288C  0012               	return	
  7600  00288E                     l5855:
  7601  00288E  5012               	movf	frexp@value+2,w,c
  7602  002890  0B7F               	andlw	127
  7603  002892  6E15               	movwf	??_frexp& (0+255),c
  7604  002894  6A16               	clrf	(??_frexp+1)& (0+255),c
  7605  002896  90D8               	bcf	status,0,c
  7606  002898  3615               	rlcf	??_frexp,f,c
  7607  00289A  3616               	rlcf	??_frexp+1,f,c
  7608  00289C  C013  FFD9         	movff	frexp@eptr,fsr2l
  7609  0028A0  C014  FFDA         	movff	frexp@eptr+1,fsr2h
  7610  0028A4  C015  FFDE         	movff	??_frexp,postinc2
  7611  0028A8  C016  FFDD         	movff	??_frexp+1,postdec2
  7612  0028AC  AE11               	btfss	frexp@value+1,7,c
  7613  0028AE  D003               	goto	u6280
  7614  0028B0  6A15               	clrf	??_frexp& (0+255),c
  7615  0028B2  2A15               	incf	??_frexp& (0+255),f,c
  7616  0028B4  D001               	goto	u6288
  7617  0028B6                     u6280:
  7618  0028B6  6A15               	clrf	??_frexp& (0+255),c
  7619  0028B8                     u6288:
  7620  0028B8  5015               	movf	??_frexp,w,c
  7621  0028BA  C013  FFD9         	movff	frexp@eptr,fsr2l
  7622  0028BE  C014  FFDA         	movff	frexp@eptr+1,fsr2h
  7623  0028C2  12DE               	iorwf	postinc2,f,c
  7624  0028C4  0E00               	movlw	0
  7625  0028C6  12DD               	iorwf	postdec2,f,c
  7626  0028C8  C013  FFD9         	movff	frexp@eptr,fsr2l
  7627  0028CC  C014  FFDA         	movff	frexp@eptr+1,fsr2h
  7628  0028D0  0E82               	movlw	130
  7629  0028D2  26DE               	addwf	postinc2,f,c
  7630  0028D4  0EFF               	movlw	255
  7631  0028D6  22DD               	addwfc	postdec2,f,c
  7632  0028D8  8012               	bsf	frexp@value+2,0,c
  7633  0028DA  8212               	bsf	frexp@value+2,1,c
  7634  0028DC  8412               	bsf	frexp@value+2,2,c
  7635  0028DE  8612               	bsf	frexp@value+2,3,c
  7636  0028E0  8812               	bsf	frexp@value+2,4,c
  7637  0028E2  8A12               	bsf	frexp@value+2,5,c
  7638  0028E4  9C12               	bcf	frexp@value+2,6,c
  7639  0028E6  9E11               	bcf	frexp@value+1,7,c
  7640  0028E8  C010  F010         	movff	frexp@value,?_frexp
  7641  0028EC  C011  F011         	movff	frexp@value+1,?_frexp+1
  7642  0028F0  C012  F012         	movff	frexp@value+2,?_frexp+2
  7643  0028F4  0012               	return	
  7644  0028F6                     __end_of_frexp:
  7645                           	opt stack 0
  7646                           tblptru	equ	0xFF8
  7647                           tblptrh	equ	0xFF7
  7648                           tblptrl	equ	0xFF6
  7649                           tablat	equ	0xFF5
  7650                           prodh	equ	0xFF4
  7651                           prodl	equ	0xFF3
  7652                           postinc0	equ	0xFEE
  7653                           wreg	equ	0xFE8
  7654                           indf1	equ	0xFE7
  7655                           postdec1	equ	0xFE5
  7656                           fsr1h	equ	0xFE2
  7657                           fsr1l	equ	0xFE1
  7658                           indf2	equ	0xFDF
  7659                           postinc2	equ	0xFDE
  7660                           postdec2	equ	0xFDD
  7661                           fsr2h	equ	0xFDA
  7662                           fsr2l	equ	0xFD9
  7663                           status	equ	0xFD8
  7664                           
  7665 ;; *************** function _eval_poly *****************
  7666 ;; Defined at:
  7667 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\evalpoly.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;  x               3    6[BANK0 ] PTR int 
  7670 ;;  d               2    9[BANK0 ] PTR const 
  7671 ;;		 -> log@coeff(27), 
  7672 ;;  n               2   11[BANK0 ] int 
  7673 ;; Auto vars:     Size  Location     Type
  7674 ;;  res             3   15[BANK0 ] int 
  7675 ;; Return value:  Size  Location     Type
  7676 ;;                  3    6[BANK0 ] int 
  7677 ;; Registers used:
  7678 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7679 ;; Tracked objects:
  7680 ;;		On entry : 0/0
  7681 ;;		On exit  : 0/0
  7682 ;;		Unchanged: 0/0
  7683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7684 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7686 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7687 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7688 ;;Total ram usage:       12 bytes
  7689 ;; Hardware stack levels used:    1
  7690 ;; Hardware stack levels required when called:    4
  7691 ;; This function calls:
  7692 ;;		___ftadd
  7693 ;;		___ftmul
  7694 ;;		___wmul
  7695 ;; This function is called by:
  7696 ;;		_log
  7697 ;; This function uses a non-reentrant model
  7698 ;;
  7699                           
  7700                           	psect	text19
  7701  002648                     __ptext19:
  7702                           	opt stack 0
  7703  002648                     _eval_poly:
  7704                           	opt stack 24
  7705                           
  7706                           ;incstack = 0
  7707  002648  C0B8  F01E         	movff	eval_poly@n,___wmul@multiplier
  7708  00264C  C0B9  F01F         	movff	eval_poly@n+1,___wmul@multiplier+1
  7709  002650  0E00               	movlw	0
  7710  002652  6E21               	movwf	___wmul@multiplicand+1,c
  7711  002654  0E03               	movlw	3
  7712  002656  6E20               	movwf	___wmul@multiplicand,c
  7713  002658  EC6C  F017         	call	___wmul	;wreg free
  7714  00265C  C0B6  F0BA         	movff	eval_poly@d,??_eval_poly
  7715  002660  C0B7  F0BB         	movff	eval_poly@d+1,??_eval_poly+1
  7716  002664  501E               	movf	?___wmul,w,c
  7717  002666  0100               	movlb	0	; () banked
  7718  002668  27BA               	addwf	??_eval_poly& (0+255),f,b
  7719  00266A  501F               	movf	?___wmul+1,w,c
  7720  00266C  0100               	movlb	0	; () banked
  7721  00266E  23BB               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7722  002670  C0BA  FFF6         	movff	??_eval_poly,tblptrl
  7723  002674  C0BB  FFF7         	movff	??_eval_poly+1,tblptrh
  7724  002678                     	if	0	;tblptru may be non-zero
  7725  002678                     	endif
  7726  002678                     	if	0	;tblptru may be non-zero
  7727  002678                     	endif
  7728  002678  0009               	tblrd		*+
  7729  00267A  CFF5 F0BC          	movff	tablat,eval_poly@res
  7730  00267E  0009               	tblrd		*+
  7731  002680  CFF5 F0BD          	movff	tablat,eval_poly@res+1
  7732  002684  000A               	tblrd		*-
  7733  002686  CFF5 F0BE          	movff	tablat,eval_poly@res+2
  7734  00268A  D041               	goto	l5871
  7735  00268C                     l5869:
  7736                           
  7737                           ; BSR set to: 0
  7738  00268C  C0BC  F03A         	movff	eval_poly@res,___ftmul@f2
  7739  002690  C0BD  F03B         	movff	eval_poly@res+1,___ftmul@f2+1
  7740  002694  C0BE  F03C         	movff	eval_poly@res+2,___ftmul@f2+2
  7741  002698  C0B3  F037         	movff	eval_poly@x,___ftmul@f1
  7742  00269C  C0B4  F038         	movff	eval_poly@x+1,___ftmul@f1+1
  7743  0026A0  C0B5  F039         	movff	eval_poly@x+2,___ftmul@f1+2
  7744  0026A4  EC21  F012         	call	___ftmul	;wreg free
  7745  0026A8  C037  F02B         	movff	?___ftmul,___ftadd@f1
  7746  0026AC  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  7747  0026B0  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  7748  0026B4  0E00               	movlw	0
  7749  0026B6  6E21               	movwf	___wmul@multiplicand+1,c
  7750  0026B8  0E03               	movlw	3
  7751  0026BA  6E20               	movwf	___wmul@multiplicand,c
  7752  0026BC  0100               	movlb	0	; () banked
  7753  0026BE  07B8               	decf	eval_poly@n& (0+255),f,b
  7754  0026C0  A0D8               	btfss	status,0,c
  7755  0026C2  07B9               	decf	(eval_poly@n+1)& (0+255),f,b
  7756  0026C4  C0B8  F01E         	movff	eval_poly@n,___wmul@multiplier
  7757  0026C8  C0B9  F01F         	movff	eval_poly@n+1,___wmul@multiplier+1
  7758  0026CC  EC6C  F017         	call	___wmul	;wreg free
  7759  0026D0  C0B6  F0BA         	movff	eval_poly@d,??_eval_poly
  7760  0026D4  C0B7  F0BB         	movff	eval_poly@d+1,??_eval_poly+1
  7761  0026D8  501E               	movf	?___wmul,w,c
  7762  0026DA  0100               	movlb	0	; () banked
  7763  0026DC  27BA               	addwf	??_eval_poly& (0+255),f,b
  7764  0026DE  501F               	movf	?___wmul+1,w,c
  7765  0026E0  0100               	movlb	0	; () banked
  7766  0026E2  23BB               	addwfc	(??_eval_poly+1)& (0+255),f,b
  7767  0026E4  C0BA  FFF6         	movff	??_eval_poly,tblptrl
  7768  0026E8  C0BB  FFF7         	movff	??_eval_poly+1,tblptrh
  7769  0026EC                     	if	0	;tblptru may be non-zero
  7770  0026EC                     	endif
  7771  0026EC                     	if	0	;tblptru may be non-zero
  7772  0026EC                     	endif
  7773  0026EC  0009               	tblrd		*+
  7774  0026EE  CFF5 F02E          	movff	tablat,___ftadd@f2
  7775  0026F2  0009               	tblrd		*+
  7776  0026F4  CFF5 F02F          	movff	tablat,___ftadd@f2+1
  7777  0026F8  000A               	tblrd		*-
  7778  0026FA  CFF5 F030          	movff	tablat,___ftadd@f2+2
  7779  0026FE  EC9B  F00D         	call	___ftadd	;wreg free
  7780  002702  C02B  F0BC         	movff	?___ftadd,eval_poly@res
  7781  002706  C02C  F0BD         	movff	?___ftadd+1,eval_poly@res+1
  7782  00270A  C02D  F0BE         	movff	?___ftadd+2,eval_poly@res+2
  7783  00270E                     l5871:
  7784  00270E  0100               	movlb	0	; () banked
  7785  002710  51B8               	movf	eval_poly@n& (0+255),w,b
  7786  002712  0100               	movlb	0	; () banked
  7787  002714  11B9               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7788  002716  A4D8               	btfss	status,2,c
  7789  002718  D7B9               	goto	l5869
  7790                           
  7791                           ; BSR set to: 0
  7792  00271A  C0BC  F0B3         	movff	eval_poly@res,?_eval_poly
  7793  00271E  C0BD  F0B4         	movff	eval_poly@res+1,?_eval_poly+1
  7794  002722  C0BE  F0B5         	movff	eval_poly@res+2,?_eval_poly+2
  7795                           
  7796                           ; BSR set to: 0
  7797  002726  0012               	return		;funcret
  7798  002728                     __end_of_eval_poly:
  7799                           	opt stack 0
  7800                           tblptru	equ	0xFF8
  7801                           tblptrh	equ	0xFF7
  7802                           tblptrl	equ	0xFF6
  7803                           tablat	equ	0xFF5
  7804                           prodh	equ	0xFF4
  7805                           prodl	equ	0xFF3
  7806                           postinc0	equ	0xFEE
  7807                           wreg	equ	0xFE8
  7808                           indf1	equ	0xFE7
  7809                           postdec1	equ	0xFE5
  7810                           fsr1h	equ	0xFE2
  7811                           fsr1l	equ	0xFE1
  7812                           indf2	equ	0xFDF
  7813                           postinc2	equ	0xFDE
  7814                           postdec2	equ	0xFDD
  7815                           fsr2h	equ	0xFDA
  7816                           fsr2l	equ	0xFD9
  7817                           status	equ	0xFD8
  7818                           
  7819 ;; *************** function ___wmul *****************
  7820 ;; Defined at:
  7821 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  7822 ;; Parameters:    Size  Location     Type
  7823 ;;  multiplier      2   29[COMRAM] unsigned int 
  7824 ;;  multiplicand    2   31[COMRAM] unsigned int 
  7825 ;; Auto vars:     Size  Location     Type
  7826 ;;  product         2   33[COMRAM] unsigned int 
  7827 ;; Return value:  Size  Location     Type
  7828 ;;                  2   29[COMRAM] unsigned int 
  7829 ;; Registers used:
  7830 ;;		wreg, status,2, status,0, prodl, prodh
  7831 ;; Tracked objects:
  7832 ;;		On entry : 0/0
  7833 ;;		On exit  : 0/0
  7834 ;;		Unchanged: 0/0
  7835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7836 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7839 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7840 ;;Total ram usage:        6 bytes
  7841 ;; Hardware stack levels used:    1
  7842 ;; Hardware stack levels required when called:    2
  7843 ;; This function calls:
  7844 ;;		Nothing
  7845 ;; This function is called by:
  7846 ;;		_output_logic
  7847 ;;		_fround
  7848 ;;		_scale
  7849 ;;		_sprintf
  7850 ;;		_eval_poly
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           	psect	text20
  7855  002ED8                     __ptext20:
  7856                           	opt stack 0
  7857  002ED8                     ___wmul:
  7858                           	opt stack 25
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;incstack = 0
  7862  002ED8  501E               	movf	___wmul@multiplier,w,c
  7863  002EDA  0220               	mulwf	___wmul@multiplicand,c
  7864  002EDC  CFF3 F022          	movff	prodl,___wmul@product
  7865  002EE0  CFF4 F023          	movff	prodh,___wmul@product+1
  7866  002EE4  501E               	movf	___wmul@multiplier,w,c
  7867  002EE6  0221               	mulwf	___wmul@multiplicand+1,c
  7868  002EE8  50F3               	movf	prodl,w,c
  7869  002EEA  2623               	addwf	___wmul@product+1,f,c
  7870  002EEC  501F               	movf	___wmul@multiplier+1,w,c
  7871  002EEE  0220               	mulwf	___wmul@multiplicand,c
  7872  002EF0  50F3               	movf	prodl,w,c
  7873  002EF2  2623               	addwf	___wmul@product+1,f,c
  7874  002EF4  C022  F01E         	movff	___wmul@product,?___wmul
  7875  002EF8  C023  F01F         	movff	___wmul@product+1,?___wmul+1
  7876  002EFC  0012               	return	
  7877  002EFE                     __end_of___wmul:
  7878                           	opt stack 0
  7879                           tblptru	equ	0xFF8
  7880                           tblptrh	equ	0xFF7
  7881                           tblptrl	equ	0xFF6
  7882                           tablat	equ	0xFF5
  7883                           prodh	equ	0xFF4
  7884                           prodl	equ	0xFF3
  7885                           postinc0	equ	0xFEE
  7886                           wreg	equ	0xFE8
  7887                           indf1	equ	0xFE7
  7888                           postdec1	equ	0xFE5
  7889                           fsr1h	equ	0xFE2
  7890                           fsr1l	equ	0xFE1
  7891                           indf2	equ	0xFDF
  7892                           postinc2	equ	0xFDE
  7893                           postdec2	equ	0xFDD
  7894                           fsr2h	equ	0xFDA
  7895                           fsr2l	equ	0xFD9
  7896                           status	equ	0xFD8
  7897                           
  7898 ;; *************** function ___awtoft *****************
  7899 ;; Defined at:
  7900 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awtoft.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;  c               2   23[COMRAM] int 
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;  sign            1   26[COMRAM] unsigned char 
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  3   23[COMRAM] float 
  7907 ;; Registers used:
  7908 ;;		wreg, status,2, status,0, cstack
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7914 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7917 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7918 ;;Total ram usage:        4 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    3
  7921 ;; This function calls:
  7922 ;;		___ftpack
  7923 ;; This function is called by:
  7924 ;;		_log
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           	psect	text21
  7929  002E14                     __ptext21:
  7930                           	opt stack 0
  7931  002E14                     ___awtoft:
  7932                           	opt stack 25
  7933                           
  7934                           ;incstack = 0
  7935  002E14  0E00               	movlw	0
  7936  002E16  6E1B               	movwf	___awtoft@sign,c
  7937  002E18  AE19               	btfss	___awtoft@c+1,7,c
  7938  002E1A  D006               	goto	l5723
  7939  002E1C  6C18               	negf	___awtoft@c,c
  7940  002E1E  1E19               	comf	___awtoft@c+1,f,c
  7941  002E20  B0D8               	btfsc	status,0,c
  7942  002E22  2A19               	incf	___awtoft@c+1,f,c
  7943  002E24  0E01               	movlw	1
  7944  002E26  6E1B               	movwf	___awtoft@sign,c
  7945  002E28                     l5723:
  7946  002E28  C018  F010         	movff	___awtoft@c,___ftpack@arg
  7947  002E2C  C019  F011         	movff	___awtoft@c+1,___ftpack@arg+1
  7948  002E30  6A12               	clrf	___ftpack@arg+2,c
  7949  002E32  0E8E               	movlw	142
  7950  002E34  6E13               	movwf	___ftpack@exp,c
  7951  002E36  C01B  F014         	movff	___awtoft@sign,___ftpack@sign
  7952  002E3A  EC94  F013         	call	___ftpack	;wreg free
  7953  002E3E  C010  F018         	movff	?___ftpack,?___awtoft
  7954  002E42  C011  F019         	movff	?___ftpack+1,?___awtoft+1
  7955  002E46  C012  F01A         	movff	?___ftpack+2,?___awtoft+2
  7956  002E4A  0012               	return	
  7957  002E4C                     __end_of___awtoft:
  7958                           	opt stack 0
  7959                           tblptru	equ	0xFF8
  7960                           tblptrh	equ	0xFF7
  7961                           tblptrl	equ	0xFF6
  7962                           tablat	equ	0xFF5
  7963                           prodh	equ	0xFF4
  7964                           prodl	equ	0xFF3
  7965                           postinc0	equ	0xFEE
  7966                           wreg	equ	0xFE8
  7967                           indf1	equ	0xFE7
  7968                           postdec1	equ	0xFE5
  7969                           fsr1h	equ	0xFE2
  7970                           fsr1l	equ	0xFE1
  7971                           indf2	equ	0xFDF
  7972                           postinc2	equ	0xFDE
  7973                           postdec2	equ	0xFDD
  7974                           fsr2h	equ	0xFDA
  7975                           fsr2l	equ	0xFD9
  7976                           status	equ	0xFD8
  7977                           
  7978 ;; *************** function _StopADC *****************
  7979 ;; Defined at:
  7980 ;;		line 31 in file "../ADC.c"
  7981 ;; Parameters:    Size  Location     Type
  7982 ;;		None
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;		None
  7985 ;; Return value:  Size  Location     Type
  7986 ;;		None               void
  7987 ;; Registers used:
  7988 ;;		None
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7998 ;;Total ram usage:        0 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:    2
  8001 ;; This function calls:
  8002 ;;		Nothing
  8003 ;; This function is called by:
  8004 ;;		_output_logic
  8005 ;; This function uses a non-reentrant model
  8006 ;;
  8007                           
  8008                           	psect	text22
  8009  0030DA                     __ptext22:
  8010                           	opt stack 0
  8011  0030DA                     _StopADC:
  8012                           	opt stack 27
  8013                           
  8014                           ;ADC.c: 33: ADON = 0;
  8015                           
  8016                           ;incstack = 0
  8017  0030DA  90C2               	bcf	4034,0,c	;volatile
  8018  0030DC  0012               	return		;funcret
  8019  0030DE                     __end_of_StopADC:
  8020                           	opt stack 0
  8021                           tblptru	equ	0xFF8
  8022                           tblptrh	equ	0xFF7
  8023                           tblptrl	equ	0xFF6
  8024                           tablat	equ	0xFF5
  8025                           prodh	equ	0xFF4
  8026                           prodl	equ	0xFF3
  8027                           postinc0	equ	0xFEE
  8028                           wreg	equ	0xFE8
  8029                           indf1	equ	0xFE7
  8030                           postdec1	equ	0xFE5
  8031                           fsr1h	equ	0xFE2
  8032                           fsr1l	equ	0xFE1
  8033                           indf2	equ	0xFDF
  8034                           postinc2	equ	0xFDE
  8035                           postdec2	equ	0xFDD
  8036                           fsr2h	equ	0xFDA
  8037                           fsr2l	equ	0xFD9
  8038                           status	equ	0xFD8
  8039                           
  8040 ;; *************** function _SelectChannelADC *****************
  8041 ;; Defined at:
  8042 ;;		line 27 in file "../ADC.c"
  8043 ;; Parameters:    Size  Location     Type
  8044 ;;  channel         2   15[COMRAM] int 
  8045 ;; Auto vars:     Size  Location     Type
  8046 ;;		None
  8047 ;; Return value:  Size  Location     Type
  8048 ;;		None               void
  8049 ;; Registers used:
  8050 ;;		wreg, status,2, status,0
  8051 ;; Tracked objects:
  8052 ;;		On entry : 0/0
  8053 ;;		On exit  : 0/0
  8054 ;;		Unchanged: 0/0
  8055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8056 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8058 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8059 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8060 ;;Total ram usage:        3 bytes
  8061 ;; Hardware stack levels used:    1
  8062 ;; Hardware stack levels required when called:    2
  8063 ;; This function calls:
  8064 ;;		Nothing
  8065 ;; This function is called by:
  8066 ;;		_output_logic
  8067 ;; This function uses a non-reentrant model
  8068 ;;
  8069                           
  8070                           	psect	text23
  8071  00305E                     __ptext23:
  8072                           	opt stack 0
  8073  00305E                     _SelectChannelADC:
  8074                           	opt stack 27
  8075                           
  8076                           ;ADC.c: 28: ADCON0bits.CHS = channel;
  8077                           
  8078                           ;incstack = 0
  8079  00305E  C010  F012         	movff	SelectChannelADC@channel,??_SelectChannelADC
  8080  003062  4612               	rlncf	??_SelectChannelADC,f,c
  8081  003064  4612               	rlncf	??_SelectChannelADC,f,c
  8082  003066  50C2               	movf	4034,w,c	;volatile
  8083  003068  1812               	xorwf	??_SelectChannelADC,w,c
  8084  00306A  0BC3               	andlw	-61
  8085  00306C  1812               	xorwf	??_SelectChannelADC,w,c
  8086  00306E  6EC2               	movwf	4034,c	;volatile
  8087  003070  0012               	return		;funcret
  8088  003072                     __end_of_SelectChannelADC:
  8089                           	opt stack 0
  8090                           tblptru	equ	0xFF8
  8091                           tblptrh	equ	0xFF7
  8092                           tblptrl	equ	0xFF6
  8093                           tablat	equ	0xFF5
  8094                           prodh	equ	0xFF4
  8095                           prodl	equ	0xFF3
  8096                           postinc0	equ	0xFEE
  8097                           wreg	equ	0xFE8
  8098                           indf1	equ	0xFE7
  8099                           postdec1	equ	0xFE5
  8100                           fsr1h	equ	0xFE2
  8101                           fsr1l	equ	0xFE1
  8102                           indf2	equ	0xFDF
  8103                           postinc2	equ	0xFDE
  8104                           postdec2	equ	0xFDD
  8105                           fsr2h	equ	0xFDA
  8106                           fsr2l	equ	0xFD9
  8107                           status	equ	0xFD8
  8108                           
  8109 ;; *************** function _ReadByte_I2C *****************
  8110 ;; Defined at:
  8111 ;;		line 129 in file "../I2C1.c"
  8112 ;; Parameters:    Size  Location     Type
  8113 ;;  ReadAddressI    1    wreg     unsigned char 
  8114 ;;  RegisterAddr    1    9[BANK0 ] unsigned char 
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;  ReadAddressI    1   20[BANK0 ] unsigned char 
  8117 ;;  Temperature     3   17[BANK0 ] float 
  8118 ;;  tmp             2   12[BANK0 ] unsigned int 
  8119 ;;  UpperByte       1   22[BANK0 ] unsigned char 
  8120 ;;  LowerByte       1   21[BANK0 ] unsigned char 
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  3    9[BANK0 ] float 
  8123 ;; Registers used:
  8124 ;;		wreg, status,2, status,0, cstack
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/0
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8130 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8133 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8134 ;;Total ram usage:       15 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; Hardware stack levels required when called:    4
  8137 ;; This function calls:
  8138 ;;		_IdleI2C
  8139 ;;		_ReadI2C
  8140 ;;		_ResetVariables_I2C
  8141 ;;		_WaitFlag
  8142 ;;		_WaitForACK
  8143 ;;		_WriteI2C
  8144 ;;		___ftadd
  8145 ;;		___ftdiv
  8146 ;;		___ftmul
  8147 ;;		___ftneg
  8148 ;;		___lbtoft
  8149 ;; This function is called by:
  8150 ;;		_output_logic
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           	psect	text24
  8155  00191E                     __ptext24:
  8156                           	opt stack 0
  8157  00191E                     _ReadByte_I2C:
  8158                           	opt stack 25
  8159                           
  8160                           ;incstack = 0
  8161                           ;ReadByte_I2C@ReadAddressIC stored from wreg
  8162  00191E  0100               	movlb	0	; () banked
  8163  001920  6FC1               	movwf	ReadByte_I2C@ReadAddressIC& (0+255),b
  8164                           
  8165                           ;I2C1.c: 131: unsigned char UpperByte = 0;
  8166  001922  0E00               	movlw	0
  8167  001924  0100               	movlb	0	; () banked
  8168  001926  6FC3               	movwf	ReadByte_I2C@UpperByte& (0+255),b
  8169                           
  8170                           ;I2C1.c: 132: unsigned char LowerByte = 0;
  8171  001928  0E00               	movlw	0
  8172  00192A  0100               	movlb	0	; () banked
  8173  00192C  6FC2               	movwf	ReadByte_I2C@LowerByte& (0+255),b
  8174                           
  8175                           ;I2C1.c: 133: unsigned int tmp = 0;
  8176  00192E  0E00               	movlw	0
  8177  001930  0100               	movlb	0	; () banked
  8178  001932  6FBA               	movwf	(ReadByte_I2C@tmp+1)& (0+255),b
  8179  001934  0E00               	movlw	0
  8180  001936  6FB9               	movwf	ReadByte_I2C@tmp& (0+255),b
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;I2C1.c: 134: float Temperature = 0;
  8184  001938  0E00               	movlw	0
  8185  00193A  0100               	movlb	0	; () banked
  8186  00193C  6FBE               	movwf	ReadByte_I2C@Temperature& (0+255),b
  8187  00193E  0E00               	movlw	0
  8188  001940  0100               	movlb	0	; () banked
  8189  001942  6FBF               	movwf	(ReadByte_I2C@Temperature+1)& (0+255),b
  8190  001944  0E00               	movlw	0
  8191  001946  0100               	movlb	0	; () banked
  8192  001948  6FC0               	movwf	(ReadByte_I2C@Temperature+2)& (0+255),b
  8193                           
  8194                           ; BSR set to: 0
  8195                           ;I2C1.c: 135: ResetVariables_I2C();
  8196  00194A  EC5D  F018         	call	_ResetVariables_I2C	;wreg free
  8197                           
  8198                           ;I2C1.c: 136: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  8199  00194E  80C5               	bsf	4037,0,c	;volatile
  8200  001950                     l67:
  8201  001950  B0C5               	btfsc	4037,0,c	;volatile
  8202  001952  D7FE               	goto	l67
  8203                           
  8204                           ;I2C1.c: 138: WaitFlag();
  8205  001954  EC63  F018         	call	_WaitFlag	;wreg free
  8206                           
  8207                           ;I2C1.c: 141: WriteI2C(ReadAddressIC);
  8208  001958  0100               	movlb	0	; () banked
  8209  00195A  51C1               	movf	ReadByte_I2C@ReadAddressIC& (0+255),w,b
  8210  00195C  ECA6  F016         	call	_WriteI2C
  8211                           
  8212                           ;I2C1.c: 142: WaitFlag();
  8213  001960  EC63  F018         	call	_WaitFlag	;wreg free
  8214                           
  8215                           ;I2C1.c: 144: WaitForACK();
  8216  001964  EC67  F018         	call	_WaitForACK	;wreg free
  8217                           
  8218                           ;I2C1.c: 146: WriteI2C(RegisterAddress);
  8219  001968  0100               	movlb	0	; () banked
  8220  00196A  51B6               	movf	ReadByte_I2C@RegisterAddress& (0+255),w,b
  8221  00196C  ECA6  F016         	call	_WriteI2C
  8222                           
  8223                           ;I2C1.c: 147: WaitFlag();
  8224  001970  EC63  F018         	call	_WaitFlag	;wreg free
  8225                           
  8226                           ;I2C1.c: 148: WaitForACK();
  8227  001974  EC67  F018         	call	_WaitForACK	;wreg free
  8228                           
  8229                           ;I2C1.c: 149: _delay((unsigned long)((45)*(16000000/4000.0)));
  8230  001978  0EEA               	movlw	234
  8231  00197A  6E40               	movwf	??_ReadByte_I2C& (0+255),c
  8232  00197C  0EC3               	movlw	195
  8233  00197E                     u7067:
  8234  00197E  2EE8               	decfsz	wreg,f,c
  8235  001980  D7FE               	goto	u7067
  8236  001982  2E40               	decfsz	??_ReadByte_I2C& (0+255),f,c
  8237  001984  D7FC               	goto	u7067
  8238  001986  F000               	nop	
  8239                           
  8240                           ;I2C1.c: 150: _delay((unsigned long)((45)*(16000000/4000.0)));
  8241  001988  0EEA               	movlw	234
  8242  00198A  6E40               	movwf	??_ReadByte_I2C& (0+255),c
  8243  00198C  0EC3               	movlw	195
  8244  00198E                     u7077:
  8245  00198E  2EE8               	decfsz	wreg,f,c
  8246  001990  D7FE               	goto	u7077
  8247  001992  2E40               	decfsz	??_ReadByte_I2C& (0+255),f,c
  8248  001994  D7FC               	goto	u7077
  8249  001996  F000               	nop	
  8250                           
  8251                           ;I2C1.c: 151: ResetVariables_I2C();
  8252  001998  EC5D  F018         	call	_ResetVariables_I2C	;wreg free
  8253                           
  8254                           ;I2C1.c: 152: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  8255  00199C  82C5               	bsf	4037,1,c	;volatile
  8256  00199E                     l70:
  8257  00199E  B2C5               	btfsc	4037,1,c	;volatile
  8258  0019A0  D7FE               	goto	l70
  8259                           
  8260                           ;I2C1.c: 153: WaitFlag();
  8261  0019A2  EC63  F018         	call	_WaitFlag	;wreg free
  8262                           
  8263                           ;I2C1.c: 155: WriteI2C(ReadAddressIC + 1);
  8264  0019A6  0100               	movlb	0	; () banked
  8265  0019A8  29C1               	incf	ReadByte_I2C@ReadAddressIC& (0+255),w,b
  8266  0019AA  ECA6  F016         	call	_WriteI2C
  8267                           
  8268                           ;I2C1.c: 156: WaitFlag();
  8269  0019AE  EC63  F018         	call	_WaitFlag	;wreg free
  8270                           
  8271                           ;I2C1.c: 157: WaitForACK();
  8272  0019B2  EC67  F018         	call	_WaitForACK	;wreg free
  8273                           
  8274                           ;I2C1.c: 158: ResetVariables_I2C();
  8275  0019B6  EC5D  F018         	call	_ResetVariables_I2C	;wreg free
  8276                           
  8277                           ;I2C1.c: 160: UpperByte = ReadI2C();
  8278  0019BA  ECF1  F017         	call	_ReadI2C	;wreg free
  8279  0019BE  0100               	movlb	0	; () banked
  8280  0019C0  6FC3               	movwf	ReadByte_I2C@UpperByte& (0+255),b
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;I2C1.c: 161: WaitFlag();
  8284  0019C2  EC63  F018         	call	_WaitFlag	;wreg free
  8285                           
  8286                           ;I2C1.c: 162: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  8287  0019C6  9AC5               	bcf	4037,5,c	;volatile
  8288  0019C8  88C5               	bsf	4037,4,c	;volatile
  8289  0019CA                     l73:
  8290  0019CA  B8C5               	btfsc	4037,4,c	;volatile
  8291  0019CC  D7FE               	goto	l73
  8292                           
  8293                           ;I2C1.c: 163: ResetVariables_I2C();
  8294  0019CE  EC5D  F018         	call	_ResetVariables_I2C	;wreg free
  8295                           
  8296                           ;I2C1.c: 165: LowerByte = ReadI2C();
  8297  0019D2  ECF1  F017         	call	_ReadI2C	;wreg free
  8298  0019D6  0100               	movlb	0	; () banked
  8299  0019D8  6FC2               	movwf	ReadByte_I2C@LowerByte& (0+255),b
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;I2C1.c: 166: WaitFlag();
  8303  0019DA  EC63  F018         	call	_WaitFlag	;wreg free
  8304                           
  8305                           ;I2C1.c: 167: ResetVariables_I2C();
  8306  0019DE  EC5D  F018         	call	_ResetVariables_I2C	;wreg free
  8307                           
  8308                           ;I2C1.c: 169: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  8309  0019E2  8AC5               	bsf	4037,5,c	;volatile
  8310  0019E4  88C5               	bsf	4037,4,c	;volatile
  8311  0019E6                     l76:
  8312  0019E6  B8C5               	btfsc	4037,4,c	;volatile
  8313  0019E8  D7FE               	goto	l76
  8314                           
  8315                           ;I2C1.c: 170: WaitFlag();
  8316  0019EA  EC63  F018         	call	_WaitFlag	;wreg free
  8317                           
  8318                           ;I2C1.c: 171: ResetVariables_I2C();
  8319  0019EE  EC5D  F018         	call	_ResetVariables_I2C	;wreg free
  8320                           
  8321                           ;I2C1.c: 172: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  8322  0019F2  84C5               	bsf	4037,2,c	;volatile
  8323  0019F4                     l79:
  8324  0019F4  B4C5               	btfsc	4037,2,c	;volatile
  8325  0019F6  D7FE               	goto	l79
  8326                           
  8327                           ;I2C1.c: 173: WaitFlag();
  8328  0019F8  EC63  F018         	call	_WaitFlag	;wreg free
  8329                           
  8330                           ;I2C1.c: 174: IdleI2C();
  8331  0019FC  EC43  F018         	call	_IdleI2C	;wreg free
  8332                           
  8333                           ;I2C1.c: 181: }
  8334                           ;I2C1.c: 182: UpperByte = UpperByte & 0x1F;
  8335  001A00  0100               	movlb	0	; () banked
  8336  001A02  51C3               	movf	ReadByte_I2C@UpperByte& (0+255),w,b
  8337  001A04  0B1F               	andlw	31
  8338  001A06  0100               	movlb	0	; () banked
  8339  001A08  6FC3               	movwf	ReadByte_I2C@UpperByte& (0+255),b
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;I2C1.c: 183: if ((UpperByte & 0x10) == 0x10) {
  8343  001A0A  0100               	movlb	0	; () banked
  8344  001A0C  A9C3               	btfss	ReadByte_I2C@UpperByte& (0+255),4,b
  8345  001A0E  D054               	goto	l5955
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;I2C1.c: 184: UpperByte = UpperByte & 0x0F;
  8349  001A10  0100               	movlb	0	; () banked
  8350  001A12  51C3               	movf	ReadByte_I2C@UpperByte& (0+255),w,b
  8351  001A14  0B0F               	andlw	15
  8352  001A16  0100               	movlb	0	; () banked
  8353  001A18  6FC3               	movwf	ReadByte_I2C@UpperByte& (0+255),b
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;I2C1.c: 185: Temperature = (float)(256.0 - (UpperByte * 16.0 + LowerByte / 16.0));
  8357  001A1A  0E00               	movlw	0
  8358  001A1C  6E1F               	movwf	___ftdiv@f2,c
  8359  001A1E  0E80               	movlw	128
  8360  001A20  6E20               	movwf	___ftdiv@f2+1,c
  8361  001A22  0E41               	movlw	65
  8362  001A24  6E21               	movwf	___ftdiv@f2+2,c
  8363  001A26  0100               	movlb	0	; () banked
  8364  001A28  51C2               	movf	ReadByte_I2C@LowerByte& (0+255),w,b
  8365  001A2A  EC7F  F017         	call	___lbtoft
  8366  001A2E  C018  F01C         	movff	?___lbtoft,___ftdiv@f1
  8367  001A32  C019  F01D         	movff	?___lbtoft+1,___ftdiv@f1+1
  8368  001A36  C01A  F01E         	movff	?___lbtoft+2,___ftdiv@f1+2
  8369  001A3A  ECB1  F012         	call	___ftdiv	;wreg free
  8370  001A3E  C01C  F02E         	movff	?___ftdiv,___ftadd@f2
  8371  001A42  C01D  F02F         	movff	?___ftdiv+1,___ftadd@f2+1
  8372  001A46  C01E  F030         	movff	?___ftdiv+2,___ftadd@f2+2
  8373  001A4A  0E00               	movlw	0
  8374  001A4C  6E3A               	movwf	___ftmul@f2,c
  8375  001A4E  0E80               	movlw	128
  8376  001A50  6E3B               	movwf	___ftmul@f2+1,c
  8377  001A52  0E41               	movlw	65
  8378  001A54  6E3C               	movwf	___ftmul@f2+2,c
  8379  001A56  0100               	movlb	0	; () banked
  8380  001A58  51C3               	movf	ReadByte_I2C@UpperByte& (0+255),w,b
  8381  001A5A  EC7F  F017         	call	___lbtoft
  8382  001A5E  C018  F037         	movff	?___lbtoft,___ftmul@f1
  8383  001A62  C019  F038         	movff	?___lbtoft+1,___ftmul@f1+1
  8384  001A66  C01A  F039         	movff	?___lbtoft+2,___ftmul@f1+2
  8385  001A6A  EC21  F012         	call	___ftmul	;wreg free
  8386  001A6E  C037  F02B         	movff	?___ftmul,___ftadd@f1
  8387  001A72  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  8388  001A76  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  8389  001A7A  EC9B  F00D         	call	___ftadd	;wreg free
  8390  001A7E  C02B  F0B3         	movff	?___ftadd,___ftneg@f1
  8391  001A82  C02C  F0B4         	movff	?___ftadd+1,___ftneg@f1+1
  8392  001A86  C02D  F0B5         	movff	?___ftadd+2,___ftneg@f1+2
  8393  001A8A  EC40  F017         	call	___ftneg	;wreg free
  8394  001A8E  C0B3  F0BB         	movff	?___ftneg,_ReadByte_I2C$2546
  8395  001A92  C0B4  F0BC         	movff	?___ftneg+1,_ReadByte_I2C$2546+1
  8396  001A96  C0B5  F0BD         	movff	?___ftneg+2,_ReadByte_I2C$2546+2
  8397                           
  8398                           ;I2C1.c: 185: Temperature = (float)(256.0 - (UpperByte * 16.0 + LowerByte / 16.0));
  8399  001A9A  C0BB  F02B         	movff	_ReadByte_I2C$2546,___ftadd@f1
  8400  001A9E  C0BC  F02C         	movff	_ReadByte_I2C$2546+1,___ftadd@f1+1
  8401  001AA2  C0BD  F02D         	movff	_ReadByte_I2C$2546+2,___ftadd@f1+2
  8402  001AA6  0E00               	movlw	0
  8403  001AA8  6E2E               	movwf	___ftadd@f2,c
  8404  001AAA  0E80               	movlw	128
  8405  001AAC  6E2F               	movwf	___ftadd@f2+1,c
  8406  001AAE  0E43               	movlw	67
  8407  001AB0  6E30               	movwf	___ftadd@f2+2,c
  8408  001AB2  EC9B  F00D         	call	___ftadd	;wreg free
  8409  001AB6  D032               	goto	L6
  8410  001AB8                     l5955:
  8411                           
  8412                           ;I2C1.c: 187: Temperature = (float)((UpperByte * 16.0 + LowerByte / 16.0));
  8413  001AB8  0E00               	movlw	0
  8414  001ABA  6E3A               	movwf	___ftmul@f2,c
  8415  001ABC  0E80               	movlw	128
  8416  001ABE  6E3B               	movwf	___ftmul@f2+1,c
  8417  001AC0  0E41               	movlw	65
  8418  001AC2  6E3C               	movwf	___ftmul@f2+2,c
  8419  001AC4  0100               	movlb	0	; () banked
  8420  001AC6  51C3               	movf	ReadByte_I2C@UpperByte& (0+255),w,b
  8421  001AC8  EC7F  F017         	call	___lbtoft
  8422  001ACC  C018  F037         	movff	?___lbtoft,___ftmul@f1
  8423  001AD0  C019  F038         	movff	?___lbtoft+1,___ftmul@f1+1
  8424  001AD4  C01A  F039         	movff	?___lbtoft+2,___ftmul@f1+2
  8425  001AD8  EC21  F012         	call	___ftmul	;wreg free
  8426  001ADC  C037  F02B         	movff	?___ftmul,___ftadd@f1
  8427  001AE0  C038  F02C         	movff	?___ftmul+1,___ftadd@f1+1
  8428  001AE4  C039  F02D         	movff	?___ftmul+2,___ftadd@f1+2
  8429  001AE8  0E00               	movlw	0
  8430  001AEA  6E1F               	movwf	___ftdiv@f2,c
  8431  001AEC  0E80               	movlw	128
  8432  001AEE  6E20               	movwf	___ftdiv@f2+1,c
  8433  001AF0  0E41               	movlw	65
  8434  001AF2  6E21               	movwf	___ftdiv@f2+2,c
  8435  001AF4  0100               	movlb	0	; () banked
  8436  001AF6  51C2               	movf	ReadByte_I2C@LowerByte& (0+255),w,b
  8437  001AF8  EC7F  F017         	call	___lbtoft
  8438  001AFC  C018  F01C         	movff	?___lbtoft,___ftdiv@f1
  8439  001B00  C019  F01D         	movff	?___lbtoft+1,___ftdiv@f1+1
  8440  001B04  C01A  F01E         	movff	?___lbtoft+2,___ftdiv@f1+2
  8441  001B08  ECB1  F012         	call	___ftdiv	;wreg free
  8442  001B0C  C01C  F02E         	movff	?___ftdiv,___ftadd@f2
  8443  001B10  C01D  F02F         	movff	?___ftdiv+1,___ftadd@f2+1
  8444  001B14  C01E  F030         	movff	?___ftdiv+2,___ftadd@f2+2
  8445  001B18  EC9B  F00D         	call	___ftadd	;wreg free
  8446  001B1C                     L6:
  8447  001B1C  C02B  F0BE         	movff	?___ftadd,ReadByte_I2C@Temperature
  8448  001B20  C02C  F0BF         	movff	?___ftadd+1,ReadByte_I2C@Temperature+1
  8449  001B24  C02D  F0C0         	movff	?___ftadd+2,ReadByte_I2C@Temperature+2
  8450                           
  8451                           ;I2C1.c: 193: return Temperature;
  8452  001B28  C0BE  F0B6         	movff	ReadByte_I2C@Temperature,?_ReadByte_I2C
  8453  001B2C  C0BF  F0B7         	movff	ReadByte_I2C@Temperature+1,?_ReadByte_I2C+1
  8454  001B30  C0C0  F0B8         	movff	ReadByte_I2C@Temperature+2,?_ReadByte_I2C+2
  8455  001B34  0012               	return	
  8456  001B36                     __end_of_ReadByte_I2C:
  8457                           	opt stack 0
  8458                           tblptru	equ	0xFF8
  8459                           tblptrh	equ	0xFF7
  8460                           tblptrl	equ	0xFF6
  8461                           tablat	equ	0xFF5
  8462                           prodh	equ	0xFF4
  8463                           prodl	equ	0xFF3
  8464                           postinc0	equ	0xFEE
  8465                           wreg	equ	0xFE8
  8466                           indf1	equ	0xFE7
  8467                           postdec1	equ	0xFE5
  8468                           fsr1h	equ	0xFE2
  8469                           fsr1l	equ	0xFE1
  8470                           indf2	equ	0xFDF
  8471                           postinc2	equ	0xFDE
  8472                           postdec2	equ	0xFDD
  8473                           fsr2h	equ	0xFDA
  8474                           fsr2l	equ	0xFD9
  8475                           status	equ	0xFD8
  8476                           
  8477 ;; *************** function ___lbtoft *****************
  8478 ;; Defined at:
  8479 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lbtoft.c"
  8480 ;; Parameters:    Size  Location     Type
  8481 ;;  c               1    wreg     unsigned char 
  8482 ;; Auto vars:     Size  Location     Type
  8483 ;;  c               1   26[COMRAM] unsigned char 
  8484 ;; Return value:  Size  Location     Type
  8485 ;;                  3   23[COMRAM] float 
  8486 ;; Registers used:
  8487 ;;		wreg, status,2, status,0, cstack
  8488 ;; Tracked objects:
  8489 ;;		On entry : 0/0
  8490 ;;		On exit  : 0/0
  8491 ;;		Unchanged: 0/0
  8492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8493 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8496 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8497 ;;Total ram usage:        4 bytes
  8498 ;; Hardware stack levels used:    1
  8499 ;; Hardware stack levels required when called:    3
  8500 ;; This function calls:
  8501 ;;		___ftpack
  8502 ;; This function is called by:
  8503 ;;		_ReadByte_I2C
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           	psect	text25
  8508  002EFE                     __ptext25:
  8509                           	opt stack 0
  8510  002EFE                     ___lbtoft:
  8511                           	opt stack 25
  8512                           
  8513                           ;incstack = 0
  8514                           ;___lbtoft@c stored from wreg
  8515  002EFE  6E1B               	movwf	___lbtoft@c,c
  8516  002F00  501B               	movf	___lbtoft@c,w,c
  8517  002F02  6E10               	movwf	___ftpack@arg,c
  8518  002F04  6A11               	clrf	___ftpack@arg+1,c
  8519  002F06  6A12               	clrf	___ftpack@arg+2,c
  8520  002F08  0E8E               	movlw	142
  8521  002F0A  6E13               	movwf	___ftpack@exp,c
  8522  002F0C  0E00               	movlw	0
  8523  002F0E  6E14               	movwf	___ftpack@sign,c
  8524  002F10  EC94  F013         	call	___ftpack	;wreg free
  8525  002F14  C010  F018         	movff	?___ftpack,?___lbtoft
  8526  002F18  C011  F019         	movff	?___ftpack+1,?___lbtoft+1
  8527  002F1C  C012  F01A         	movff	?___ftpack+2,?___lbtoft+2
  8528  002F20  0012               	return	
  8529  002F22                     __end_of___lbtoft:
  8530                           	opt stack 0
  8531                           tblptru	equ	0xFF8
  8532                           tblptrh	equ	0xFF7
  8533                           tblptrl	equ	0xFF6
  8534                           tablat	equ	0xFF5
  8535                           prodh	equ	0xFF4
  8536                           prodl	equ	0xFF3
  8537                           postinc0	equ	0xFEE
  8538                           wreg	equ	0xFE8
  8539                           indf1	equ	0xFE7
  8540                           postdec1	equ	0xFE5
  8541                           fsr1h	equ	0xFE2
  8542                           fsr1l	equ	0xFE1
  8543                           indf2	equ	0xFDF
  8544                           postinc2	equ	0xFDE
  8545                           postdec2	equ	0xFDD
  8546                           fsr2h	equ	0xFDA
  8547                           fsr2l	equ	0xFD9
  8548                           status	equ	0xFD8
  8549                           
  8550 ;; *************** function ___ftneg *****************
  8551 ;; Defined at:
  8552 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftneg.c"
  8553 ;; Parameters:    Size  Location     Type
  8554 ;;  f1              3    6[BANK0 ] float 
  8555 ;; Auto vars:     Size  Location     Type
  8556 ;;		None
  8557 ;; Return value:  Size  Location     Type
  8558 ;;                  3    6[BANK0 ] float 
  8559 ;; Registers used:
  8560 ;;		wreg, status,2, status,0
  8561 ;; Tracked objects:
  8562 ;;		On entry : 0/0
  8563 ;;		On exit  : 0/0
  8564 ;;		Unchanged: 0/0
  8565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8566 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8569 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;Total ram usage:        3 bytes
  8571 ;; Hardware stack levels used:    1
  8572 ;; Hardware stack levels required when called:    2
  8573 ;; This function calls:
  8574 ;;		Nothing
  8575 ;; This function is called by:
  8576 ;;		_ReadByte_I2C
  8577 ;;		_sprintf
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           	psect	text26
  8582  002E80                     __ptext26:
  8583                           	opt stack 0
  8584  002E80                     ___ftneg:
  8585                           	opt stack 26
  8586                           
  8587                           ;incstack = 0
  8588  002E80  0100               	movlb	0	; () banked
  8589  002E82  51B3               	movf	___ftneg@f1& (0+255),w,b
  8590  002E84  0100               	movlb	0	; () banked
  8591  002E86  11B4               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8592  002E88  0100               	movlb	0	; () banked
  8593  002E8A  11B5               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8594  002E8C  B4D8               	btfsc	status,2,c
  8595  002E8E  D009               	goto	l1157
  8596                           
  8597                           ; BSR set to: 0
  8598  002E90  0E00               	movlw	0
  8599  002E92  0100               	movlb	0	; () banked
  8600  002E94  1BB3               	xorwf	___ftneg@f1& (0+255),f,b
  8601  002E96  0E00               	movlw	0
  8602  002E98  0100               	movlb	0	; () banked
  8603  002E9A  1BB4               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8604  002E9C  0E80               	movlw	128
  8605  002E9E  0100               	movlb	0	; () banked
  8606  002EA0  1BB5               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8607  002EA2                     l1157:
  8608                           
  8609                           ; BSR set to: 0
  8610  002EA2  C0B3  F0B3         	movff	___ftneg@f1,?___ftneg
  8611  002EA6  C0B4  F0B4         	movff	___ftneg@f1+1,?___ftneg+1
  8612  002EAA  C0B5  F0B5         	movff	___ftneg@f1+2,?___ftneg+2
  8613                           
  8614                           ; BSR set to: 0
  8615  002EAE  0012               	return		;funcret
  8616  002EB0                     __end_of___ftneg:
  8617                           	opt stack 0
  8618                           tblptru	equ	0xFF8
  8619                           tblptrh	equ	0xFF7
  8620                           tblptrl	equ	0xFF6
  8621                           tablat	equ	0xFF5
  8622                           prodh	equ	0xFF4
  8623                           prodl	equ	0xFF3
  8624                           postinc0	equ	0xFEE
  8625                           wreg	equ	0xFE8
  8626                           indf1	equ	0xFE7
  8627                           postdec1	equ	0xFE5
  8628                           fsr1h	equ	0xFE2
  8629                           fsr1l	equ	0xFE1
  8630                           indf2	equ	0xFDF
  8631                           postinc2	equ	0xFDE
  8632                           postdec2	equ	0xFDD
  8633                           fsr2h	equ	0xFDA
  8634                           fsr2l	equ	0xFD9
  8635                           status	equ	0xFD8
  8636                           
  8637 ;; *************** function ___ftmul *****************
  8638 ;; Defined at:
  8639 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;  f1              3   54[COMRAM] float 
  8642 ;;  f2              3   57[COMRAM] float 
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  8645 ;;  sign            1    5[BANK0 ] unsigned char 
  8646 ;;  cntr            1    4[BANK0 ] unsigned char 
  8647 ;;  exp             1    0[BANK0 ] unsigned char 
  8648 ;; Return value:  Size  Location     Type
  8649 ;;                  3   54[COMRAM] float 
  8650 ;; Registers used:
  8651 ;;		wreg, status,2, status,0, cstack
  8652 ;; Tracked objects:
  8653 ;;		On entry : 0/0
  8654 ;;		On exit  : 0/0
  8655 ;;		Unchanged: 0/0
  8656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8657 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8658 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8659 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8660 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8661 ;;Total ram usage:       15 bytes
  8662 ;; Hardware stack levels used:    1
  8663 ;; Hardware stack levels required when called:    3
  8664 ;; This function calls:
  8665 ;;		___ftpack
  8666 ;; This function is called by:
  8667 ;;		_ReadByte_I2C
  8668 ;;		_output_logic
  8669 ;;		_fround
  8670 ;;		_scale
  8671 ;;		_sprintf
  8672 ;;		_log
  8673 ;;		_eval_poly
  8674 ;; This function uses a non-reentrant model
  8675 ;;
  8676                           
  8677                           	psect	text27
  8678  002442                     __ptext27:
  8679                           	opt stack 0
  8680  002442                     ___ftmul:
  8681                           	opt stack 24
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;incstack = 0
  8685  002442  C039  F03D         	movff	___ftmul@f1+2,??___ftmul
  8686  002446  6A3E               	clrf	(??___ftmul+1)& (0+255),c
  8687  002448  6A3F               	clrf	(??___ftmul+2)& (0+255),c
  8688  00244A  3438               	rlcf	___ftmul@f1+1,w,c
  8689  00244C  363D               	rlcf	??___ftmul& (0+255),f,c
  8690  00244E  E301               	bnc	u5301
  8691  002450  803E               	bsf	(??___ftmul+1)& (0+255),0,c
  8692  002452                     u5301:
  8693  002452  503D               	movf	??___ftmul,w,c
  8694  002454  0100               	movlb	0	; () banked
  8695  002456  6FAD               	movwf	___ftmul@exp& (0+255),b
  8696  002458  0100               	movlb	0	; () banked
  8697  00245A  51AD               	movf	___ftmul@exp& (0+255),w,b
  8698  00245C  A4D8               	btfss	status,2,c
  8699  00245E  D007               	goto	l5227
  8700                           
  8701                           ; BSR set to: 0
  8702  002460  0E00               	movlw	0
  8703  002462  6E37               	movwf	?___ftmul,c
  8704  002464  0E00               	movlw	0
  8705  002466  6E38               	movwf	?___ftmul+1,c
  8706  002468  0E00               	movlw	0
  8707  00246A  6E39               	movwf	?___ftmul+2,c
  8708                           
  8709                           ; BSR set to: 0
  8710  00246C  0012               	return	
  8711  00246E                     l5227:
  8712                           
  8713                           ; BSR set to: 0
  8714  00246E  C03C  F03D         	movff	___ftmul@f2+2,??___ftmul
  8715  002472  6A3E               	clrf	(??___ftmul+1)& (0+255),c
  8716  002474  6A3F               	clrf	(??___ftmul+2)& (0+255),c
  8717  002476  343B               	rlcf	___ftmul@f2+1,w,c
  8718  002478  363D               	rlcf	??___ftmul& (0+255),f,c
  8719  00247A  E301               	bnc	u5321
  8720  00247C  803E               	bsf	(??___ftmul+1)& (0+255),0,c
  8721  00247E                     u5321:
  8722  00247E  503D               	movf	??___ftmul,w,c
  8723  002480  0100               	movlb	0	; () banked
  8724  002482  6FB2               	movwf	___ftmul@sign& (0+255),b
  8725  002484  0100               	movlb	0	; () banked
  8726  002486  51B2               	movf	___ftmul@sign& (0+255),w,b
  8727  002488  A4D8               	btfss	status,2,c
  8728  00248A  D007               	goto	l5233
  8729                           
  8730                           ; BSR set to: 0
  8731  00248C  0E00               	movlw	0
  8732  00248E  6E37               	movwf	?___ftmul,c
  8733  002490  0E00               	movlw	0
  8734  002492  6E38               	movwf	?___ftmul+1,c
  8735  002494  0E00               	movlw	0
  8736  002496  6E39               	movwf	?___ftmul+2,c
  8737                           
  8738                           ; BSR set to: 0
  8739  002498  0012               	return	
  8740  00249A                     l5233:
  8741                           
  8742                           ; BSR set to: 0
  8743  00249A  0100               	movlb	0	; () banked
  8744  00249C  51B2               	movf	___ftmul@sign& (0+255),w,b
  8745  00249E  0F7B               	addlw	123
  8746  0024A0  0100               	movlb	0	; () banked
  8747  0024A2  27AD               	addwf	___ftmul@exp& (0+255),f,b
  8748                           
  8749                           ; BSR set to: 0
  8750  0024A4  C039  F0B2         	movff	___ftmul@f1+2,___ftmul@sign
  8751  0024A8  503C               	movf	___ftmul@f2+2,w,c
  8752  0024AA  0100               	movlb	0	; () banked
  8753  0024AC  1BB2               	xorwf	___ftmul@sign& (0+255),f,b
  8754  0024AE  0E80               	movlw	128
  8755  0024B0  0100               	movlb	0	; () banked
  8756  0024B2  17B2               	andwf	___ftmul@sign& (0+255),f,b
  8757                           
  8758                           ; BSR set to: 0
  8759  0024B4  8E38               	bsf	___ftmul@f1+1,7,c
  8760                           
  8761                           ; BSR set to: 0
  8762  0024B6  8E3B               	bsf	___ftmul@f2+1,7,c
  8763                           
  8764                           ; BSR set to: 0
  8765  0024B8  0EFF               	movlw	255
  8766  0024BA  163A               	andwf	___ftmul@f2,f,c
  8767  0024BC  0EFF               	movlw	255
  8768  0024BE  163B               	andwf	___ftmul@f2+1,f,c
  8769  0024C0  0E00               	movlw	0
  8770  0024C2  163C               	andwf	___ftmul@f2+2,f,c
  8771                           
  8772                           ; BSR set to: 0
  8773  0024C4  0E00               	movlw	0
  8774  0024C6  0100               	movlb	0	; () banked
  8775  0024C8  6FAE               	movwf	___ftmul@f3_as_product& (0+255),b
  8776  0024CA  0E00               	movlw	0
  8777  0024CC  0100               	movlb	0	; () banked
  8778  0024CE  6FAF               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8779  0024D0  0E00               	movlw	0
  8780  0024D2  0100               	movlb	0	; () banked
  8781  0024D4  6FB0               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8782                           
  8783                           ; BSR set to: 0
  8784  0024D6  0E07               	movlw	7
  8785  0024D8  0100               	movlb	0	; () banked
  8786  0024DA  6FB1               	movwf	___ftmul@cntr& (0+255),b
  8787  0024DC                     l5247:
  8788                           
  8789                           ; BSR set to: 0
  8790  0024DC  A037               	btfss	___ftmul@f1,0,c
  8791  0024DE  D009               	goto	l5251
  8792                           
  8793                           ; BSR set to: 0
  8794  0024E0  503A               	movf	___ftmul@f2,w,c
  8795  0024E2  0100               	movlb	0	; () banked
  8796  0024E4  27AE               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8797  0024E6  503B               	movf	___ftmul@f2+1,w,c
  8798  0024E8  0100               	movlb	0	; () banked
  8799  0024EA  23AF               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8800  0024EC  503C               	movf	___ftmul@f2+2,w,c
  8801  0024EE  0100               	movlb	0	; () banked
  8802  0024F0  23B0               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8803  0024F2                     l5251:
  8804                           
  8805                           ; BSR set to: 0
  8806  0024F2  90D8               	bcf	status,0,c
  8807  0024F4  3239               	rrcf	___ftmul@f1+2,f,c
  8808  0024F6  3238               	rrcf	___ftmul@f1+1,f,c
  8809  0024F8  3237               	rrcf	___ftmul@f1,f,c
  8810  0024FA  90D8               	bcf	status,0,c
  8811  0024FC  363A               	rlcf	___ftmul@f2,f,c
  8812  0024FE  363B               	rlcf	___ftmul@f2+1,f,c
  8813  002500  363C               	rlcf	___ftmul@f2+2,f,c
  8814                           
  8815                           ; BSR set to: 0
  8816  002502  0100               	movlb	0	; () banked
  8817  002504  2FB1               	decfsz	___ftmul@cntr& (0+255),f,b
  8818  002506  D7EA               	goto	l5247
  8819                           
  8820                           ; BSR set to: 0
  8821                           
  8822                           ; BSR set to: 0
  8823  002508  0E09               	movlw	9
  8824  00250A  0100               	movlb	0	; () banked
  8825  00250C  6FB1               	movwf	___ftmul@cntr& (0+255),b
  8826  00250E                     l5257:
  8827                           
  8828                           ; BSR set to: 0
  8829  00250E  A037               	btfss	___ftmul@f1,0,c
  8830  002510  D009               	goto	l5261
  8831                           
  8832                           ; BSR set to: 0
  8833  002512  503A               	movf	___ftmul@f2,w,c
  8834  002514  0100               	movlb	0	; () banked
  8835  002516  27AE               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8836  002518  503B               	movf	___ftmul@f2+1,w,c
  8837  00251A  0100               	movlb	0	; () banked
  8838  00251C  23AF               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8839  00251E  503C               	movf	___ftmul@f2+2,w,c
  8840  002520  0100               	movlb	0	; () banked
  8841  002522  23B0               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8842  002524                     l5261:
  8843                           
  8844                           ; BSR set to: 0
  8845  002524  90D8               	bcf	status,0,c
  8846  002526  3239               	rrcf	___ftmul@f1+2,f,c
  8847  002528  3238               	rrcf	___ftmul@f1+1,f,c
  8848  00252A  3237               	rrcf	___ftmul@f1,f,c
  8849  00252C  0100               	movlb	0	; () banked
  8850  00252E  90D8               	bcf	status,0,c
  8851  002530  33B0               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8852  002532  33AF               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8853  002534  33AE               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8854                           
  8855                           ; BSR set to: 0
  8856  002536  0100               	movlb	0	; () banked
  8857  002538  2FB1               	decfsz	___ftmul@cntr& (0+255),f,b
  8858  00253A  D7E9               	goto	l5257
  8859                           
  8860                           ; BSR set to: 0
  8861                           
  8862                           ; BSR set to: 0
  8863  00253C  C0AE  F010         	movff	___ftmul@f3_as_product,___ftpack@arg
  8864  002540  C0AF  F011         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8865  002544  C0B0  F012         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8866  002548  C0AD  F013         	movff	___ftmul@exp,___ftpack@exp
  8867  00254C  C0B2  F014         	movff	___ftmul@sign,___ftpack@sign
  8868  002550  EC94  F013         	call	___ftpack	;wreg free
  8869  002554  C010  F037         	movff	?___ftpack,?___ftmul
  8870  002558  C011  F038         	movff	?___ftpack+1,?___ftmul+1
  8871  00255C  C012  F039         	movff	?___ftpack+2,?___ftmul+2
  8872  002560  0012               	return	
  8873  002562                     __end_of___ftmul:
  8874                           	opt stack 0
  8875                           tblptru	equ	0xFF8
  8876                           tblptrh	equ	0xFF7
  8877                           tblptrl	equ	0xFF6
  8878                           tablat	equ	0xFF5
  8879                           prodh	equ	0xFF4
  8880                           prodl	equ	0xFF3
  8881                           postinc0	equ	0xFEE
  8882                           wreg	equ	0xFE8
  8883                           indf1	equ	0xFE7
  8884                           postdec1	equ	0xFE5
  8885                           fsr1h	equ	0xFE2
  8886                           fsr1l	equ	0xFE1
  8887                           indf2	equ	0xFDF
  8888                           postinc2	equ	0xFDE
  8889                           postdec2	equ	0xFDD
  8890                           fsr2h	equ	0xFDA
  8891                           fsr2l	equ	0xFD9
  8892                           status	equ	0xFD8
  8893                           
  8894 ;; *************** function ___ftadd *****************
  8895 ;; Defined at:
  8896 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;  f1              3   42[COMRAM] float 
  8899 ;;  f2              3   45[COMRAM] float 
  8900 ;; Auto vars:     Size  Location     Type
  8901 ;;  exp1            1   53[COMRAM] unsigned char 
  8902 ;;  exp2            1   52[COMRAM] unsigned char 
  8903 ;;  sign            1   51[COMRAM] unsigned char 
  8904 ;; Return value:  Size  Location     Type
  8905 ;;                  3   42[COMRAM] float 
  8906 ;; Registers used:
  8907 ;;		wreg, status,2, status,0, cstack
  8908 ;; Tracked objects:
  8909 ;;		On entry : 0/0
  8910 ;;		On exit  : 0/0
  8911 ;;		Unchanged: 0/0
  8912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8913 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8916 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;Total ram usage:       12 bytes
  8918 ;; Hardware stack levels used:    1
  8919 ;; Hardware stack levels required when called:    3
  8920 ;; This function calls:
  8921 ;;		___ftpack
  8922 ;; This function is called by:
  8923 ;;		_ReadByte_I2C
  8924 ;;		_output_logic
  8925 ;;		_sprintf
  8926 ;;		___ftsub
  8927 ;;		_log
  8928 ;;		_eval_poly
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           	psect	text28
  8933  001B36                     __ptext28:
  8934                           	opt stack 0
  8935  001B36                     ___ftadd:
  8936                           	opt stack 24
  8937                           
  8938                           ;incstack = 0
  8939  001B36  C02D  F031         	movff	___ftadd@f1+2,??___ftadd
  8940  001B3A  6A32               	clrf	(??___ftadd+1)& (0+255),c
  8941  001B3C  6A33               	clrf	(??___ftadd+2)& (0+255),c
  8942  001B3E  342C               	rlcf	___ftadd@f1+1,w,c
  8943  001B40  3631               	rlcf	??___ftadd& (0+255),f,c
  8944  001B42  E301               	bnc	u5091
  8945  001B44  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  8946  001B46                     u5091:
  8947  001B46  5031               	movf	??___ftadd,w,c
  8948  001B48  6E36               	movwf	___ftadd@exp1,c
  8949  001B4A  C030  F031         	movff	___ftadd@f2+2,??___ftadd
  8950  001B4E  6A32               	clrf	(??___ftadd+1)& (0+255),c
  8951  001B50  6A33               	clrf	(??___ftadd+2)& (0+255),c
  8952  001B52  342F               	rlcf	___ftadd@f2+1,w,c
  8953  001B54  3631               	rlcf	??___ftadd& (0+255),f,c
  8954  001B56  E301               	bnc	u5101
  8955  001B58  8032               	bsf	(??___ftadd+1)& (0+255),0,c
  8956  001B5A                     u5101:
  8957  001B5A  5031               	movf	??___ftadd,w,c
  8958  001B5C  6E35               	movwf	___ftadd@exp2,c
  8959  001B5E  5036               	movf	___ftadd@exp1,w,c
  8960  001B60  B4D8               	btfsc	status,2,c
  8961  001B62  D00B               	goto	l1083
  8962  001B64  5035               	movf	___ftadd@exp2,w,c
  8963  001B66  5C36               	subwf	___ftadd@exp1,w,c
  8964  001B68  B0D8               	btfsc	status,0,c
  8965  001B6A  D00E               	goto	l5159
  8966  001B6C  5036               	movf	___ftadd@exp1,w,c
  8967  001B6E  0800               	sublw	0
  8968  001B70  2435               	addwf	___ftadd@exp2,w,c
  8969  001B72  6E31               	movwf	??___ftadd& (0+255),c
  8970  001B74  0E18               	movlw	24
  8971  001B76  6431               	cpfsgt	??___ftadd,c
  8972  001B78  D007               	goto	l5159
  8973  001B7A                     l1083:
  8974  001B7A  C02E  F02B         	movff	___ftadd@f2,?___ftadd
  8975  001B7E  C02F  F02C         	movff	___ftadd@f2+1,?___ftadd+1
  8976  001B82  C030  F02D         	movff	___ftadd@f2+2,?___ftadd+2
  8977  001B86  0012               	return	
  8978  001B88                     l5159:
  8979  001B88  5035               	movf	___ftadd@exp2,w,c
  8980  001B8A  B4D8               	btfsc	status,2,c
  8981  001B8C  D00B               	goto	l1087
  8982  001B8E  5036               	movf	___ftadd@exp1,w,c
  8983  001B90  5C35               	subwf	___ftadd@exp2,w,c
  8984  001B92  B0D8               	btfsc	status,0,c
  8985  001B94  D00E               	goto	l5165
  8986  001B96  5035               	movf	___ftadd@exp2,w,c
  8987  001B98  0800               	sublw	0
  8988  001B9A  2436               	addwf	___ftadd@exp1,w,c
  8989  001B9C  6E31               	movwf	??___ftadd& (0+255),c
  8990  001B9E  0E18               	movlw	24
  8991  001BA0  6431               	cpfsgt	??___ftadd,c
  8992  001BA2  D007               	goto	l5165
  8993  001BA4                     l1087:
  8994  001BA4  C02B  F02B         	movff	___ftadd@f1,?___ftadd
  8995  001BA8  C02C  F02C         	movff	___ftadd@f1+1,?___ftadd+1
  8996  001BAC  C02D  F02D         	movff	___ftadd@f1+2,?___ftadd+2
  8997  001BB0  0012               	return	
  8998  001BB2                     l5165:
  8999  001BB2  0E06               	movlw	6
  9000  001BB4  6E34               	movwf	___ftadd@sign,c
  9001  001BB6  BE2D               	btfsc	___ftadd@f1+2,7,c
  9002  001BB8  8E34               	bsf	___ftadd@sign,7,c
  9003  001BBA  BE30               	btfsc	___ftadd@f2+2,7,c
  9004  001BBC  8C34               	bsf	___ftadd@sign,6,c
  9005  001BBE  8E2C               	bsf	___ftadd@f1+1,7,c
  9006  001BC0  0EFF               	movlw	255
  9007  001BC2  162B               	andwf	___ftadd@f1,f,c
  9008  001BC4  0EFF               	movlw	255
  9009  001BC6  162C               	andwf	___ftadd@f1+1,f,c
  9010  001BC8  0E00               	movlw	0
  9011  001BCA  162D               	andwf	___ftadd@f1+2,f,c
  9012  001BCC  8E2F               	bsf	___ftadd@f2+1,7,c
  9013  001BCE  0EFF               	movlw	255
  9014  001BD0  162E               	andwf	___ftadd@f2,f,c
  9015  001BD2  0EFF               	movlw	255
  9016  001BD4  162F               	andwf	___ftadd@f2+1,f,c
  9017  001BD6  0E00               	movlw	0
  9018  001BD8  1630               	andwf	___ftadd@f2+2,f,c
  9019  001BDA  5035               	movf	___ftadd@exp2,w,c
  9020  001BDC  5C36               	subwf	___ftadd@exp1,w,c
  9021  001BDE  B0D8               	btfsc	status,0,c
  9022  001BE0  D01B               	goto	l5191
  9023  001BE2                     l5181:
  9024  001BE2  90D8               	bcf	status,0,c
  9025  001BE4  362E               	rlcf	___ftadd@f2,f,c
  9026  001BE6  362F               	rlcf	___ftadd@f2+1,f,c
  9027  001BE8  3630               	rlcf	___ftadd@f2+2,f,c
  9028  001BEA  0635               	decf	___ftadd@exp2,f,c
  9029  001BEC  5036               	movf	___ftadd@exp1,w,c
  9030  001BEE  1835               	xorwf	___ftadd@exp2,w,c
  9031  001BF0  B4D8               	btfsc	status,2,c
  9032  001BF2  D00D               	goto	l5189
  9033  001BF4  0634               	decf	___ftadd@sign,f,c
  9034  001BF6  C034  F031         	movff	___ftadd@sign,??___ftadd
  9035  001BFA  0E07               	movlw	7
  9036  001BFC  1631               	andwf	??___ftadd,f,c
  9037  001BFE  B4D8               	btfsc	status,2,c
  9038  001C00  D006               	goto	l5189
  9039  001C02  D7EF               	goto	l5181
  9040  001C04                     l5187:
  9041  001C04  90D8               	bcf	status,0,c
  9042  001C06  322D               	rrcf	___ftadd@f1+2,f,c
  9043  001C08  322C               	rrcf	___ftadd@f1+1,f,c
  9044  001C0A  322B               	rrcf	___ftadd@f1,f,c
  9045  001C0C  2A36               	incf	___ftadd@exp1,f,c
  9046  001C0E                     l5189:
  9047  001C0E  5035               	movf	___ftadd@exp2,w,c
  9048  001C10  1836               	xorwf	___ftadd@exp1,w,c
  9049  001C12  B4D8               	btfsc	status,2,c
  9050  001C14  D01F               	goto	l1098
  9051  001C16  D7F6               	goto	l5187
  9052  001C18                     l5191:
  9053  001C18  5036               	movf	___ftadd@exp1,w,c
  9054  001C1A  5C35               	subwf	___ftadd@exp2,w,c
  9055  001C1C  B0D8               	btfsc	status,0,c
  9056  001C1E  D01A               	goto	l1098
  9057  001C20                     l5193:
  9058  001C20  90D8               	bcf	status,0,c
  9059  001C22  362B               	rlcf	___ftadd@f1,f,c
  9060  001C24  362C               	rlcf	___ftadd@f1+1,f,c
  9061  001C26  362D               	rlcf	___ftadd@f1+2,f,c
  9062  001C28  0636               	decf	___ftadd@exp1,f,c
  9063  001C2A  5036               	movf	___ftadd@exp1,w,c
  9064  001C2C  1835               	xorwf	___ftadd@exp2,w,c
  9065  001C2E  B4D8               	btfsc	status,2,c
  9066  001C30  D00D               	goto	l5201
  9067  001C32  0634               	decf	___ftadd@sign,f,c
  9068  001C34  C034  F031         	movff	___ftadd@sign,??___ftadd
  9069  001C38  0E07               	movlw	7
  9070  001C3A  1631               	andwf	??___ftadd,f,c
  9071  001C3C  B4D8               	btfsc	status,2,c
  9072  001C3E  D006               	goto	l5201
  9073  001C40  D7EF               	goto	l5193
  9074  001C42                     l5199:
  9075  001C42  90D8               	bcf	status,0,c
  9076  001C44  3230               	rrcf	___ftadd@f2+2,f,c
  9077  001C46  322F               	rrcf	___ftadd@f2+1,f,c
  9078  001C48  322E               	rrcf	___ftadd@f2,f,c
  9079  001C4A  2A35               	incf	___ftadd@exp2,f,c
  9080  001C4C                     l5201:
  9081  001C4C  5035               	movf	___ftadd@exp2,w,c
  9082  001C4E  1836               	xorwf	___ftadd@exp1,w,c
  9083  001C50  A4D8               	btfss	status,2,c
  9084  001C52  D7F7               	goto	l5199
  9085  001C54                     l1098:
  9086  001C54  AE34               	btfss	___ftadd@sign,7,c
  9087  001C56  D00C               	goto	l1107
  9088  001C58  0EFF               	movlw	255
  9089  001C5A  1A2B               	xorwf	___ftadd@f1,f,c
  9090  001C5C  0EFF               	movlw	255
  9091  001C5E  1A2C               	xorwf	___ftadd@f1+1,f,c
  9092  001C60  0EFF               	movlw	255
  9093  001C62  1A2D               	xorwf	___ftadd@f1+2,f,c
  9094  001C64  0E01               	movlw	1
  9095  001C66  262B               	addwf	___ftadd@f1,f,c
  9096  001C68  0E00               	movlw	0
  9097  001C6A  222C               	addwfc	___ftadd@f1+1,f,c
  9098  001C6C  0E00               	movlw	0
  9099  001C6E  222D               	addwfc	___ftadd@f1+2,f,c
  9100  001C70                     l1107:
  9101  001C70  AC34               	btfss	___ftadd@sign,6,c
  9102  001C72  D00C               	goto	l5207
  9103  001C74  0EFF               	movlw	255
  9104  001C76  1A2E               	xorwf	___ftadd@f2,f,c
  9105  001C78  0EFF               	movlw	255
  9106  001C7A  1A2F               	xorwf	___ftadd@f2+1,f,c
  9107  001C7C  0EFF               	movlw	255
  9108  001C7E  1A30               	xorwf	___ftadd@f2+2,f,c
  9109  001C80  0E01               	movlw	1
  9110  001C82  262E               	addwf	___ftadd@f2,f,c
  9111  001C84  0E00               	movlw	0
  9112  001C86  222F               	addwfc	___ftadd@f2+1,f,c
  9113  001C88  0E00               	movlw	0
  9114  001C8A  2230               	addwfc	___ftadd@f2+2,f,c
  9115  001C8C                     l5207:
  9116  001C8C  0E00               	movlw	0
  9117  001C8E  6E34               	movwf	___ftadd@sign,c
  9118  001C90  502B               	movf	___ftadd@f1,w,c
  9119  001C92  262E               	addwf	___ftadd@f2,f,c
  9120  001C94  502C               	movf	___ftadd@f1+1,w,c
  9121  001C96  222F               	addwfc	___ftadd@f2+1,f,c
  9122  001C98  502D               	movf	___ftadd@f1+2,w,c
  9123  001C9A  2230               	addwfc	___ftadd@f2+2,f,c
  9124  001C9C  AE30               	btfss	___ftadd@f2+2,7,c
  9125  001C9E  D00E               	goto	l5217
  9126  001CA0  0EFF               	movlw	255
  9127  001CA2  1A2E               	xorwf	___ftadd@f2,f,c
  9128  001CA4  0EFF               	movlw	255
  9129  001CA6  1A2F               	xorwf	___ftadd@f2+1,f,c
  9130  001CA8  0EFF               	movlw	255
  9131  001CAA  1A30               	xorwf	___ftadd@f2+2,f,c
  9132  001CAC  0E01               	movlw	1
  9133  001CAE  262E               	addwf	___ftadd@f2,f,c
  9134  001CB0  0E00               	movlw	0
  9135  001CB2  222F               	addwfc	___ftadd@f2+1,f,c
  9136  001CB4  0E00               	movlw	0
  9137  001CB6  2230               	addwfc	___ftadd@f2+2,f,c
  9138  001CB8  0E01               	movlw	1
  9139  001CBA  6E34               	movwf	___ftadd@sign,c
  9140  001CBC                     l5217:
  9141  001CBC  C02E  F010         	movff	___ftadd@f2,___ftpack@arg
  9142  001CC0  C02F  F011         	movff	___ftadd@f2+1,___ftpack@arg+1
  9143  001CC4  C030  F012         	movff	___ftadd@f2+2,___ftpack@arg+2
  9144  001CC8  C036  F013         	movff	___ftadd@exp1,___ftpack@exp
  9145  001CCC  C034  F014         	movff	___ftadd@sign,___ftpack@sign
  9146  001CD0  EC94  F013         	call	___ftpack	;wreg free
  9147  001CD4  C010  F02B         	movff	?___ftpack,?___ftadd
  9148  001CD8  C011  F02C         	movff	?___ftpack+1,?___ftadd+1
  9149  001CDC  C012  F02D         	movff	?___ftpack+2,?___ftadd+2
  9150  001CE0  0012               	return	
  9151  001CE2                     __end_of___ftadd:
  9152                           	opt stack 0
  9153                           tblptru	equ	0xFF8
  9154                           tblptrh	equ	0xFF7
  9155                           tblptrl	equ	0xFF6
  9156                           tablat	equ	0xFF5
  9157                           prodh	equ	0xFF4
  9158                           prodl	equ	0xFF3
  9159                           postinc0	equ	0xFEE
  9160                           wreg	equ	0xFE8
  9161                           indf1	equ	0xFE7
  9162                           postdec1	equ	0xFE5
  9163                           fsr1h	equ	0xFE2
  9164                           fsr1l	equ	0xFE1
  9165                           indf2	equ	0xFDF
  9166                           postinc2	equ	0xFDE
  9167                           postdec2	equ	0xFDD
  9168                           fsr2h	equ	0xFDA
  9169                           fsr2l	equ	0xFD9
  9170                           status	equ	0xFD8
  9171                           
  9172 ;; *************** function _WriteI2C *****************
  9173 ;; Defined at:
  9174 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\i2c\i2c_writ.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;  data_out        1    wreg     unsigned char 
  9177 ;; Auto vars:     Size  Location     Type
  9178 ;;  data_out        1   16[COMRAM] unsigned char 
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  1    wreg      char 
  9181 ;; Registers used:
  9182 ;;		wreg, status,2, status,0, cstack
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9189 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;Total ram usage:        1 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:    3
  9195 ;; This function calls:
  9196 ;;		_IdleI2C
  9197 ;; This function is called by:
  9198 ;;		_ReadByte_I2C
  9199 ;;		_WriteMANU_I2C
  9200 ;;		_WriteDEVICE_I2C
  9201 ;; This function uses a non-reentrant model
  9202 ;;
  9203                           
  9204                           	psect	text29
  9205  002D4C                     __ptext29:
  9206                           	opt stack 0
  9207  002D4C                     _WriteI2C:
  9208                           	opt stack 25
  9209                           
  9210                           ;incstack = 0
  9211                           ;WriteI2C@data_out stored from wreg
  9212  002D4C  6E11               	movwf	WriteI2C@data_out,c
  9213  002D4E  C011  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  9214  002D52  BEC6               	btfsc	4038,7,c	;volatile
  9215  002D54  0012               	return	
  9216                           
  9217                           ;	Return value of _WriteI2C is never used
  9218  002D56  50C6               	movf	4038,w,c	;volatile
  9219  002D58  0B0F               	andlw	15
  9220  002D5A  0A08               	xorlw	8
  9221  002D5C  B4D8               	btfsc	status,2,c
  9222  002D5E  D00C               	goto	l5385
  9223  002D60  50C6               	movf	4038,w,c	;volatile
  9224  002D62  0B0F               	andlw	15
  9225  002D64  0A0B               	xorlw	11
  9226  002D66  B4D8               	btfsc	status,2,c
  9227  002D68  D007               	goto	l5385
  9228  002D6A  88C6               	bsf	4038,4,c	;volatile
  9229  002D6C                     l805:
  9230  002D6C  A69E               	btfss	3998,3,c	;volatile
  9231  002D6E  D7FE               	goto	l805
  9232  002D70  B4C7               	btfsc	4039,2,c	;volatile
  9233  002D72  0012               	return	
  9234  002D74  50C7               	movf	4039,w,c	;volatile
  9235                           
  9236                           ;	Return value of _WriteI2C is never used
  9237                           
  9238                           ;	Return value of _WriteI2C is never used
  9239  002D76  0012               	return	
  9240  002D78                     l5385:
  9241  002D78  50C6               	movf	4038,w,c	;volatile
  9242  002D7A  0B0F               	andlw	15
  9243  002D7C  0A08               	xorlw	8
  9244  002D7E  B4D8               	btfsc	status,2,c
  9245  002D80  D005               	goto	l814
  9246  002D82  50C6               	movf	4038,w,c	;volatile
  9247  002D84  0B0F               	andlw	15
  9248  002D86  0A0B               	xorlw	11
  9249  002D88  A4D8               	btfss	status,2,c
  9250  002D8A  0012               	return	
  9251  002D8C                     l814:
  9252  002D8C  B0C7               	btfsc	4039,0,c	;volatile
  9253  002D8E  D7FE               	goto	l814
  9254  002D90  EC43  F018         	call	_IdleI2C	;wreg free
  9255  002D94  50C5               	movf	4037,w,c	;volatile
  9256                           
  9257                           ;	Return value of _WriteI2C is never used
  9258                           
  9259                           ;	Return value of _WriteI2C is never used
  9260  002D96  0012               	return	
  9261  002D98                     __end_of_WriteI2C:
  9262                           	opt stack 0
  9263                           tblptru	equ	0xFF8
  9264                           tblptrh	equ	0xFF7
  9265                           tblptrl	equ	0xFF6
  9266                           tablat	equ	0xFF5
  9267                           prodh	equ	0xFF4
  9268                           prodl	equ	0xFF3
  9269                           postinc0	equ	0xFEE
  9270                           wreg	equ	0xFE8
  9271                           indf1	equ	0xFE7
  9272                           postdec1	equ	0xFE5
  9273                           fsr1h	equ	0xFE2
  9274                           fsr1l	equ	0xFE1
  9275                           indf2	equ	0xFDF
  9276                           postinc2	equ	0xFDE
  9277                           postdec2	equ	0xFDD
  9278                           fsr2h	equ	0xFDA
  9279                           fsr2l	equ	0xFD9
  9280                           status	equ	0xFD8
  9281                           
  9282 ;; *************** function _WaitForACK *****************
  9283 ;; Defined at:
  9284 ;;		line 211 in file "../I2C1.c"
  9285 ;; Parameters:    Size  Location     Type
  9286 ;;		None
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;		None
  9289 ;; Return value:  Size  Location     Type
  9290 ;;		None               void
  9291 ;; Registers used:
  9292 ;;		None
  9293 ;; Tracked objects:
  9294 ;;		On entry : 0/0
  9295 ;;		On exit  : 0/0
  9296 ;;		Unchanged: 0/0
  9297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9302 ;;Total ram usage:        0 bytes
  9303 ;; Hardware stack levels used:    1
  9304 ;; Hardware stack levels required when called:    2
  9305 ;; This function calls:
  9306 ;;		Nothing
  9307 ;; This function is called by:
  9308 ;;		_ReadByte_I2C
  9309 ;;		_WriteMANU_I2C
  9310 ;;		_WriteDEVICE_I2C
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           	psect	text30
  9315  0030CE                     __ptext30:
  9316                           	opt stack 0
  9317  0030CE                     _WaitForACK:
  9318                           	opt stack 26
  9319  0030CE                     l99:
  9320  0030CE  ACC5               	btfss	4037,6,c	;volatile
  9321  0030D0  0012               	return	
  9322  0030D2  D7FD               	goto	l99
  9323  0030D4                     __end_of_WaitForACK:
  9324                           	opt stack 0
  9325                           tblptru	equ	0xFF8
  9326                           tblptrh	equ	0xFF7
  9327                           tblptrl	equ	0xFF6
  9328                           tablat	equ	0xFF5
  9329                           prodh	equ	0xFF4
  9330                           prodl	equ	0xFF3
  9331                           postinc0	equ	0xFEE
  9332                           wreg	equ	0xFE8
  9333                           indf1	equ	0xFE7
  9334                           postdec1	equ	0xFE5
  9335                           fsr1h	equ	0xFE2
  9336                           fsr1l	equ	0xFE1
  9337                           indf2	equ	0xFDF
  9338                           postinc2	equ	0xFDE
  9339                           postdec2	equ	0xFDD
  9340                           fsr2h	equ	0xFDA
  9341                           fsr2l	equ	0xFD9
  9342                           status	equ	0xFD8
  9343                           
  9344 ;; *************** function _WaitFlag *****************
  9345 ;; Defined at:
  9346 ;;		line 206 in file "../I2C1.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;		None
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;		None
  9351 ;; Return value:  Size  Location     Type
  9352 ;;		None               void
  9353 ;; Registers used:
  9354 ;;		None
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;Total ram usage:        0 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    2
  9367 ;; This function calls:
  9368 ;;		Nothing
  9369 ;; This function is called by:
  9370 ;;		_ReadByte_I2C
  9371 ;;		_WriteMANU_I2C
  9372 ;;		_WriteDEVICE_I2C
  9373 ;; This function uses a non-reentrant model
  9374 ;;
  9375                           
  9376                           	psect	text31
  9377  0030C6                     __ptext31:
  9378                           	opt stack 0
  9379  0030C6                     _WaitFlag:
  9380                           	opt stack 26
  9381  0030C6                     l93:
  9382  0030C6  A69E               	btfss	3998,3,c	;volatile
  9383  0030C8  D7FE               	goto	l93
  9384                           
  9385                           ;I2C1.c: 209: PIR1bits.SSPIF=0;
  9386  0030CA  969E               	bcf	3998,3,c	;volatile
  9387  0030CC  0012               	return		;funcret
  9388  0030CE                     __end_of_WaitFlag:
  9389                           	opt stack 0
  9390                           tblptru	equ	0xFF8
  9391                           tblptrh	equ	0xFF7
  9392                           tblptrl	equ	0xFF6
  9393                           tablat	equ	0xFF5
  9394                           prodh	equ	0xFF4
  9395                           prodl	equ	0xFF3
  9396                           postinc0	equ	0xFEE
  9397                           wreg	equ	0xFE8
  9398                           indf1	equ	0xFE7
  9399                           postdec1	equ	0xFE5
  9400                           fsr1h	equ	0xFE2
  9401                           fsr1l	equ	0xFE1
  9402                           indf2	equ	0xFDF
  9403                           postinc2	equ	0xFDE
  9404                           postdec2	equ	0xFDD
  9405                           fsr2h	equ	0xFDA
  9406                           fsr2l	equ	0xFD9
  9407                           status	equ	0xFD8
  9408                           
  9409 ;; *************** function _ResetVariables_I2C *****************
  9410 ;; Defined at:
  9411 ;;		line 197 in file "../I2C1.c"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;		None
  9414 ;; Auto vars:     Size  Location     Type
  9415 ;;		None
  9416 ;; Return value:  Size  Location     Type
  9417 ;;		None               void
  9418 ;; Registers used:
  9419 ;;		None
  9420 ;; Tracked objects:
  9421 ;;		On entry : 0/0
  9422 ;;		On exit  : 0/0
  9423 ;;		Unchanged: 0/0
  9424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9429 ;;Total ram usage:        0 bytes
  9430 ;; Hardware stack levels used:    1
  9431 ;; Hardware stack levels required when called:    2
  9432 ;; This function calls:
  9433 ;;		Nothing
  9434 ;; This function is called by:
  9435 ;;		_ReadByte_I2C
  9436 ;;		_WriteMANU_I2C
  9437 ;;		_WriteDEVICE_I2C
  9438 ;; This function uses a non-reentrant model
  9439 ;;
  9440                           
  9441                           	psect	text32
  9442  0030BA                     __ptext32:
  9443                           	opt stack 0
  9444  0030BA                     _ResetVariables_I2C:
  9445                           	opt stack 26
  9446                           
  9447                           ;I2C1.c: 199: SSPCON2bits.ACKEN=0;
  9448                           
  9449                           ;incstack = 0
  9450  0030BA  98C5               	bcf	4037,4,c	;volatile
  9451                           
  9452                           ;I2C1.c: 200: SSPCON2bits.PEN=0;
  9453  0030BC  94C5               	bcf	4037,2,c	;volatile
  9454                           
  9455                           ;I2C1.c: 201: SSPCON2bits.RCEN=0;
  9456  0030BE  96C5               	bcf	4037,3,c	;volatile
  9457                           
  9458                           ;I2C1.c: 202: SSPCON2bits.RSEN=0;
  9459  0030C0  92C5               	bcf	4037,1,c	;volatile
  9460                           
  9461                           ;I2C1.c: 203: SSPCON2bits.SEN=0;
  9462  0030C2  90C5               	bcf	4037,0,c	;volatile
  9463  0030C4  0012               	return		;funcret
  9464  0030C6                     __end_of_ResetVariables_I2C:
  9465                           	opt stack 0
  9466                           tblptru	equ	0xFF8
  9467                           tblptrh	equ	0xFF7
  9468                           tblptrl	equ	0xFF6
  9469                           tablat	equ	0xFF5
  9470                           prodh	equ	0xFF4
  9471                           prodl	equ	0xFF3
  9472                           postinc0	equ	0xFEE
  9473                           wreg	equ	0xFE8
  9474                           indf1	equ	0xFE7
  9475                           postdec1	equ	0xFE5
  9476                           fsr1h	equ	0xFE2
  9477                           fsr1l	equ	0xFE1
  9478                           indf2	equ	0xFDF
  9479                           postinc2	equ	0xFDE
  9480                           postdec2	equ	0xFDD
  9481                           fsr2h	equ	0xFDA
  9482                           fsr2l	equ	0xFD9
  9483                           status	equ	0xFD8
  9484                           
  9485 ;; *************** function _ReadI2C *****************
  9486 ;; Defined at:
  9487 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\i2c\i2c_read.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;		None
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;		None
  9492 ;; Return value:  Size  Location     Type
  9493 ;;                  1    wreg      unsigned char 
  9494 ;; Registers used:
  9495 ;;		wreg, status,2, status,0
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9505 ;;Total ram usage:        0 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    2
  9508 ;; This function calls:
  9509 ;;		Nothing
  9510 ;; This function is called by:
  9511 ;;		_ReadByte_I2C
  9512 ;;		_WriteMANU_I2C
  9513 ;;		_WriteDEVICE_I2C
  9514 ;; This function uses a non-reentrant model
  9515 ;;
  9516                           
  9517                           	psect	text33
  9518  002FE2                     __ptext33:
  9519                           	opt stack 0
  9520  002FE2                     _ReadI2C:
  9521                           	opt stack 26
  9522                           
  9523                           ;incstack = 0
  9524  002FE2  50C6               	movf	4038,w,c	;volatile
  9525  002FE4  0B0F               	andlw	15
  9526  002FE6  0A08               	xorlw	8
  9527  002FE8  B4D8               	btfsc	status,2,c
  9528  002FEA  D004               	goto	l780
  9529  002FEC  50C6               	movf	4038,w,c	;volatile
  9530  002FEE  0B0F               	andlw	15
  9531  002FF0  0A0B               	xorlw	11
  9532  002FF2  B4D8               	btfsc	status,2,c
  9533  002FF4                     l780:
  9534  002FF4  86C5               	bsf	4037,3,c	;volatile
  9535  002FF6                     l781:
  9536  002FF6  A0C7               	btfss	4039,0,c	;volatile
  9537  002FF8  D7FE               	goto	l781
  9538  002FFA  50C9               	movf	4041,w,c	;volatile
  9539  002FFC  0012               	return	
  9540  002FFE                     __end_of_ReadI2C:
  9541                           	opt stack 0
  9542                           tblptru	equ	0xFF8
  9543                           tblptrh	equ	0xFF7
  9544                           tblptrl	equ	0xFF6
  9545                           tablat	equ	0xFF5
  9546                           prodh	equ	0xFF4
  9547                           prodl	equ	0xFF3
  9548                           postinc0	equ	0xFEE
  9549                           wreg	equ	0xFE8
  9550                           indf1	equ	0xFE7
  9551                           postdec1	equ	0xFE5
  9552                           fsr1h	equ	0xFE2
  9553                           fsr1l	equ	0xFE1
  9554                           indf2	equ	0xFDF
  9555                           postinc2	equ	0xFDE
  9556                           postdec2	equ	0xFDD
  9557                           fsr2h	equ	0xFDA
  9558                           fsr2l	equ	0xFD9
  9559                           status	equ	0xFD8
  9560                           
  9561 ;; *************** function _Open_I2C1 *****************
  9562 ;; Defined at:
  9563 ;;		line 2 in file "../I2C1.c"
  9564 ;; Parameters:    Size  Location     Type
  9565 ;;		None
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;		None
  9568 ;; Return value:  Size  Location     Type
  9569 ;;		None               void
  9570 ;; Registers used:
  9571 ;;		wreg, status,2, status,0, cstack
  9572 ;; Tracked objects:
  9573 ;;		On entry : 0/0
  9574 ;;		On exit  : 0/0
  9575 ;;		Unchanged: 0/0
  9576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9581 ;;Total ram usage:        0 bytes
  9582 ;; Hardware stack levels used:    1
  9583 ;; Hardware stack levels required when called:    3
  9584 ;; This function calls:
  9585 ;;		_IdleI2C
  9586 ;;		_OpenI2C
  9587 ;; This function is called by:
  9588 ;;		_output_logic
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           	psect	text34
  9593  003072                     __ptext34:
  9594                           	opt stack 0
  9595  003072                     _Open_I2C1:
  9596                           	opt stack 26
  9597                           
  9598                           ;I2C1.c: 7: SSPADD= 0x27;
  9599                           
  9600                           ;incstack = 0
  9601  003072  0E27               	movlw	39
  9602  003074  6EC8               	movwf	4040,c	;volatile
  9603                           
  9604                           ;I2C1.c: 8: OpenI2C(0b00001000, 0b10000000);
  9605  003076  0E80               	movlw	128
  9606  003078  6E10               	movwf	OpenI2C@slew,c
  9607  00307A  0E08               	movlw	8
  9608  00307C  ECD3  F017         	call	_OpenI2C
  9609                           
  9610                           ;I2C1.c: 10: IdleI2C();
  9611  003080  EC43  F018         	call	_IdleI2C	;wreg free
  9612  003084  0012               	return		;funcret
  9613  003086                     __end_of_Open_I2C1:
  9614                           	opt stack 0
  9615                           tblptru	equ	0xFF8
  9616                           tblptrh	equ	0xFF7
  9617                           tblptrl	equ	0xFF6
  9618                           tablat	equ	0xFF5
  9619                           prodh	equ	0xFF4
  9620                           prodl	equ	0xFF3
  9621                           postinc0	equ	0xFEE
  9622                           wreg	equ	0xFE8
  9623                           indf1	equ	0xFE7
  9624                           postdec1	equ	0xFE5
  9625                           fsr1h	equ	0xFE2
  9626                           fsr1l	equ	0xFE1
  9627                           indf2	equ	0xFDF
  9628                           postinc2	equ	0xFDE
  9629                           postdec2	equ	0xFDD
  9630                           fsr2h	equ	0xFDA
  9631                           fsr2l	equ	0xFD9
  9632                           status	equ	0xFD8
  9633                           
  9634 ;; *************** function _OpenI2C *****************
  9635 ;; Defined at:
  9636 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\i2c\i2c_open.c"
  9637 ;; Parameters:    Size  Location     Type
  9638 ;;  sync_mode       1    wreg     unsigned char 
  9639 ;;  slew            1   15[COMRAM] unsigned char 
  9640 ;; Auto vars:     Size  Location     Type
  9641 ;;  sync_mode       1   16[COMRAM] unsigned char 
  9642 ;; Return value:  Size  Location     Type
  9643 ;;		None               void
  9644 ;; Registers used:
  9645 ;;		wreg, status,2, status,0
  9646 ;; Tracked objects:
  9647 ;;		On entry : 0/0
  9648 ;;		On exit  : 0/0
  9649 ;;		Unchanged: 0/0
  9650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9651 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9655 ;;Total ram usage:        2 bytes
  9656 ;; Hardware stack levels used:    1
  9657 ;; Hardware stack levels required when called:    2
  9658 ;; This function calls:
  9659 ;;		Nothing
  9660 ;; This function is called by:
  9661 ;;		_Open_I2C1
  9662 ;; This function uses a non-reentrant model
  9663 ;;
  9664                           
  9665                           	psect	text35
  9666  002FA6                     __ptext35:
  9667                           	opt stack 0
  9668  002FA6                     _OpenI2C:
  9669                           	opt stack 26
  9670                           
  9671                           ;incstack = 0
  9672                           ;OpenI2C@sync_mode stored from wreg
  9673  002FA6  6E11               	movwf	OpenI2C@sync_mode,c
  9674  002FA8  0E3F               	movlw	63
  9675  002FAA  16C7               	andwf	4039,f,c	;volatile
  9676  002FAC  0E00               	movlw	0
  9677  002FAE  6EC6               	movwf	4038,c	;volatile
  9678  002FB0  0E00               	movlw	0
  9679  002FB2  6EC5               	movwf	4037,c	;volatile
  9680  002FB4  5011               	movf	OpenI2C@sync_mode,w,c
  9681  002FB6  12C6               	iorwf	4038,f,c	;volatile
  9682  002FB8  5010               	movf	OpenI2C@slew,w,c
  9683  002FBA  12C7               	iorwf	4039,f,c	;volatile
  9684  002FBC  8694               	bsf	3988,3,c	;volatile
  9685  002FBE  8894               	bsf	3988,4,c	;volatile
  9686  002FC0  8AC6               	bsf	4038,5,c	;volatile
  9687  002FC2  0012               	return		;funcret
  9688  002FC4                     __end_of_OpenI2C:
  9689                           	opt stack 0
  9690                           tblptru	equ	0xFF8
  9691                           tblptrh	equ	0xFF7
  9692                           tblptrl	equ	0xFF6
  9693                           tablat	equ	0xFF5
  9694                           prodh	equ	0xFF4
  9695                           prodl	equ	0xFF3
  9696                           postinc0	equ	0xFEE
  9697                           wreg	equ	0xFE8
  9698                           indf1	equ	0xFE7
  9699                           postdec1	equ	0xFE5
  9700                           fsr1h	equ	0xFE2
  9701                           fsr1l	equ	0xFE1
  9702                           indf2	equ	0xFDF
  9703                           postinc2	equ	0xFDE
  9704                           postdec2	equ	0xFDD
  9705                           fsr2h	equ	0xFDA
  9706                           fsr2l	equ	0xFD9
  9707                           status	equ	0xFD8
  9708                           
  9709 ;; *************** function _IdleI2C *****************
  9710 ;; Defined at:
  9711 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\i2c\i2c_idle.c"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;		None
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;		None
  9716 ;; Return value:  Size  Location     Type
  9717 ;;		None               void
  9718 ;; Registers used:
  9719 ;;		wreg, status,2, status,0
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/0
  9722 ;;		On exit  : 0/0
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9727 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;Total ram usage:        1 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; Hardware stack levels required when called:    2
  9732 ;; This function calls:
  9733 ;;		Nothing
  9734 ;; This function is called by:
  9735 ;;		_Open_I2C1
  9736 ;;		_ReadByte_I2C
  9737 ;;		_WriteI2C
  9738 ;;		_WriteMANU_I2C
  9739 ;;		_WriteDEVICE_I2C
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           	psect	text36
  9744  003086                     __ptext36:
  9745                           	opt stack 0
  9746  003086                     _IdleI2C:
  9747                           	opt stack 25
  9748  003086                     l5131:
  9749  003086  CFC5 F010          	movff	4037,??_IdleI2C	;volatile
  9750  00308A  0E1F               	movlw	31
  9751  00308C  1610               	andwf	??_IdleI2C,f,c
  9752  00308E  A4D8               	btfss	status,2,c
  9753  003090  D7FA               	goto	l5131
  9754  003092  A4C7               	btfss	4039,2,c	;volatile
  9755  003094  0012               	return	
  9756  003096  D7F7               	goto	l5131
  9757  003098                     __end_of_IdleI2C:
  9758                           	opt stack 0
  9759                           tblptru	equ	0xFF8
  9760                           tblptrh	equ	0xFF7
  9761                           tblptrl	equ	0xFF6
  9762                           tablat	equ	0xFF5
  9763                           prodh	equ	0xFF4
  9764                           prodl	equ	0xFF3
  9765                           postinc0	equ	0xFEE
  9766                           wreg	equ	0xFE8
  9767                           indf1	equ	0xFE7
  9768                           postdec1	equ	0xFE5
  9769                           fsr1h	equ	0xFE2
  9770                           fsr1l	equ	0xFE1
  9771                           indf2	equ	0xFDF
  9772                           postinc2	equ	0xFDE
  9773                           postdec2	equ	0xFDD
  9774                           fsr2h	equ	0xFDA
  9775                           fsr2l	equ	0xFD9
  9776                           status	equ	0xFD8
  9777                           
  9778 ;; *************** function _InitializeTimer3 *****************
  9779 ;; Defined at:
  9780 ;;		line 11 in file "../TIMER3.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;		None
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;		None
  9785 ;; Return value:  Size  Location     Type
  9786 ;;		None               void
  9787 ;; Registers used:
  9788 ;;		wreg, status,2
  9789 ;; Tracked objects:
  9790 ;;		On entry : 0/0
  9791 ;;		On exit  : 0/0
  9792 ;;		Unchanged: 0/0
  9793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;Total ram usage:        0 bytes
  9799 ;; Hardware stack levels used:    1
  9800 ;; Hardware stack levels required when called:    2
  9801 ;; This function calls:
  9802 ;;		Nothing
  9803 ;; This function is called by:
  9804 ;;		_output_logic
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           	psect	text37
  9809  002F46                     __ptext37:
  9810                           	opt stack 0
  9811  002F46                     _InitializeTimer3:
  9812                           	opt stack 27
  9813                           
  9814                           ;TIMER3.c: 13: TMR3IE = 1;
  9815                           
  9816                           ;incstack = 0
  9817  002F46  82A0               	bsf	4000,1,c	;volatile
  9818                           
  9819                           ;TIMER3.c: 14: T3CON = 0;
  9820  002F48  0E00               	movlw	0
  9821  002F4A  6EB1               	movwf	4017,c	;volatile
  9822                           
  9823                           ;TIMER3.c: 15: T3CONbits.RD16 = 1;
  9824  002F4C  8EB1               	bsf	4017,7,c	;volatile
  9825                           
  9826                           ;TIMER3.c: 16: T3CONbits.T3CCP2 = 0;
  9827  002F4E  9CB1               	bcf	4017,6,c	;volatile
  9828                           
  9829                           ;TIMER3.c: 17: T3CONbits.T3CKPS1 = 0;
  9830  002F50  9AB1               	bcf	4017,5,c	;volatile
  9831                           
  9832                           ;TIMER3.c: 18: T3CONbits.T3CKPS0 = 1;
  9833  002F52  88B1               	bsf	4017,4,c	;volatile
  9834                           
  9835                           ;TIMER3.c: 19: T3CONbits.T3CCP1 = 0;
  9836  002F54  96B1               	bcf	4017,3,c	;volatile
  9837                           
  9838                           ;TIMER3.c: 20: T3CONbits.T3SYNC = 0;
  9839  002F56  94B1               	bcf	4017,2,c	;volatile
  9840                           
  9841                           ;TIMER3.c: 21: T3CONbits.TMR3CS = 0;
  9842  002F58  92B1               	bcf	4017,1,c	;volatile
  9843                           
  9844                           ;TIMER3.c: 22: T3CONbits.TMR3ON = 1;
  9845  002F5A  80B1               	bsf	4017,0,c	;volatile
  9846                           
  9847                           ;TIMER3.c: 23: TMR3H = 0xF8;
  9848  002F5C  0EF8               	movlw	248
  9849  002F5E  6EB3               	movwf	4019,c	;volatile
  9850                           
  9851                           ;TIMER3.c: 24: TMR3L = 0x46;
  9852  002F60  0E46               	movlw	70
  9853  002F62  6EB2               	movwf	4018,c	;volatile
  9854                           
  9855                           ;TIMER3.c: 25: TMR3IF = 0;
  9856  002F64  92A1               	bcf	4001,1,c	;volatile
  9857  002F66  0012               	return		;funcret
  9858  002F68                     __end_of_InitializeTimer3:
  9859                           	opt stack 0
  9860                           tblptru	equ	0xFF8
  9861                           tblptrh	equ	0xFF7
  9862                           tblptrl	equ	0xFF6
  9863                           tablat	equ	0xFF5
  9864                           prodh	equ	0xFF4
  9865                           prodl	equ	0xFF3
  9866                           postinc0	equ	0xFEE
  9867                           wreg	equ	0xFE8
  9868                           indf1	equ	0xFE7
  9869                           postdec1	equ	0xFE5
  9870                           fsr1h	equ	0xFE2
  9871                           fsr1l	equ	0xFE1
  9872                           indf2	equ	0xFDF
  9873                           postinc2	equ	0xFDE
  9874                           postdec2	equ	0xFDD
  9875                           fsr2h	equ	0xFDA
  9876                           fsr2l	equ	0xFD9
  9877                           status	equ	0xFD8
  9878                           
  9879 ;; *************** function _InitADC *****************
  9880 ;; Defined at:
  9881 ;;		line 11 in file "../ADC.c"
  9882 ;; Parameters:    Size  Location     Type
  9883 ;;		None
  9884 ;; Auto vars:     Size  Location     Type
  9885 ;;		None
  9886 ;; Return value:  Size  Location     Type
  9887 ;;		None               void
  9888 ;; Registers used:
  9889 ;;		None
  9890 ;; Tracked objects:
  9891 ;;		On entry : 0/0
  9892 ;;		On exit  : 0/0
  9893 ;;		Unchanged: 0/0
  9894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9899 ;;Total ram usage:        0 bytes
  9900 ;; Hardware stack levels used:    1
  9901 ;; Hardware stack levels required when called:    2
  9902 ;; This function calls:
  9903 ;;		Nothing
  9904 ;; This function is called by:
  9905 ;;		_output_logic
  9906 ;; This function uses a non-reentrant model
  9907 ;;
  9908                           
  9909                           	psect	text38
  9910  0030D4                     __ptext38:
  9911                           	opt stack 0
  9912  0030D4                     _InitADC:
  9913                           	opt stack 27
  9914                           
  9915                           ;ADC.c: 13: ADON = 1;
  9916                           
  9917                           ;incstack = 0
  9918  0030D4  80C2               	bsf	4034,0,c	;volatile
  9919                           
  9920                           ;ADC.c: 14: ADFM = 1;
  9921  0030D6  8EC0               	bsf	4032,7,c	;volatile
  9922  0030D8  0012               	return		;funcret
  9923  0030DA                     __end_of_InitADC:
  9924                           	opt stack 0
  9925                           tblptru	equ	0xFF8
  9926                           tblptrh	equ	0xFF7
  9927                           tblptrl	equ	0xFF6
  9928                           tablat	equ	0xFF5
  9929                           prodh	equ	0xFF4
  9930                           prodl	equ	0xFF3
  9931                           postinc0	equ	0xFEE
  9932                           wreg	equ	0xFE8
  9933                           indf1	equ	0xFE7
  9934                           postdec1	equ	0xFE5
  9935                           fsr1h	equ	0xFE2
  9936                           fsr1l	equ	0xFE1
  9937                           indf2	equ	0xFDF
  9938                           postinc2	equ	0xFDE
  9939                           postdec2	equ	0xFDD
  9940                           fsr2h	equ	0xFDA
  9941                           fsr2l	equ	0xFD9
  9942                           status	equ	0xFD8
  9943                           
  9944 ;; *************** function _GetSampleADC *****************
  9945 ;; Defined at:
  9946 ;;		line 17 in file "../ADC.c"
  9947 ;; Parameters:    Size  Location     Type
  9948 ;;		None
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;		None
  9951 ;; Return value:  Size  Location     Type
  9952 ;;                  2   15[COMRAM] unsigned int 
  9953 ;; Registers used:
  9954 ;;		None
  9955 ;; Tracked objects:
  9956 ;;		On entry : 0/0
  9957 ;;		On exit  : 0/0
  9958 ;;		Unchanged: 0/0
  9959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9960 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9963 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9964 ;;Total ram usage:        2 bytes
  9965 ;; Hardware stack levels used:    1
  9966 ;; Hardware stack levels required when called:    2
  9967 ;; This function calls:
  9968 ;;		Nothing
  9969 ;; This function is called by:
  9970 ;;		_output_logic
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           	psect	text39
  9975  00301A                     __ptext39:
  9976                           	opt stack 0
  9977  00301A                     _GetSampleADC:
  9978                           	opt stack 27
  9979                           
  9980                           ;ADC.c: 19: GO = 1;
  9981                           
  9982                           ;incstack = 0
  9983  00301A  82C2               	bsf	4034,1,c	;volatile
  9984  00301C                     l390:
  9985  00301C  B2C2               	btfsc	4034,1,c	;volatile
  9986  00301E  D7FE               	goto	l390
  9987                           
  9988                           ;ADC.c: 22: }
  9989                           ;ADC.c: 23: Value_AD = ADRES;
  9990  003020  CFC3 F07A          	movff	4035,ADC@Value_AD	;volatile
  9991  003024  CFC4 F07B          	movff	4036,ADC@Value_AD+1	;volatile
  9992                           
  9993                           ;ADC.c: 25: return Value_AD;
  9994  003028  C07A  F010         	movff	ADC@Value_AD,?_GetSampleADC
  9995  00302C  C07B  F011         	movff	ADC@Value_AD+1,?_GetSampleADC+1
  9996  003030  0012               	return		;funcret
  9997  003032                     __end_of_GetSampleADC:
  9998                           	opt stack 0
  9999                           tblptru	equ	0xFF8
 10000                           tblptrh	equ	0xFF7
 10001                           tblptrl	equ	0xFF6
 10002                           tablat	equ	0xFF5
 10003                           prodh	equ	0xFF4
 10004                           prodl	equ	0xFF3
 10005                           postinc0	equ	0xFEE
 10006                           wreg	equ	0xFE8
 10007                           indf1	equ	0xFE7
 10008                           postdec1	equ	0xFE5
 10009                           fsr1h	equ	0xFE2
 10010                           fsr1l	equ	0xFE1
 10011                           indf2	equ	0xFDF
 10012                           postinc2	equ	0xFDE
 10013                           postdec2	equ	0xFDD
 10014                           fsr2h	equ	0xFDA
 10015                           fsr2l	equ	0xFD9
 10016                           status	equ	0xFD8
 10017                           
 10018 ;; *************** function _GetDataSensorDHT22 *****************
 10019 ;; Defined at:
 10020 ;;		line 44 in file "../DHT22.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;		None
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;  CharTX          0    0        unsigned char [0]
 10025 ;; Return value:  Size  Location     Type
 10026 ;;		None               void
 10027 ;; Registers used:
 10028 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;Total ram usage:        2 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    5
 10041 ;; This function calls:
 10042 ;;		_SendStringUSART
 10043 ;;		___ftdiv
 10044 ;;		___lwtoft
 10045 ;;		_check_response
 10046 ;;		_read_byte
 10047 ;;		_start_signal
 10048 ;; This function is called by:
 10049 ;;		_output_logic
 10050 ;; This function uses a non-reentrant model
 10051 ;;
 10052                           
 10053                           	psect	text40
 10054  0020B4                     __ptext40:
 10055                           	opt stack 0
 10056  0020B4                     _GetDataSensorDHT22:
 10057                           	opt stack 24
 10058                           
 10059                           ;DHT22.c: 45: char CharTX[];
 10060                           ;DHT22.c: 46: start_signal();
 10061                           
 10062                           ;incstack = 0
 10063  0020B4  ECB4  F017         	call	_start_signal	;wreg free
 10064                           
 10065                           ;DHT22.c: 47: check = check_response();
 10066  0020B8  EC79  F016         	call	_check_response	;wreg free
 10067  0020BC  C010  F045         	movff	?_check_response,_check
 10068  0020C0  C011  F046         	movff	?_check_response+1,_check+1
 10069                           
 10070                           ;DHT22.c: 49: if (!check)
 10071  0020C4  5045               	movf	_check,w,c
 10072  0020C6  1046               	iorwf	_check+1,w,c
 10073  0020C8  A4D8               	btfss	status,2,c
 10074  0020CA  D007               	goto	l6277
 10075                           
 10076                           ;DHT22.c: 50: {
 10077                           ;DHT22.c: 52: SendStringUSART("No response  from the sensor DHT22");
 10078  0020CC  0EB0               	movlw	low STR_15
 10079  0020CE  6E15               	movwf	SendStringUSART@text,c
 10080  0020D0  0EFE               	movlw	high STR_15
 10081  0020D2  6E16               	movwf	SendStringUSART@text+1,c
 10082  0020D4  EC19  F018         	call	_SendStringUSART	;wreg free
 10083                           
 10084                           ;DHT22.c: 54: }
 10085  0020D8  0012               	return	
 10086  0020DA                     l6277:
 10087                           
 10088                           ;DHT22.c: 55: else
 10089                           ;DHT22.c: 56: {
 10090                           ;DHT22.c: 57: RH_Byte1 = read_byte();
 10091  0020DA  EC40  F015         	call	_read_byte	;wreg free
 10092  0020DE  C010  F082         	movff	?_read_byte,_RH_Byte1
 10093  0020E2  C011  F083         	movff	?_read_byte+1,_RH_Byte1+1
 10094                           
 10095                           ;DHT22.c: 58: RH_Byte2 = read_byte();
 10096  0020E6  EC40  F015         	call	_read_byte	;wreg free
 10097  0020EA  C010  F084         	movff	?_read_byte,_RH_Byte2
 10098  0020EE  C011  F085         	movff	?_read_byte+1,_RH_Byte2+1
 10099                           
 10100                           ;DHT22.c: 59: T_Byte1 = read_byte();
 10101  0020F2  EC40  F015         	call	_read_byte	;wreg free
 10102  0020F6  C010  F088         	movff	?_read_byte,_T_Byte1
 10103  0020FA  C011  F089         	movff	?_read_byte+1,_T_Byte1+1
 10104                           
 10105                           ;DHT22.c: 60: T_Byte2 = read_byte();
 10106  0020FE  EC40  F015         	call	_read_byte	;wreg free
 10107  002102  C010  F08A         	movff	?_read_byte,_T_Byte2
 10108  002106  C011  F08B         	movff	?_read_byte+1,_T_Byte2+1
 10109                           
 10110                           ;DHT22.c: 61: CheckSum = read_byte();
 10111  00210A  EC40  F015         	call	_read_byte	;wreg free
 10112  00210E  C010  F07C         	movff	?_read_byte,_CheckSum
 10113  002112  C011  F07D         	movff	?_read_byte+1,_CheckSum+1
 10114                           
 10115                           ;DHT22.c: 62: _delay((unsigned long)((50)*(16000000/4000000.0)));
 10116  002116  0E42               	movlw	66
 10117  002118                     u7087:
 10118  002118  2EE8               	decfsz	wreg,f,c
 10119  00211A  D7FE               	goto	u7087
 10120  00211C  F000 F000          	nop2		;nop
 10121                           
 10122                           ;DHT22.c: 63: TRISBbits.TRISB4 = 0;
 10123  002120  9893               	bcf	3987,4,c	;volatile
 10124                           
 10125                           ;DHT22.c: 64: PORTBbits.RB4 = 1;
 10126  002122  8881               	bsf	3969,4,c	;volatile
 10127                           
 10128                           ;DHT22.c: 67: rh = RH_Byte2 | (RH_Byte1<<8);
 10129  002124  0100               	movlb	0	; () banked
 10130  002126  5182               	movf	_RH_Byte1& (0+255),w,b
 10131  002128  6E2C               	movwf	(??_GetDataSensorDHT22+1)& (0+255),c
 10132  00212A  6A2B               	clrf	??_GetDataSensorDHT22& (0+255),c
 10133  00212C  0100               	movlb	0	; () banked
 10134  00212E  5184               	movf	_RH_Byte2& (0+255),w,b
 10135  002130  102B               	iorwf	??_GetDataSensorDHT22,w,c
 10136  002132  0100               	movlb	0	; () banked
 10137  002134  6FA2               	movwf	_rh& (0+255),b
 10138  002136  0100               	movlb	0	; () banked
 10139  002138  5185               	movf	(_RH_Byte2+1)& (0+255),w,b
 10140  00213A  102C               	iorwf	??_GetDataSensorDHT22+1,w,c
 10141  00213C  0100               	movlb	0	; () banked
 10142  00213E  6FA3               	movwf	(_rh+1)& (0+255),b
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;DHT22.c: 68: temp = T_Byte2 | (T_Byte1<<8);
 10146  002140  0100               	movlb	0	; () banked
 10147  002142  5188               	movf	_T_Byte1& (0+255),w,b
 10148  002144  6E2C               	movwf	(??_GetDataSensorDHT22+1)& (0+255),c
 10149  002146  6A2B               	clrf	??_GetDataSensorDHT22& (0+255),c
 10150  002148  0100               	movlb	0	; () banked
 10151  00214A  518A               	movf	_T_Byte2& (0+255),w,b
 10152  00214C  102B               	iorwf	??_GetDataSensorDHT22,w,c
 10153  00214E  6E49               	movwf	_temp,c
 10154  002150  0100               	movlb	0	; () banked
 10155  002152  518B               	movf	(_T_Byte2+1)& (0+255),w,b
 10156  002154  102C               	iorwf	??_GetDataSensorDHT22+1,w,c
 10157  002156  6E4A               	movwf	_temp+1,c
 10158                           
 10159                           ; BSR set to: 0
 10160                           ;DHT22.c: 69: sign = 0;
 10161  002158  0E00               	movlw	0
 10162  00215A  0100               	movlb	0	; () banked
 10163  00215C  6FA7               	movwf	(_sign+1)& (0+255),b
 10164  00215E  0E00               	movlw	0
 10165  002160  6FA6               	movwf	_sign& (0+255),b
 10166                           
 10167                           ; BSR set to: 0
 10168                           ;DHT22.c: 70: if (temp>0x8000)
 10169  002162  0449               	decf	_temp,w,c
 10170  002164  0E80               	movlw	128
 10171  002166  584A               	subwfb	_temp+1,w,c
 10172  002168  A0D8               	btfss	status,0,c
 10173  00216A  D009               	goto	l6297
 10174                           
 10175                           ; BSR set to: 0
 10176                           ;DHT22.c: 71: { temp &= 0x0fff;
 10177  00216C  0EFF               	movlw	255
 10178  00216E  1649               	andwf	_temp,f,c
 10179  002170  0E0F               	movlw	15
 10180  002172  164A               	andwf	_temp+1,f,c
 10181                           
 10182                           ; BSR set to: 0
 10183                           ;DHT22.c: 72: sign = 1;
 10184  002174  0E00               	movlw	0
 10185  002176  0100               	movlb	0	; () banked
 10186  002178  6FA7               	movwf	(_sign+1)& (0+255),b
 10187  00217A  0E01               	movlw	1
 10188  00217C  6FA6               	movwf	_sign& (0+255),b
 10189  00217E                     l6297:
 10190                           
 10191                           ; BSR set to: 0
 10192                           ;DHT22.c: 73: }
 10193                           ;DHT22.c: 74: Value_rhdht22 = (float)(rh/10.0);
 10194  00217E  C0A2  F018         	movff	_rh,___lwtoft@c
 10195  002182  C0A3  F019         	movff	_rh+1,___lwtoft@c+1
 10196  002186  EC91  F017         	call	___lwtoft	;wreg free
 10197  00218A  C018  F01C         	movff	?___lwtoft,___ftdiv@f1
 10198  00218E  C019  F01D         	movff	?___lwtoft+1,___ftdiv@f1+1
 10199  002192  C01A  F01E         	movff	?___lwtoft+2,___ftdiv@f1+2
 10200  002196  0E00               	movlw	0
 10201  002198  6E1F               	movwf	___ftdiv@f2,c
 10202  00219A  0E20               	movlw	32
 10203  00219C  6E20               	movwf	___ftdiv@f2+1,c
 10204  00219E  0E41               	movlw	65
 10205  0021A0  6E21               	movwf	___ftdiv@f2+2,c
 10206  0021A2  ECB1  F012         	call	___ftdiv	;wreg free
 10207  0021A6  C01C  F074         	movff	?___ftdiv,_Value_rhdht22
 10208  0021AA  C01D  F075         	movff	?___ftdiv+1,_Value_rhdht22+1
 10209  0021AE  C01E  F076         	movff	?___ftdiv+2,_Value_rhdht22+2
 10210                           
 10211                           ;DHT22.c: 75: Value_tempdht22 = (float)(temp/10.0);
 10212  0021B2  C049  F018         	movff	_temp,___lwtoft@c
 10213  0021B6  C04A  F019         	movff	_temp+1,___lwtoft@c+1
 10214  0021BA  EC91  F017         	call	___lwtoft	;wreg free
 10215  0021BE  C018  F01C         	movff	?___lwtoft,___ftdiv@f1
 10216  0021C2  C019  F01D         	movff	?___lwtoft+1,___ftdiv@f1+1
 10217  0021C6  C01A  F01E         	movff	?___lwtoft+2,___ftdiv@f1+2
 10218  0021CA  0E00               	movlw	0
 10219  0021CC  6E1F               	movwf	___ftdiv@f2,c
 10220  0021CE  0E20               	movlw	32
 10221  0021D0  6E20               	movwf	___ftdiv@f2+1,c
 10222  0021D2  0E41               	movlw	65
 10223  0021D4  6E21               	movwf	___ftdiv@f2+2,c
 10224  0021D6  ECB1  F012         	call	___ftdiv	;wreg free
 10225  0021DA  C01C  F077         	movff	?___ftdiv,_Value_tempdht22
 10226  0021DE  C01D  F078         	movff	?___ftdiv+1,_Value_tempdht22+1
 10227  0021E2  C01E  F079         	movff	?___ftdiv+2,_Value_tempdht22+2
 10228  0021E6  0012               	return	
 10229  0021E8                     __end_of_GetDataSensorDHT22:
 10230                           	opt stack 0
 10231                           tblptru	equ	0xFF8
 10232                           tblptrh	equ	0xFF7
 10233                           tblptrl	equ	0xFF6
 10234                           tablat	equ	0xFF5
 10235                           prodh	equ	0xFF4
 10236                           prodl	equ	0xFF3
 10237                           postinc0	equ	0xFEE
 10238                           wreg	equ	0xFE8
 10239                           indf1	equ	0xFE7
 10240                           postdec1	equ	0xFE5
 10241                           fsr1h	equ	0xFE2
 10242                           fsr1l	equ	0xFE1
 10243                           indf2	equ	0xFDF
 10244                           postinc2	equ	0xFDE
 10245                           postdec2	equ	0xFDD
 10246                           fsr2h	equ	0xFDA
 10247                           fsr2l	equ	0xFD9
 10248                           status	equ	0xFD8
 10249                           
 10250 ;; *************** function _start_signal *****************
 10251 ;; Defined at:
 10252 ;;		line 3 in file "../DHT22.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;		None
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;		None
 10257 ;; Return value:  Size  Location     Type
 10258 ;;		None               void
 10259 ;; Registers used:
 10260 ;;		wreg
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10269 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;Total ram usage:        1 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; Hardware stack levels required when called:    2
 10273 ;; This function calls:
 10274 ;;		Nothing
 10275 ;; This function is called by:
 10276 ;;		_GetDataSensorDHT22
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280                           	psect	text41
 10281  002F68                     __ptext41:
 10282                           	opt stack 0
 10283  002F68                     _start_signal:
 10284                           	opt stack 26
 10285                           
 10286                           ;incstack = 0
 10287  002F68  9893               	bcf	3987,4,c	;volatile
 10288                           
 10289                           ;DHT22.c: 5: PORTBbits.RB4 = 0;
 10290  002F6A  9881               	bcf	3969,4,c	;volatile
 10291                           
 10292                           ;DHT22.c: 6: _delay((unsigned long)((18)*(16000000/4000.0)));
 10293  002F6C  0E5E               	movlw	94
 10294  002F6E  6E10               	movwf	??_start_signal& (0+255),c
 10295  002F70  0E80               	movlw	128
 10296  002F72                     u7097:
 10297  002F72  2EE8               	decfsz	wreg,f,c
 10298  002F74  D7FE               	goto	u7097
 10299  002F76  2E10               	decfsz	??_start_signal& (0+255),f,c
 10300  002F78  D7FC               	goto	u7097
 10301  002F7A  F000 F000          	nop2	
 10302                           
 10303                           ;DHT22.c: 7: TRISBbits.TRISB4 = 1;
 10304  002F7E  8893               	bsf	3987,4,c	;volatile
 10305                           
 10306                           ;DHT22.c: 8: _delay((unsigned long)((30)*(16000000/4000000.0)));
 10307  002F80  0E28               	movlw	40
 10308  002F82                     u7107:
 10309  002F82  2EE8               	decfsz	wreg,f,c
 10310  002F84  D7FE               	goto	u7107
 10311  002F86  0012               	return		;funcret
 10312  002F88                     __end_of_start_signal:
 10313                           	opt stack 0
 10314                           tblptru	equ	0xFF8
 10315                           tblptrh	equ	0xFF7
 10316                           tblptrl	equ	0xFF6
 10317                           tablat	equ	0xFF5
 10318                           prodh	equ	0xFF4
 10319                           prodl	equ	0xFF3
 10320                           postinc0	equ	0xFEE
 10321                           wreg	equ	0xFE8
 10322                           indf1	equ	0xFE7
 10323                           postdec1	equ	0xFE5
 10324                           fsr1h	equ	0xFE2
 10325                           fsr1l	equ	0xFE1
 10326                           indf2	equ	0xFDF
 10327                           postinc2	equ	0xFDE
 10328                           postdec2	equ	0xFDD
 10329                           fsr2h	equ	0xFDA
 10330                           fsr2l	equ	0xFD9
 10331                           status	equ	0xFD8
 10332                           
 10333 ;; *************** function _read_byte *****************
 10334 ;; Defined at:
 10335 ;;		line 30 in file "../DHT22.c"
 10336 ;; Parameters:    Size  Location     Type
 10337 ;;		None
 10338 ;; Auto vars:     Size  Location     Type
 10339 ;;  num             2   20[COMRAM] unsigned short 
 10340 ;; Return value:  Size  Location     Type
 10341 ;;                  2   15[COMRAM] unsigned short 
 10342 ;; Registers used:
 10343 ;;		wreg, status,2, status,0
 10344 ;; Tracked objects:
 10345 ;;		On entry : 0/0
 10346 ;;		On exit  : 0/0
 10347 ;;		Unchanged: 0/0
 10348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10349 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10351 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10352 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10353 ;;Total ram usage:        7 bytes
 10354 ;; Hardware stack levels used:    1
 10355 ;; Hardware stack levels required when called:    2
 10356 ;; This function calls:
 10357 ;;		Nothing
 10358 ;; This function is called by:
 10359 ;;		_GetDataSensorDHT22
 10360 ;; This function uses a non-reentrant model
 10361 ;;
 10362                           
 10363                           	psect	text42
 10364  002A80                     __ptext42:
 10365                           	opt stack 0
 10366  002A80                     _read_byte:
 10367                           	opt stack 26
 10368                           
 10369                           ;incstack = 0
 10370  002A80  0E00               	movlw	0
 10371  002A82  6E16               	movwf	read_byte@num+1,c
 10372  002A84  0E00               	movlw	0
 10373  002A86  6E15               	movwf	read_byte@num,c
 10374                           
 10375                           ;DHT22.c: 32: TRISBbits.TRISB4 = 1;
 10376  002A88  8893               	bsf	3987,4,c	;volatile
 10377                           
 10378                           ;DHT22.c: 33: for (i=0; i<8; i++)
 10379  002A8A  0E00               	movlw	0
 10380  002A8C  6E48               	movwf	_i+1,c
 10381  002A8E  0E00               	movlw	0
 10382  002A90  6E47               	movwf	_i,c
 10383  002A92  5048               	movf	_i+1,w,c
 10384  002A94  E130               	bnz	l547
 10385  002A96  0E08               	movlw	8
 10386  002A98  5C47               	subwf	_i,w,c
 10387  002A9A  B0D8               	btfsc	status,0,c
 10388  002A9C  D02C               	goto	l547
 10389  002A9E                     l548:
 10390  002A9E  B881               	btfsc	3969,4,c	;volatile
 10391  002AA0  D004               	goto	l5459
 10392  002AA2  5041               	movf	_TOUT,w,c
 10393  002AA4  1042               	iorwf	_TOUT+1,w,c
 10394  002AA6  B4D8               	btfsc	status,2,c
 10395  002AA8  D7FA               	goto	l548
 10396  002AAA                     l5459:
 10397                           
 10398                           ;DHT22.c: 35: TMR2 = 0;
 10399  002AAA  0E00               	movlw	0
 10400  002AAC  6ECC               	movwf	4044,c	;volatile
 10401                           
 10402                           ;DHT22.c: 36: TMR2ON = 1;
 10403  002AAE  84CA               	bsf	4042,2,c	;volatile
 10404  002AB0                     l553:
 10405  002AB0  A881               	btfss	3969,4,c	;volatile
 10406  002AB2  D004               	goto	l557
 10407  002AB4  5041               	movf	_TOUT,w,c
 10408  002AB6  1042               	iorwf	_TOUT+1,w,c
 10409  002AB8  B4D8               	btfsc	status,2,c
 10410  002ABA  D7FA               	goto	l553
 10411  002ABC                     l557:
 10412                           
 10413                           ;DHT22.c: 38: TMR2ON = 0;
 10414  002ABC  94CA               	bcf	4042,2,c	;volatile
 10415                           
 10416                           ;DHT22.c: 39: if (TMR2 > 49)
 10417  002ABE  0E31               	movlw	49
 10418  002AC0  64CC               	cpfsgt	4044,c	;volatile
 10419  002AC2  D014               	goto	l5469
 10420                           
 10421                           ;DHT22.c: 40: num |= 1<<(7-i);
 10422  002AC4  5047               	movf	_i,w,c
 10423  002AC6  0800               	sublw	0
 10424  002AC8  6E12               	movwf	??_read_byte& (0+255),c
 10425  002ACA  0E07               	movlw	7
 10426  002ACC  2612               	addwf	??_read_byte,f,c
 10427  002ACE  0E01               	movlw	1
 10428  002AD0  6E13               	movwf	(??_read_byte+1)& (0+255),c
 10429  002AD2  0E00               	movlw	0
 10430  002AD4  6E14               	movwf	(??_read_byte+2)& (0+255),c
 10431  002AD6  2A12               	incf	??_read_byte,f,c
 10432  002AD8  D003               	goto	u5744
 10433  002ADA                     u5745:
 10434  002ADA  90D8               	bcf	status,0,c
 10435  002ADC  3613               	rlcf	??_read_byte+1,f,c
 10436  002ADE  3614               	rlcf	??_read_byte+2,f,c
 10437  002AE0                     u5744:
 10438  002AE0  2E12               	decfsz	??_read_byte,f,c
 10439  002AE2  D7FB               	goto	u5745
 10440  002AE4  5013               	movf	??_read_byte+1,w,c
 10441  002AE6  1215               	iorwf	read_byte@num,f,c
 10442  002AE8  5014               	movf	??_read_byte+2,w,c
 10443  002AEA  1216               	iorwf	read_byte@num+1,f,c
 10444  002AEC                     l5469:
 10445  002AEC  4A47               	infsnz	_i,f,c
 10446  002AEE  2A48               	incf	_i+1,f,c
 10447  002AF0  5048               	movf	_i+1,w,c
 10448  002AF2  E101               	bnz	u5750
 10449  002AF4  D7D0               	goto	L7
 10450  002AF6                     u5750:
 10451  002AF6                     l547:
 10452                           
 10453                           ;DHT22.c: 41: }
 10454                           ;DHT22.c: 42: return num;
 10455  002AF6  C015  F010         	movff	read_byte@num,?_read_byte
 10456  002AFA  C016  F011         	movff	read_byte@num+1,?_read_byte+1
 10457  002AFE  0012               	return		;funcret
 10458  002B00                     __end_of_read_byte:
 10459                           	opt stack 0
 10460                           tblptru	equ	0xFF8
 10461                           tblptrh	equ	0xFF7
 10462                           tblptrl	equ	0xFF6
 10463                           tablat	equ	0xFF5
 10464                           prodh	equ	0xFF4
 10465                           prodl	equ	0xFF3
 10466                           postinc0	equ	0xFEE
 10467                           wreg	equ	0xFE8
 10468                           indf1	equ	0xFE7
 10469                           postdec1	equ	0xFE5
 10470                           fsr1h	equ	0xFE2
 10471                           fsr1l	equ	0xFE1
 10472                           indf2	equ	0xFDF
 10473                           postinc2	equ	0xFDE
 10474                           postdec2	equ	0xFDD
 10475                           fsr2h	equ	0xFDA
 10476                           fsr2l	equ	0xFD9
 10477                           status	equ	0xFD8
 10478                           
 10479 ;; *************** function _check_response *****************
 10480 ;; Defined at:
 10481 ;;		line 10 in file "../DHT22.c"
 10482 ;; Parameters:    Size  Location     Type
 10483 ;;		None
 10484 ;; Auto vars:     Size  Location     Type
 10485 ;;		None
 10486 ;; Return value:  Size  Location     Type
 10487 ;;                  2   15[COMRAM] unsigned short 
 10488 ;; Registers used:
 10489 ;;		wreg, status,2, status,0
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10495 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;Total ram usage:        2 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    2
 10502 ;; This function calls:
 10503 ;;		Nothing
 10504 ;; This function is called by:
 10505 ;;		_GetDataSensorDHT22
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           	psect	text43
 10510  002CF2                     __ptext43:
 10511                           	opt stack 0
 10512  002CF2                     _check_response:
 10513                           	opt stack 26
 10514                           
 10515                           ;incstack = 0
 10516  002CF2  0E00               	movlw	0
 10517  002CF4  6E42               	movwf	_TOUT+1,c
 10518  002CF6  0E00               	movlw	0
 10519  002CF8  6E41               	movwf	_TOUT,c
 10520                           
 10521                           ;DHT22.c: 12: TMR2 = 0;
 10522  002CFA  0E00               	movlw	0
 10523  002CFC  6ECC               	movwf	4044,c	;volatile
 10524                           
 10525                           ;DHT22.c: 13: TMR2ON = 1;
 10526  002CFE  84CA               	bsf	4042,2,c	;volatile
 10527  002D00                     l529:
 10528  002D00  B881               	btfsc	3969,4,c	;volatile
 10529  002D02  D004               	goto	l5425
 10530  002D04  5041               	movf	_TOUT,w,c
 10531  002D06  1042               	iorwf	_TOUT+1,w,c
 10532  002D08  B4D8               	btfsc	status,2,c
 10533  002D0A  D7FA               	goto	l529
 10534  002D0C                     l5425:
 10535                           
 10536                           ;DHT22.c: 15: if (TOUT)
 10537  002D0C  5041               	movf	_TOUT,w,c
 10538  002D0E  1042               	iorwf	_TOUT+1,w,c
 10539  002D10  B4D8               	btfsc	status,2,c
 10540  002D12  D005               	goto	l5433
 10541                           
 10542                           ;DHT22.c: 16: return 0;
 10543  002D14  0E00               	movlw	0
 10544  002D16  6E11               	movwf	?_check_response+1,c
 10545  002D18  0E00               	movlw	0
 10546  002D1A  6E10               	movwf	?_check_response,c
 10547  002D1C  0012               	return	
 10548  002D1E                     l5433:
 10549                           
 10550                           ;DHT22.c: 17: else
 10551                           ;DHT22.c: 18: { TMR2 = 0;
 10552  002D1E  0E00               	movlw	0
 10553  002D20  6ECC               	movwf	4044,c	;volatile
 10554  002D22                     l537:
 10555  002D22  A881               	btfss	3969,4,c	;volatile
 10556  002D24  D004               	goto	l5437
 10557  002D26  5041               	movf	_TOUT,w,c
 10558  002D28  1042               	iorwf	_TOUT+1,w,c
 10559  002D2A  B4D8               	btfsc	status,2,c
 10560  002D2C  D7FA               	goto	l537
 10561  002D2E                     l5437:
 10562                           
 10563                           ;DHT22.c: 20: if (TOUT)
 10564  002D2E  5041               	movf	_TOUT,w,c
 10565  002D30  1042               	iorwf	_TOUT+1,w,c
 10566  002D32  B4D8               	btfsc	status,2,c
 10567  002D34  D005               	goto	l542
 10568                           
 10569                           ;DHT22.c: 21: return 0;
 10570  002D36  0E00               	movlw	0
 10571  002D38  6E11               	movwf	?_check_response+1,c
 10572  002D3A  0E00               	movlw	0
 10573  002D3C  6E10               	movwf	?_check_response,c
 10574  002D3E  0012               	return	
 10575  002D40                     l542:
 10576                           
 10577                           ;DHT22.c: 22: else
 10578                           ;DHT22.c: 23: { TMR2ON = 0;
 10579  002D40  94CA               	bcf	4042,2,c	;volatile
 10580                           
 10581                           ;DHT22.c: 24: return 1;
 10582  002D42  0E00               	movlw	0
 10583  002D44  6E11               	movwf	?_check_response+1,c
 10584  002D46  0E01               	movlw	1
 10585  002D48  6E10               	movwf	?_check_response,c
 10586  002D4A  0012               	return	
 10587  002D4C                     __end_of_check_response:
 10588                           	opt stack 0
 10589                           tblptru	equ	0xFF8
 10590                           tblptrh	equ	0xFF7
 10591                           tblptrl	equ	0xFF6
 10592                           tablat	equ	0xFF5
 10593                           prodh	equ	0xFF4
 10594                           prodl	equ	0xFF3
 10595                           postinc0	equ	0xFEE
 10596                           wreg	equ	0xFE8
 10597                           indf1	equ	0xFE7
 10598                           postdec1	equ	0xFE5
 10599                           fsr1h	equ	0xFE2
 10600                           fsr1l	equ	0xFE1
 10601                           indf2	equ	0xFDF
 10602                           postinc2	equ	0xFDE
 10603                           postdec2	equ	0xFDD
 10604                           fsr2h	equ	0xFDA
 10605                           fsr2l	equ	0xFD9
 10606                           status	equ	0xFD8
 10607                           
 10608 ;; *************** function ___lwtoft *****************
 10609 ;; Defined at:
 10610 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 10611 ;; Parameters:    Size  Location     Type
 10612 ;;  c               2   23[COMRAM] unsigned int 
 10613 ;; Auto vars:     Size  Location     Type
 10614 ;;		None
 10615 ;; Return value:  Size  Location     Type
 10616 ;;                  3   23[COMRAM] float 
 10617 ;; Registers used:
 10618 ;;		wreg, status,2, status,0, cstack
 10619 ;; Tracked objects:
 10620 ;;		On entry : 0/0
 10621 ;;		On exit  : 0/0
 10622 ;;		Unchanged: 0/0
 10623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10624 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10627 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10628 ;;Total ram usage:        3 bytes
 10629 ;; Hardware stack levels used:    1
 10630 ;; Hardware stack levels required when called:    3
 10631 ;; This function calls:
 10632 ;;		___ftpack
 10633 ;; This function is called by:
 10634 ;;		_output_logic
 10635 ;;		_GetDataSensorDHT22
 10636 ;; This function uses a non-reentrant model
 10637 ;;
 10638                           
 10639                           	psect	text44
 10640  002F22                     __ptext44:
 10641                           	opt stack 0
 10642  002F22                     ___lwtoft:
 10643                           	opt stack 26
 10644                           
 10645                           ;incstack = 0
 10646  002F22  C018  F010         	movff	___lwtoft@c,___ftpack@arg
 10647  002F26  C019  F011         	movff	___lwtoft@c+1,___ftpack@arg+1
 10648  002F2A  6A12               	clrf	___ftpack@arg+2,c
 10649  002F2C  0E8E               	movlw	142
 10650  002F2E  6E13               	movwf	___ftpack@exp,c
 10651  002F30  0E00               	movlw	0
 10652  002F32  6E14               	movwf	___ftpack@sign,c
 10653  002F34  EC94  F013         	call	___ftpack	;wreg free
 10654  002F38  C010  F018         	movff	?___ftpack,?___lwtoft
 10655  002F3C  C011  F019         	movff	?___ftpack+1,?___lwtoft+1
 10656  002F40  C012  F01A         	movff	?___ftpack+2,?___lwtoft+2
 10657  002F44  0012               	return	
 10658  002F46                     __end_of___lwtoft:
 10659                           	opt stack 0
 10660                           tblptru	equ	0xFF8
 10661                           tblptrh	equ	0xFF7
 10662                           tblptrl	equ	0xFF6
 10663                           tablat	equ	0xFF5
 10664                           prodh	equ	0xFF4
 10665                           prodl	equ	0xFF3
 10666                           postinc0	equ	0xFEE
 10667                           wreg	equ	0xFE8
 10668                           indf1	equ	0xFE7
 10669                           postdec1	equ	0xFE5
 10670                           fsr1h	equ	0xFE2
 10671                           fsr1l	equ	0xFE1
 10672                           indf2	equ	0xFDF
 10673                           postinc2	equ	0xFDE
 10674                           postdec2	equ	0xFDD
 10675                           fsr2h	equ	0xFDA
 10676                           fsr2l	equ	0xFD9
 10677                           status	equ	0xFD8
 10678                           
 10679 ;; *************** function ___ftdiv *****************
 10680 ;; Defined at:
 10681 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;  f1              3   27[COMRAM] float 
 10684 ;;  f2              3   30[COMRAM] float 
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;  f3              3   37[COMRAM] float 
 10687 ;;  sign            1   41[COMRAM] unsigned char 
 10688 ;;  exp             1   40[COMRAM] unsigned char 
 10689 ;;  cntr            1   36[COMRAM] unsigned char 
 10690 ;; Return value:  Size  Location     Type
 10691 ;;                  3   27[COMRAM] float 
 10692 ;; Registers used:
 10693 ;;		wreg, status,2, status,0, cstack
 10694 ;; Tracked objects:
 10695 ;;		On entry : 0/0
 10696 ;;		On exit  : 0/0
 10697 ;;		Unchanged: 0/0
 10698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10699 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10702 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10703 ;;Total ram usage:       15 bytes
 10704 ;; Hardware stack levels used:    1
 10705 ;; Hardware stack levels required when called:    3
 10706 ;; This function calls:
 10707 ;;		___ftpack
 10708 ;; This function is called by:
 10709 ;;		_ReadByte_I2C
 10710 ;;		_output_logic
 10711 ;;		_GetDataSensorDHT22
 10712 ;; This function uses a non-reentrant model
 10713 ;;
 10714                           
 10715                           	psect	text45
 10716  002562                     __ptext45:
 10717                           	opt stack 0
 10718  002562                     ___ftdiv:
 10719                           	opt stack 26
 10720                           
 10721                           ;incstack = 0
 10722  002562  C01E  F022         	movff	___ftdiv@f1+2,??___ftdiv
 10723  002566  6A23               	clrf	(??___ftdiv+1)& (0+255),c
 10724  002568  6A24               	clrf	(??___ftdiv+2)& (0+255),c
 10725  00256A  341D               	rlcf	___ftdiv@f1+1,w,c
 10726  00256C  3622               	rlcf	??___ftdiv& (0+255),f,c
 10727  00256E  E301               	bnc	u6011
 10728  002570  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
 10729  002572                     u6011:
 10730  002572  5022               	movf	??___ftdiv,w,c
 10731  002574  6E29               	movwf	___ftdiv@exp,c
 10732  002576  5029               	movf	___ftdiv@exp,w,c
 10733  002578  A4D8               	btfss	status,2,c
 10734  00257A  D007               	goto	l5667
 10735  00257C  0E00               	movlw	0
 10736  00257E  6E1C               	movwf	?___ftdiv,c
 10737  002580  0E00               	movlw	0
 10738  002582  6E1D               	movwf	?___ftdiv+1,c
 10739  002584  0E00               	movlw	0
 10740  002586  6E1E               	movwf	?___ftdiv+2,c
 10741  002588  0012               	return	
 10742  00258A                     l5667:
 10743  00258A  C021  F022         	movff	___ftdiv@f2+2,??___ftdiv
 10744  00258E  6A23               	clrf	(??___ftdiv+1)& (0+255),c
 10745  002590  6A24               	clrf	(??___ftdiv+2)& (0+255),c
 10746  002592  3420               	rlcf	___ftdiv@f2+1,w,c
 10747  002594  3622               	rlcf	??___ftdiv& (0+255),f,c
 10748  002596  E301               	bnc	u6031
 10749  002598  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
 10750  00259A                     u6031:
 10751  00259A  5022               	movf	??___ftdiv,w,c
 10752  00259C  6E2A               	movwf	___ftdiv@sign,c
 10753  00259E  502A               	movf	___ftdiv@sign,w,c
 10754  0025A0  A4D8               	btfss	status,2,c
 10755  0025A2  D007               	goto	l5673
 10756  0025A4  0E00               	movlw	0
 10757  0025A6  6E1C               	movwf	?___ftdiv,c
 10758  0025A8  0E00               	movlw	0
 10759  0025AA  6E1D               	movwf	?___ftdiv+1,c
 10760  0025AC  0E00               	movlw	0
 10761  0025AE  6E1E               	movwf	?___ftdiv+2,c
 10762  0025B0  0012               	return	
 10763  0025B2                     l5673:
 10764  0025B2  0E00               	movlw	0
 10765  0025B4  6E26               	movwf	___ftdiv@f3,c
 10766  0025B6  0E00               	movlw	0
 10767  0025B8  6E27               	movwf	___ftdiv@f3+1,c
 10768  0025BA  0E00               	movlw	0
 10769  0025BC  6E28               	movwf	___ftdiv@f3+2,c
 10770  0025BE  502A               	movf	___ftdiv@sign,w,c
 10771  0025C0  0F89               	addlw	137
 10772  0025C2  5E29               	subwf	___ftdiv@exp,f,c
 10773  0025C4  C01E  F02A         	movff	___ftdiv@f1+2,___ftdiv@sign
 10774  0025C8  5021               	movf	___ftdiv@f2+2,w,c
 10775  0025CA  1A2A               	xorwf	___ftdiv@sign,f,c
 10776  0025CC  0E80               	movlw	128
 10777  0025CE  162A               	andwf	___ftdiv@sign,f,c
 10778  0025D0  8E1D               	bsf	___ftdiv@f1+1,7,c
 10779  0025D2  0EFF               	movlw	255
 10780  0025D4  161C               	andwf	___ftdiv@f1,f,c
 10781  0025D6  0EFF               	movlw	255
 10782  0025D8  161D               	andwf	___ftdiv@f1+1,f,c
 10783  0025DA  0E00               	movlw	0
 10784  0025DC  161E               	andwf	___ftdiv@f1+2,f,c
 10785  0025DE  8E20               	bsf	___ftdiv@f2+1,7,c
 10786  0025E0  0EFF               	movlw	255
 10787  0025E2  161F               	andwf	___ftdiv@f2,f,c
 10788  0025E4  0EFF               	movlw	255
 10789  0025E6  1620               	andwf	___ftdiv@f2+1,f,c
 10790  0025E8  0E00               	movlw	0
 10791  0025EA  1621               	andwf	___ftdiv@f2+2,f,c
 10792  0025EC  0E18               	movlw	24
 10793  0025EE  6E25               	movwf	___ftdiv@cntr,c
 10794  0025F0                     l5693:
 10795  0025F0  90D8               	bcf	status,0,c
 10796  0025F2  3626               	rlcf	___ftdiv@f3,f,c
 10797  0025F4  3627               	rlcf	___ftdiv@f3+1,f,c
 10798  0025F6  3628               	rlcf	___ftdiv@f3+2,f,c
 10799  0025F8  501F               	movf	___ftdiv@f2,w,c
 10800  0025FA  5C1C               	subwf	___ftdiv@f1,w,c
 10801  0025FC  5020               	movf	___ftdiv@f2+1,w,c
 10802  0025FE  581D               	subwfb	___ftdiv@f1+1,w,c
 10803  002600  5021               	movf	___ftdiv@f2+2,w,c
 10804  002602  581E               	subwfb	___ftdiv@f1+2,w,c
 10805  002604  A0D8               	btfss	status,0,c
 10806  002606  D007               	goto	l1118
 10807  002608  501F               	movf	___ftdiv@f2,w,c
 10808  00260A  5E1C               	subwf	___ftdiv@f1,f,c
 10809  00260C  5020               	movf	___ftdiv@f2+1,w,c
 10810  00260E  5A1D               	subwfb	___ftdiv@f1+1,f,c
 10811  002610  5021               	movf	___ftdiv@f2+2,w,c
 10812  002612  5A1E               	subwfb	___ftdiv@f1+2,f,c
 10813  002614  8026               	bsf	___ftdiv@f3,0,c
 10814  002616                     l1118:
 10815  002616  90D8               	bcf	status,0,c
 10816  002618  361C               	rlcf	___ftdiv@f1,f,c
 10817  00261A  361D               	rlcf	___ftdiv@f1+1,f,c
 10818  00261C  361E               	rlcf	___ftdiv@f1+2,f,c
 10819  00261E  2E25               	decfsz	___ftdiv@cntr,f,c
 10820  002620  D7E7               	goto	l5693
 10821  002622  C026  F010         	movff	___ftdiv@f3,___ftpack@arg
 10822  002626  C027  F011         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10823  00262A  C028  F012         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10824  00262E  C029  F013         	movff	___ftdiv@exp,___ftpack@exp
 10825  002632  C02A  F014         	movff	___ftdiv@sign,___ftpack@sign
 10826  002636  EC94  F013         	call	___ftpack	;wreg free
 10827  00263A  C010  F01C         	movff	?___ftpack,?___ftdiv
 10828  00263E  C011  F01D         	movff	?___ftpack+1,?___ftdiv+1
 10829  002642  C012  F01E         	movff	?___ftpack+2,?___ftdiv+2
 10830  002646  0012               	return	
 10831  002648                     __end_of___ftdiv:
 10832                           	opt stack 0
 10833                           tblptru	equ	0xFF8
 10834                           tblptrh	equ	0xFF7
 10835                           tblptrl	equ	0xFF6
 10836                           tablat	equ	0xFF5
 10837                           prodh	equ	0xFF4
 10838                           prodl	equ	0xFF3
 10839                           postinc0	equ	0xFEE
 10840                           wreg	equ	0xFE8
 10841                           indf1	equ	0xFE7
 10842                           postdec1	equ	0xFE5
 10843                           fsr1h	equ	0xFE2
 10844                           fsr1l	equ	0xFE1
 10845                           indf2	equ	0xFDF
 10846                           postinc2	equ	0xFDE
 10847                           postdec2	equ	0xFDD
 10848                           fsr2h	equ	0xFDA
 10849                           fsr2l	equ	0xFD9
 10850                           status	equ	0xFD8
 10851                           
 10852 ;; *************** function ___ftpack *****************
 10853 ;; Defined at:
 10854 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 10855 ;; Parameters:    Size  Location     Type
 10856 ;;  arg             3   15[COMRAM] unsigned um
 10857 ;;  exp             1   18[COMRAM] unsigned char 
 10858 ;;  sign            1   19[COMRAM] unsigned char 
 10859 ;; Auto vars:     Size  Location     Type
 10860 ;;		None
 10861 ;; Return value:  Size  Location     Type
 10862 ;;                  3   15[COMRAM] float 
 10863 ;; Registers used:
 10864 ;;		wreg, status,2, status,0
 10865 ;; Tracked objects:
 10866 ;;		On entry : 0/0
 10867 ;;		On exit  : 0/0
 10868 ;;		Unchanged: 0/0
 10869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10870 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10872 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10873 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10874 ;;Total ram usage:        8 bytes
 10875 ;; Hardware stack levels used:    1
 10876 ;; Hardware stack levels required when called:    2
 10877 ;; This function calls:
 10878 ;;		Nothing
 10879 ;; This function is called by:
 10880 ;;		___awtoft
 10881 ;;		___ftadd
 10882 ;;		___ftdiv
 10883 ;;		___ftmul
 10884 ;;		___lbtoft
 10885 ;;		___lltoft
 10886 ;;		___lwtoft
 10887 ;; This function uses a non-reentrant model
 10888 ;;
 10889                           
 10890                           	psect	text46
 10891  002728                     __ptext46:
 10892                           	opt stack 0
 10893  002728                     ___ftpack:
 10894                           	opt stack 24
 10895                           
 10896                           ;incstack = 0
 10897  002728  5013               	movf	___ftpack@exp,w,c
 10898  00272A  B4D8               	btfsc	status,2,c
 10899  00272C  D005               	goto	l5097
 10900  00272E  5010               	movf	___ftpack@arg,w,c
 10901  002730  1011               	iorwf	___ftpack@arg+1,w,c
 10902  002732  1012               	iorwf	___ftpack@arg+2,w,c
 10903  002734  A4D8               	btfss	status,2,c
 10904  002736  D00C               	goto	l5103
 10905  002738                     l5097:
 10906  002738  0E00               	movlw	0
 10907  00273A  6E10               	movwf	?___ftpack,c
 10908  00273C  0E00               	movlw	0
 10909  00273E  6E11               	movwf	?___ftpack+1,c
 10910  002740  0E00               	movlw	0
 10911  002742  6E12               	movwf	?___ftpack+2,c
 10912  002744  0012               	return	
 10913  002746                     l5101:
 10914  002746  2A13               	incf	___ftpack@exp,f,c
 10915  002748  90D8               	bcf	status,0,c
 10916  00274A  3212               	rrcf	___ftpack@arg+2,f,c
 10917  00274C  3211               	rrcf	___ftpack@arg+1,f,c
 10918  00274E  3210               	rrcf	___ftpack@arg,f,c
 10919  002750                     l5103:
 10920  002750  0E00               	movlw	0
 10921  002752  1410               	andwf	___ftpack@arg,w,c
 10922  002754  6E15               	movwf	??___ftpack& (0+255),c
 10923  002756  0E00               	movlw	0
 10924  002758  1411               	andwf	___ftpack@arg+1,w,c
 10925  00275A  6E16               	movwf	(??___ftpack+1)& (0+255),c
 10926  00275C  0EFE               	movlw	254
 10927  00275E  1412               	andwf	___ftpack@arg+2,w,c
 10928  002760  6E17               	movwf	(??___ftpack+2)& (0+255),c
 10929  002762  5015               	movf	??___ftpack,w,c
 10930  002764  1016               	iorwf	??___ftpack+1,w,c
 10931  002766  1017               	iorwf	??___ftpack+2,w,c
 10932  002768  B4D8               	btfsc	status,2,c
 10933  00276A  D00C               	goto	l5109
 10934  00276C  D7EC               	goto	l5101
 10935  00276E                     l5105:
 10936  00276E  2A13               	incf	___ftpack@exp,f,c
 10937  002770  0E01               	movlw	1
 10938  002772  2610               	addwf	___ftpack@arg,f,c
 10939  002774  0E00               	movlw	0
 10940  002776  2211               	addwfc	___ftpack@arg+1,f,c
 10941  002778  0E00               	movlw	0
 10942  00277A  2212               	addwfc	___ftpack@arg+2,f,c
 10943  00277C  90D8               	bcf	status,0,c
 10944  00277E  3212               	rrcf	___ftpack@arg+2,f,c
 10945  002780  3211               	rrcf	___ftpack@arg+1,f,c
 10946  002782  3210               	rrcf	___ftpack@arg,f,c
 10947  002784                     l5109:
 10948  002784  0E00               	movlw	0
 10949  002786  1410               	andwf	___ftpack@arg,w,c
 10950  002788  6E15               	movwf	??___ftpack& (0+255),c
 10951  00278A  0E00               	movlw	0
 10952  00278C  1411               	andwf	___ftpack@arg+1,w,c
 10953  00278E  6E16               	movwf	(??___ftpack+1)& (0+255),c
 10954  002790  0EFF               	movlw	255
 10955  002792  1412               	andwf	___ftpack@arg+2,w,c
 10956  002794  6E17               	movwf	(??___ftpack+2)& (0+255),c
 10957  002796  5015               	movf	??___ftpack,w,c
 10958  002798  1016               	iorwf	??___ftpack+1,w,c
 10959  00279A  1017               	iorwf	??___ftpack+2,w,c
 10960  00279C  B4D8               	btfsc	status,2,c
 10961  00279E  D006               	goto	l5113
 10962  0027A0  D7E6               	goto	l5105
 10963  0027A2                     l5111:
 10964  0027A2  0613               	decf	___ftpack@exp,f,c
 10965  0027A4  90D8               	bcf	status,0,c
 10966  0027A6  3610               	rlcf	___ftpack@arg,f,c
 10967  0027A8  3611               	rlcf	___ftpack@arg+1,f,c
 10968  0027AA  3612               	rlcf	___ftpack@arg+2,f,c
 10969  0027AC                     l5113:
 10970  0027AC  BE11               	btfsc	___ftpack@arg+1,7,c
 10971  0027AE  D003               	goto	l1060
 10972  0027B0  0E02               	movlw	2
 10973  0027B2  6013               	cpfslt	___ftpack@exp,c
 10974  0027B4  D7F6               	goto	l5111
 10975  0027B6                     l1060:
 10976  0027B6  A013               	btfss	___ftpack@exp,0,c
 10977  0027B8  9E11               	bcf	___ftpack@arg+1,7,c
 10978  0027BA  90D8               	bcf	status,0,c
 10979  0027BC  3213               	rrcf	___ftpack@exp,f,c
 10980  0027BE  5013               	movf	___ftpack@exp,w,c
 10981  0027C0  1212               	iorwf	___ftpack@arg+2,f,c
 10982  0027C2  5014               	movf	___ftpack@sign,w,c
 10983  0027C4  A4D8               	btfss	status,2,c
 10984  0027C6  8E12               	bsf	___ftpack@arg+2,7,c
 10985  0027C8  C010  F010         	movff	___ftpack@arg,?___ftpack
 10986  0027CC  C011  F011         	movff	___ftpack@arg+1,?___ftpack+1
 10987  0027D0  C012  F012         	movff	___ftpack@arg+2,?___ftpack+2
 10988  0027D4  0012               	return	
 10989  0027D6                     __end_of___ftpack:
 10990                           	opt stack 0
 10991                           tblptru	equ	0xFF8
 10992                           tblptrh	equ	0xFF7
 10993                           tblptrl	equ	0xFF6
 10994                           tablat	equ	0xFF5
 10995                           prodh	equ	0xFF4
 10996                           prodl	equ	0xFF3
 10997                           postinc0	equ	0xFEE
 10998                           wreg	equ	0xFE8
 10999                           indf1	equ	0xFE7
 11000                           postdec1	equ	0xFE5
 11001                           fsr1h	equ	0xFE2
 11002                           fsr1l	equ	0xFE1
 11003                           indf2	equ	0xFDF
 11004                           postinc2	equ	0xFDE
 11005                           postdec2	equ	0xFDD
 11006                           fsr2h	equ	0xFDA
 11007                           fsr2l	equ	0xFD9
 11008                           status	equ	0xFD8
 11009                           
 11010 ;; *************** function _CloseI2C *****************
 11011 ;; Defined at:
 11012 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\i2c\i2c_clos.c"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;		None
 11015 ;; Auto vars:     Size  Location     Type
 11016 ;;		None
 11017 ;; Return value:  Size  Location     Type
 11018 ;;		None               void
 11019 ;; Registers used:
 11020 ;;		status,2, status,0
 11021 ;; Tracked objects:
 11022 ;;		On entry : 0/0
 11023 ;;		On exit  : 0/0
 11024 ;;		Unchanged: 0/0
 11025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11030 ;;Total ram usage:        0 bytes
 11031 ;; Hardware stack levels used:    1
 11032 ;; Hardware stack levels required when called:    2
 11033 ;; This function calls:
 11034 ;;		Nothing
 11035 ;; This function is called by:
 11036 ;;		_output_logic
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           	psect	text47
 11041  0030DE                     __ptext47:
 11042                           	opt stack 0
 11043  0030DE                     _CloseI2C:
 11044                           	opt stack 27
 11045                           
 11046                           ;incstack = 0
 11047  0030DE  9AC6               	bcf	4038,5,c	;volatile
 11048  0030E0  0012               	return		;funcret
 11049  0030E2                     __end_of_CloseI2C:
 11050                           	opt stack 0
 11051                           tblptru	equ	0xFF8
 11052                           tblptrh	equ	0xFF7
 11053                           tblptrl	equ	0xFF6
 11054                           tablat	equ	0xFF5
 11055                           prodh	equ	0xFF4
 11056                           prodl	equ	0xFF3
 11057                           postinc0	equ	0xFEE
 11058                           wreg	equ	0xFE8
 11059                           indf1	equ	0xFE7
 11060                           postdec1	equ	0xFE5
 11061                           fsr1h	equ	0xFE2
 11062                           fsr1l	equ	0xFE1
 11063                           indf2	equ	0xFDF
 11064                           postinc2	equ	0xFDE
 11065                           postdec2	equ	0xFDD
 11066                           fsr2h	equ	0xFDA
 11067                           fsr2l	equ	0xFD9
 11068                           status	equ	0xFD8
 11069                           
 11070 ;; *************** function _init_system *****************
 11071 ;; Defined at:
 11072 ;;		line 11 in file "../init_system.c"
 11073 ;; Parameters:    Size  Location     Type
 11074 ;;		None
 11075 ;; Auto vars:     Size  Location     Type
 11076 ;;		None
 11077 ;; Return value:  Size  Location     Type
 11078 ;;		None               void
 11079 ;; Registers used:
 11080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11081 ;; Tracked objects:
 11082 ;;		On entry : 0/0
 11083 ;;		On exit  : 0/0
 11084 ;;		Unchanged: 0/0
 11085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11090 ;;Total ram usage:        0 bytes
 11091 ;; Hardware stack levels used:    1
 11092 ;; Hardware stack levels required when called:    6
 11093 ;; This function calls:
 11094 ;;		_InitUSART
 11095 ;; This function is called by:
 11096 ;;		_main
 11097 ;; This function uses a non-reentrant model
 11098 ;;
 11099                           
 11100                           	psect	text48
 11101  002DD8                     __ptext48:
 11102                           	opt stack 0
 11103  002DD8                     _init_system:
 11104                           	opt stack 24
 11105                           
 11106                           ;init_system.c: 64: TRISA = 0b00000011;
 11107                           
 11108                           ;incstack = 0
 11109  002DD8  0E03               	movlw	3
 11110  002DDA  6E92               	movwf	3986,c	;volatile
 11111                           
 11112                           ;init_system.c: 65: LATA = 0x00;
 11113  002DDC  0E00               	movlw	0
 11114  002DDE  6E89               	movwf	3977,c	;volatile
 11115                           
 11116                           ;init_system.c: 66: PORTA = 0x00;
 11117  002DE0  0E00               	movlw	0
 11118  002DE2  6E80               	movwf	3968,c	;volatile
 11119                           
 11120                           ;init_system.c: 68: TRISB = 0b00001001;
 11121  002DE4  0E09               	movlw	9
 11122  002DE6  6E93               	movwf	3987,c	;volatile
 11123                           
 11124                           ;init_system.c: 69: LATB = 0x00;
 11125  002DE8  0E00               	movlw	0
 11126  002DEA  6E8A               	movwf	3978,c	;volatile
 11127                           
 11128                           ;init_system.c: 70: PORTB = 0xFF;
 11129  002DEC  6881               	setf	3969,c	;volatile
 11130                           
 11131                           ;init_system.c: 72: TRISC = 0b11111000;
 11132  002DEE  0EF8               	movlw	248
 11133  002DF0  6E94               	movwf	3988,c	;volatile
 11134                           
 11135                           ;init_system.c: 73: LATC = 0x00;
 11136  002DF2  0E00               	movlw	0
 11137  002DF4  6E8B               	movwf	3979,c	;volatile
 11138                           
 11139                           ;init_system.c: 74: PORTC = 0b00000111;
 11140  002DF6  0E07               	movlw	7
 11141  002DF8  6E82               	movwf	3970,c	;volatile
 11142                           
 11143                           ;init_system.c: 78: GIE = 1;
 11144  002DFA  8EF2               	bsf	intcon,7,c	;volatile
 11145                           
 11146                           ;init_system.c: 79: PEIE = 1;
 11147  002DFC  8CF2               	bsf	intcon,6,c	;volatile
 11148                           
 11149                           ;init_system.c: 80: INTCONbits.INT0IF = 0;
 11150  002DFE  92F2               	bcf	intcon,1,c	;volatile
 11151                           
 11152                           ;init_system.c: 81: INTCON2bits.INTEDG0 = 0;
 11153  002E00  9CF1               	bcf	intcon2,6,c	;volatile
 11154                           
 11155                           ;init_system.c: 82: INTCONbits.INT0IE = 1;
 11156  002E02  88F2               	bsf	intcon,4,c	;volatile
 11157                           
 11158                           ;init_system.c: 83: INTCON2bits.RBPU = 0;
 11159  002E04  9EF1               	bcf	intcon2,7,c	;volatile
 11160                           
 11161                           ;init_system.c: 87: RBIE = 1;
 11162  002E06  86F2               	bsf	intcon,3,c	;volatile
 11163                           
 11164                           ;init_system.c: 88: RBIP = 1;
 11165  002E08  80F1               	bsf	intcon2,0,c	;volatile
 11166                           
 11167                           ;init_system.c: 89: OSCCON = 0b01110000;
 11168  002E0A  0E70               	movlw	112
 11169  002E0C  6ED3               	movwf	4051,c	;volatile
 11170                           
 11171                           ;init_system.c: 91: InitUSART();
 11172  002E0E  ECFF  F017         	call	_InitUSART	;wreg free
 11173  002E12  0012               	return		;funcret
 11174  002E14                     __end_of_init_system:
 11175                           	opt stack 0
 11176                           tblptru	equ	0xFF8
 11177                           tblptrh	equ	0xFF7
 11178                           tblptrl	equ	0xFF6
 11179                           tablat	equ	0xFF5
 11180                           prodh	equ	0xFF4
 11181                           prodl	equ	0xFF3
 11182                           intcon	equ	0xFF2
 11183                           intcon2	equ	0xFF1
 11184                           postinc0	equ	0xFEE
 11185                           wreg	equ	0xFE8
 11186                           indf1	equ	0xFE7
 11187                           postdec1	equ	0xFE5
 11188                           fsr1h	equ	0xFE2
 11189                           fsr1l	equ	0xFE1
 11190                           indf2	equ	0xFDF
 11191                           postinc2	equ	0xFDE
 11192                           postdec2	equ	0xFDD
 11193                           fsr2h	equ	0xFDA
 11194                           fsr2l	equ	0xFD9
 11195                           status	equ	0xFD8
 11196                           
 11197 ;; *************** function _InitUSART *****************
 11198 ;; Defined at:
 11199 ;;		line 10 in file "../USART.c"
 11200 ;; Parameters:    Size  Location     Type
 11201 ;;		None
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;		None
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  2  433[None  ] int 
 11206 ;; Registers used:
 11207 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11217 ;;Total ram usage:        0 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    5
 11220 ;; This function calls:
 11221 ;;		_OpenUSART
 11222 ;;		_SendStringUSART
 11223 ;; This function is called by:
 11224 ;;		_init_system
 11225 ;; This function uses a non-reentrant model
 11226 ;;
 11227                           
 11228                           	psect	text49
 11229  002FFE                     __ptext49:
 11230                           	opt stack 0
 11231  002FFE                     _InitUSART:
 11232                           	opt stack 24
 11233                           
 11234                           ;USART.c: 11: OpenUSART(0b01111111 &
 11235                           ;USART.c: 12: 0b11111111 &
 11236                           ;USART.c: 13: 0b11111110 &
 11237                           ;USART.c: 14: 0b11111101 &
 11238                           ;USART.c: 15: 0b11111111 &
 11239                           ;USART.c: 16: 0b11111111, 103);
 11240                           
 11241                           ;incstack = 0
 11242  002FFE  0E00               	movlw	0
 11243  003000  6E11               	movwf	OpenUSART@spbrg+1,c
 11244  003002  0E67               	movlw	103
 11245  003004  6E10               	movwf	OpenUSART@spbrg,c
 11246  003006  0E7C               	movlw	124
 11247  003008  EC1B  F016         	call	_OpenUSART
 11248                           
 11249                           ;USART.c: 19: SendStringUSART("Idle mode ON");
 11250  00300C  0EDC               	movlw	low STR_13
 11251  00300E  6E15               	movwf	SendStringUSART@text,c
 11252  003010  0EFF               	movlw	high STR_13
 11253  003012  6E16               	movwf	SendStringUSART@text+1,c
 11254  003014  EC19  F018         	call	_SendStringUSART	;wreg free
 11255  003018  0012               	return		;funcret
 11256  00301A                     __end_of_InitUSART:
 11257                           	opt stack 0
 11258                           tblptru	equ	0xFF8
 11259                           tblptrh	equ	0xFF7
 11260                           tblptrl	equ	0xFF6
 11261                           tablat	equ	0xFF5
 11262                           prodh	equ	0xFF4
 11263                           prodl	equ	0xFF3
 11264                           intcon	equ	0xFF2
 11265                           intcon2	equ	0xFF1
 11266                           postinc0	equ	0xFEE
 11267                           wreg	equ	0xFE8
 11268                           indf1	equ	0xFE7
 11269                           postdec1	equ	0xFE5
 11270                           fsr1h	equ	0xFE2
 11271                           fsr1l	equ	0xFE1
 11272                           indf2	equ	0xFDF
 11273                           postinc2	equ	0xFDE
 11274                           postdec2	equ	0xFDD
 11275                           fsr2h	equ	0xFDA
 11276                           fsr2l	equ	0xFD9
 11277                           status	equ	0xFD8
 11278                           
 11279 ;; *************** function _SendStringUSART *****************
 11280 ;; Defined at:
 11281 ;;		line 23 in file "../USART.c"
 11282 ;; Parameters:    Size  Location     Type
 11283 ;;  text            2   20[COMRAM] PTR unsigned char 
 11284 ;;		 -> STR_15(35), STR_14(13), STR_13(13), STR_12(9), 
 11285 ;;		 -> STR_10(12), CharTX2(12), STR_8(36), STR_3(19), 
 11286 ;;		 -> CharTX(12), STR_1(22), 
 11287 ;; Auto vars:     Size  Location     Type
 11288 ;;		None
 11289 ;; Return value:  Size  Location     Type
 11290 ;;		None               void
 11291 ;; Registers used:
 11292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11293 ;; Tracked objects:
 11294 ;;		On entry : 0/0
 11295 ;;		On exit  : 0/0
 11296 ;;		Unchanged: 0/0
 11297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11298 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11301 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;Total ram usage:        2 bytes
 11303 ;; Hardware stack levels used:    1
 11304 ;; Hardware stack levels required when called:    4
 11305 ;; This function calls:
 11306 ;;		_Salto_Enter
 11307 ;;		_putsUSART
 11308 ;; This function is called by:
 11309 ;;		_output_logic
 11310 ;;		_InitUSART
 11311 ;;		_GetDataSensorDHT22
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           	psect	text50
 11316  003032                     __ptext50:
 11317                           	opt stack 0
 11318  003032                     _SendStringUSART:
 11319                           	opt stack 25
 11320  003032                     l454:
 11321  003032  A2AC               	btfss	4012,1,c	;volatile
 11322  003034  D7FE               	goto	l454
 11323                           
 11324                           ;USART.c: 26: putsUSART(text);
 11325  003036  C015  F011         	movff	SendStringUSART@text,putsUSART@data
 11326  00303A  C016  F012         	movff	SendStringUSART@text+1,putsUSART@data+1
 11327  00303E  ECEB  F015         	call	_putsUSART	;wreg free
 11328                           
 11329                           ;USART.c: 27: Salto_Enter();
 11330  003042  EC24  F018         	call	_Salto_Enter	;wreg free
 11331  003046  0012               	return		;funcret
 11332  003048                     __end_of_SendStringUSART:
 11333                           	opt stack 0
 11334                           tblptru	equ	0xFF8
 11335                           tblptrh	equ	0xFF7
 11336                           tblptrl	equ	0xFF6
 11337                           tablat	equ	0xFF5
 11338                           prodh	equ	0xFF4
 11339                           prodl	equ	0xFF3
 11340                           intcon	equ	0xFF2
 11341                           intcon2	equ	0xFF1
 11342                           postinc0	equ	0xFEE
 11343                           wreg	equ	0xFE8
 11344                           indf1	equ	0xFE7
 11345                           postdec1	equ	0xFE5
 11346                           fsr1h	equ	0xFE2
 11347                           fsr1l	equ	0xFE1
 11348                           indf2	equ	0xFDF
 11349                           postinc2	equ	0xFDE
 11350                           postdec2	equ	0xFDD
 11351                           fsr2h	equ	0xFDA
 11352                           fsr2l	equ	0xFD9
 11353                           status	equ	0xFD8
 11354                           
 11355 ;; *************** function _putsUSART *****************
 11356 ;; Defined at:
 11357 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\USART\uputs.c"
 11358 ;; Parameters:    Size  Location     Type
 11359 ;;  data            2   16[COMRAM] PTR unsigned char 
 11360 ;;		 -> STR_15(35), STR_14(13), STR_13(13), STR_12(9), 
 11361 ;;		 -> STR_10(12), CharTX2(12), STR_8(36), STR_3(19), 
 11362 ;;		 -> CharTX(12), STR_1(22), 
 11363 ;; Auto vars:     Size  Location     Type
 11364 ;;		None
 11365 ;; Return value:  Size  Location     Type
 11366 ;;		None               void
 11367 ;; Registers used:
 11368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11369 ;; Tracked objects:
 11370 ;;		On entry : 0/0
 11371 ;;		On exit  : 0/0
 11372 ;;		Unchanged: 0/0
 11373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11374 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11376 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11377 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11378 ;;Total ram usage:        4 bytes
 11379 ;; Hardware stack levels used:    1
 11380 ;; Hardware stack levels required when called:    3
 11381 ;; This function calls:
 11382 ;;		_WriteUSART
 11383 ;; This function is called by:
 11384 ;;		_SendStringUSART
 11385 ;; This function uses a non-reentrant model
 11386 ;;
 11387                           
 11388                           	psect	text51
 11389  002BD6                     __ptext51:
 11390                           	opt stack 0
 11391  002BD6                     _putsUSART:
 11392                           	opt stack 25
 11393  002BD6                     l713:
 11394  002BD6  A2AC               	btfss	4012,1,c	;volatile
 11395  002BD8  D7FE               	goto	l713
 11396  002BDA  C011  FFF6         	movff	putsUSART@data,tblptrl
 11397  002BDE  C012  FFF7         	movff	putsUSART@data+1,tblptrh
 11398  002BE2  0E00               	movlw	low (__mediumconst shr (0+16))
 11399  002BE4  6EF8               	movwf	tblptru,c
 11400  002BE6  0E0F               	movlw	(high __ramtop+-1)
 11401  002BE8  64F7               	cpfsgt	tblptrh,c
 11402  002BEA  D003               	bra	u5047
 11403  002BEC  0008               	tblrd		*
 11404  002BEE  50F5               	movf	tablat,w,c
 11405  002BF0  D005               	bra	u5040
 11406  002BF2                     u5047:
 11407  002BF2  CFF6 FFE9          	movff	tblptrl,fsr0l
 11408  002BF6  CFF7 FFEA          	movff	tblptrh,fsr0h
 11409  002BFA  50EF               	movf	indf0,w,c
 11410  002BFC                     u5040:
 11411  002BFC  EC4C  F018         	call	_WriteUSART
 11412  002C00  5011               	movf	putsUSART@data,w,c
 11413  002C02  6E13               	movwf	??_putsUSART& (0+255),c
 11414  002C04  5012               	movf	putsUSART@data+1,w,c
 11415  002C06  6E14               	movwf	(??_putsUSART+1)& (0+255),c
 11416  002C08  4A11               	infsnz	putsUSART@data,f,c
 11417  002C0A  2A12               	incf	putsUSART@data+1,f,c
 11418  002C0C  C013  FFF6         	movff	??_putsUSART,tblptrl
 11419  002C10  C014  FFF7         	movff	??_putsUSART+1,tblptrh
 11420  002C14  0E00               	movlw	low (__mediumconst shr (0+16))
 11421  002C16  6EF8               	movwf	tblptru,c
 11422  002C18  0E0F               	movlw	(high __ramtop+-1)
 11423  002C1A  64F7               	cpfsgt	tblptrh,c
 11424  002C1C  D003               	bra	u5057
 11425  002C1E  0008               	tblrd		*
 11426  002C20  50F5               	movf	tablat,w,c
 11427  002C22  D005               	bra	u5050
 11428  002C24                     u5057:
 11429  002C24  CFF6 FFE9          	movff	tblptrl,fsr0l
 11430  002C28  CFF7 FFEA          	movff	tblptrh,fsr0h
 11431  002C2C  50EF               	movf	indf0,w,c
 11432  002C2E                     u5050:
 11433  002C2E  0900               	iorlw	0
 11434  002C30  B4D8               	btfsc	status,2,c
 11435  002C32  0012               	return	
 11436  002C34  D7D0               	goto	l713
 11437  002C36                     __end_of_putsUSART:
 11438                           	opt stack 0
 11439                           tblptru	equ	0xFF8
 11440                           tblptrh	equ	0xFF7
 11441                           tblptrl	equ	0xFF6
 11442                           tablat	equ	0xFF5
 11443                           prodh	equ	0xFF4
 11444                           prodl	equ	0xFF3
 11445                           intcon	equ	0xFF2
 11446                           intcon2	equ	0xFF1
 11447                           indf0	equ	0xFEF
 11448                           postinc0	equ	0xFEE
 11449                           fsr0h	equ	0xFEA
 11450                           fsr0l	equ	0xFE9
 11451                           wreg	equ	0xFE8
 11452                           indf1	equ	0xFE7
 11453                           postdec1	equ	0xFE5
 11454                           fsr1h	equ	0xFE2
 11455                           fsr1l	equ	0xFE1
 11456                           indf2	equ	0xFDF
 11457                           postinc2	equ	0xFDE
 11458                           postdec2	equ	0xFDD
 11459                           fsr2h	equ	0xFDA
 11460                           fsr2l	equ	0xFD9
 11461                           status	equ	0xFD8
 11462                           
 11463 ;; *************** function _Salto_Enter *****************
 11464 ;; Defined at:
 11465 ;;		line 31 in file "../USART.c"
 11466 ;; Parameters:    Size  Location     Type
 11467 ;;		None
 11468 ;; Auto vars:     Size  Location     Type
 11469 ;;		None
 11470 ;; Return value:  Size  Location     Type
 11471 ;;		None               void
 11472 ;; Registers used:
 11473 ;;		wreg, cstack
 11474 ;; Tracked objects:
 11475 ;;		On entry : 0/0
 11476 ;;		On exit  : 0/0
 11477 ;;		Unchanged: 0/0
 11478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11483 ;;Total ram usage:        0 bytes
 11484 ;; Hardware stack levels used:    1
 11485 ;; Hardware stack levels required when called:    3
 11486 ;; This function calls:
 11487 ;;		_WriteUSART
 11488 ;; This function is called by:
 11489 ;;		_SendStringUSART
 11490 ;; This function uses a non-reentrant model
 11491 ;;
 11492                           
 11493                           	psect	text52
 11494  003048                     __ptext52:
 11495                           	opt stack 0
 11496  003048                     _Salto_Enter:
 11497                           	opt stack 25
 11498  003048                     l460:
 11499  003048  A2AC               	btfss	4012,1,c	;volatile
 11500  00304A  D7FE               	goto	l460
 11501                           
 11502                           ;USART.c: 33: WriteUSART(0x0D);
 11503  00304C  0E0D               	movlw	13
 11504  00304E  EC4C  F018         	call	_WriteUSART
 11505  003052                     l463:
 11506  003052  A2AC               	btfss	4012,1,c	;volatile
 11507  003054  D7FE               	goto	l463
 11508                           
 11509                           ;USART.c: 35: WriteUSART(0x0A);
 11510  003056  0E0A               	movlw	10
 11511  003058  EC4C  F018         	call	_WriteUSART
 11512  00305C  0012               	return		;funcret
 11513  00305E                     __end_of_Salto_Enter:
 11514                           	opt stack 0
 11515                           tblptru	equ	0xFF8
 11516                           tblptrh	equ	0xFF7
 11517                           tblptrl	equ	0xFF6
 11518                           tablat	equ	0xFF5
 11519                           prodh	equ	0xFF4
 11520                           prodl	equ	0xFF3
 11521                           intcon	equ	0xFF2
 11522                           intcon2	equ	0xFF1
 11523                           indf0	equ	0xFEF
 11524                           postinc0	equ	0xFEE
 11525                           fsr0h	equ	0xFEA
 11526                           fsr0l	equ	0xFE9
 11527                           wreg	equ	0xFE8
 11528                           indf1	equ	0xFE7
 11529                           postdec1	equ	0xFE5
 11530                           fsr1h	equ	0xFE2
 11531                           fsr1l	equ	0xFE1
 11532                           indf2	equ	0xFDF
 11533                           postinc2	equ	0xFDE
 11534                           postdec2	equ	0xFDD
 11535                           fsr2h	equ	0xFDA
 11536                           fsr2l	equ	0xFD9
 11537                           status	equ	0xFD8
 11538                           
 11539 ;; *************** function _WriteUSART *****************
 11540 ;; Defined at:
 11541 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\USART\uwrite.c"
 11542 ;; Parameters:    Size  Location     Type
 11543 ;;  data            1    wreg     unsigned char 
 11544 ;; Auto vars:     Size  Location     Type
 11545 ;;  data            1   15[COMRAM] unsigned char 
 11546 ;; Return value:  Size  Location     Type
 11547 ;;		None               void
 11548 ;; Registers used:
 11549 ;;		wreg
 11550 ;; Tracked objects:
 11551 ;;		On entry : 0/0
 11552 ;;		On exit  : 0/0
 11553 ;;		Unchanged: 0/0
 11554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11558 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;Total ram usage:        1 bytes
 11560 ;; Hardware stack levels used:    1
 11561 ;; Hardware stack levels required when called:    2
 11562 ;; This function calls:
 11563 ;;		Nothing
 11564 ;; This function is called by:
 11565 ;;		_Salto_Enter
 11566 ;;		_putsUSART
 11567 ;; This function uses a non-reentrant model
 11568 ;;
 11569                           
 11570                           	psect	text53
 11571  003098                     __ptext53:
 11572                           	opt stack 0
 11573  003098                     _WriteUSART:
 11574                           	opt stack 25
 11575                           
 11576                           ;incstack = 0
 11577                           ;WriteUSART@data stored from wreg
 11578  003098  6E10               	movwf	WriteUSART@data,c
 11579  00309A  ACAC               	btfss	4012,6,c	;volatile
 11580  00309C  D003               	goto	l5091
 11581  00309E  90AC               	bcf	4012,0,c	;volatile
 11582  0030A0  B24C               	btfsc	_USART_Status,1,c
 11583  0030A2  80AC               	bsf	4012,0,c	;volatile
 11584  0030A4                     l5091:
 11585  0030A4  C010  FFAD         	movff	WriteUSART@data,4013	;volatile
 11586  0030A8  0012               	return		;funcret
 11587  0030AA                     __end_of_WriteUSART:
 11588                           	opt stack 0
 11589                           tblptru	equ	0xFF8
 11590                           tblptrh	equ	0xFF7
 11591                           tblptrl	equ	0xFF6
 11592                           tablat	equ	0xFF5
 11593                           prodh	equ	0xFF4
 11594                           prodl	equ	0xFF3
 11595                           intcon	equ	0xFF2
 11596                           intcon2	equ	0xFF1
 11597                           indf0	equ	0xFEF
 11598                           postinc0	equ	0xFEE
 11599                           fsr0h	equ	0xFEA
 11600                           fsr0l	equ	0xFE9
 11601                           wreg	equ	0xFE8
 11602                           indf1	equ	0xFE7
 11603                           postdec1	equ	0xFE5
 11604                           fsr1h	equ	0xFE2
 11605                           fsr1l	equ	0xFE1
 11606                           indf2	equ	0xFDF
 11607                           postinc2	equ	0xFDE
 11608                           postdec2	equ	0xFDD
 11609                           fsr2h	equ	0xFDA
 11610                           fsr2l	equ	0xFD9
 11611                           status	equ	0xFD8
 11612                           
 11613 ;; *************** function _OpenUSART *****************
 11614 ;; Defined at:
 11615 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\USART\uopen.c"
 11616 ;; Parameters:    Size  Location     Type
 11617 ;;  config          1    wreg     unsigned char 
 11618 ;;  spbrg           2   15[COMRAM] unsigned int 
 11619 ;; Auto vars:     Size  Location     Type
 11620 ;;  config          1   17[COMRAM] unsigned char 
 11621 ;; Return value:  Size  Location     Type
 11622 ;;		None               void
 11623 ;; Registers used:
 11624 ;;		wreg, status,2
 11625 ;; Tracked objects:
 11626 ;;		On entry : 0/0
 11627 ;;		On exit  : 0/0
 11628 ;;		Unchanged: 0/0
 11629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11630 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11631 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11633 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11634 ;;Total ram usage:        3 bytes
 11635 ;; Hardware stack levels used:    1
 11636 ;; Hardware stack levels required when called:    2
 11637 ;; This function calls:
 11638 ;;		Nothing
 11639 ;; This function is called by:
 11640 ;;		_InitUSART
 11641 ;; This function uses a non-reentrant model
 11642 ;;
 11643                           
 11644                           	psect	text54
 11645  002C36                     __ptext54:
 11646                           	opt stack 0
 11647  002C36                     _OpenUSART:
 11648                           	opt stack 26
 11649                           
 11650                           ;incstack = 0
 11651                           ;OpenUSART@config stored from wreg
 11652  002C36  6E12               	movwf	OpenUSART@config,c
 11653  002C38  0E00               	movlw	0
 11654  002C3A  6EAC               	movwf	4012,c	;volatile
 11655  002C3C  0E00               	movlw	0
 11656  002C3E  6EAB               	movwf	4011,c	;volatile
 11657  002C40  B012               	btfsc	OpenUSART@config,0,c
 11658  002C42  88AC               	bsf	4012,4,c	;volatile
 11659  002C44  A212               	btfss	OpenUSART@config,1,c
 11660  002C46  D002               	goto	l3645
 11661  002C48  8CAC               	bsf	4012,6,c	;volatile
 11662  002C4A  8CAB               	bsf	4011,6,c	;volatile
 11663  002C4C                     l3645:
 11664  002C4C  B412               	btfsc	OpenUSART@config,2,c
 11665  002C4E  8EAC               	bsf	4012,7,c	;volatile
 11666  002C50  A612               	btfss	OpenUSART@config,3,c
 11667  002C52  D002               	goto	l696
 11668  002C54  88AB               	bsf	4011,4,c	;volatile
 11669  002C56  D001               	goto	l3653
 11670  002C58                     l696:
 11671  002C58  8AAB               	bsf	4011,5,c	;volatile
 11672  002C5A                     l3653:
 11673  002C5A  B812               	btfsc	OpenUSART@config,4,c
 11674  002C5C  84AC               	bsf	4012,2,c	;volatile
 11675  002C5E  989E               	bcf	3998,4,c	;volatile
 11676  002C60  BA12               	btfsc	OpenUSART@config,5,c
 11677  002C62  86AB               	bsf	4011,3,c	;volatile
 11678  002C64  AC12               	btfss	OpenUSART@config,6,c
 11679  002C66  D002               	goto	l700
 11680  002C68  8A9D               	bsf	3997,5,c	;volatile
 11681  002C6A  D001               	goto	l701
 11682  002C6C                     l700:
 11683  002C6C  9A9D               	bcf	3997,5,c	;volatile
 11684  002C6E                     l701:
 11685  002C6E  9A9E               	bcf	3998,5,c	;volatile
 11686  002C70  AE12               	btfss	OpenUSART@config,7,c
 11687  002C72  D002               	goto	l702
 11688  002C74  889D               	bsf	3997,4,c	;volatile
 11689  002C76  D001               	goto	l703
 11690  002C78                     l702:
 11691  002C78  989D               	bcf	3997,4,c	;volatile
 11692  002C7A                     l703:
 11693  002C7A  C010  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 11694  002C7E  5011               	movf	OpenUSART@spbrg+1,w,c
 11695  002C80  6EB0               	movwf	4016,c	;volatile
 11696  002C82  8AAC               	bsf	4012,5,c	;volatile
 11697  002C84  8EAB               	bsf	4011,7,c	;volatile
 11698  002C86  9C94               	bcf	3988,6,c	;volatile
 11699  002C88  8E94               	bsf	3988,7,c	;volatile
 11700  002C8A  A8AC               	btfss	4012,4,c	;volatile
 11701  002C8C  0012               	return	
 11702  002C8E  BEAC               	btfsc	4012,7,c	;volatile
 11703  002C90  0012               	return	
 11704  002C92  8C94               	bsf	3988,6,c	;volatile
 11705  002C94  0012               	return	
 11706  002C96                     __end_of_OpenUSART:
 11707                           	opt stack 0
 11708                           tblptru	equ	0xFF8
 11709                           tblptrh	equ	0xFF7
 11710                           tblptrl	equ	0xFF6
 11711                           tablat	equ	0xFF5
 11712                           prodh	equ	0xFF4
 11713                           prodl	equ	0xFF3
 11714                           intcon	equ	0xFF2
 11715                           intcon2	equ	0xFF1
 11716                           indf0	equ	0xFEF
 11717                           postinc0	equ	0xFEE
 11718                           fsr0h	equ	0xFEA
 11719                           fsr0l	equ	0xFE9
 11720                           wreg	equ	0xFE8
 11721                           indf1	equ	0xFE7
 11722                           postdec1	equ	0xFE5
 11723                           fsr1h	equ	0xFE2
 11724                           fsr1l	equ	0xFE1
 11725                           indf2	equ	0xFDF
 11726                           postinc2	equ	0xFDE
 11727                           postdec2	equ	0xFDD
 11728                           fsr2h	equ	0xFDA
 11729                           fsr2l	equ	0xFD9
 11730                           status	equ	0xFD8
 11731                           
 11732 ;; *************** function _IntServe *****************
 11733 ;; Defined at:
 11734 ;;		line 487 in file "../TFG_PIC18_Auto.c"
 11735 ;; Parameters:    Size  Location     Type
 11736 ;;		None
 11737 ;; Auto vars:     Size  Location     Type
 11738 ;;		None
 11739 ;; Return value:  Size  Location     Type
 11740 ;;		None               void
 11741 ;; Registers used:
 11742 ;;		wreg, status,2, status,0, cstack
 11743 ;; Tracked objects:
 11744 ;;		On entry : 0/0
 11745 ;;		On exit  : 0/0
 11746 ;;		Unchanged: 0/0
 11747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11750 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11751 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11752 ;;Total ram usage:       14 bytes
 11753 ;; Hardware stack levels used:    1
 11754 ;; Hardware stack levels required when called:    1
 11755 ;; This function calls:
 11756 ;;		_ReadUSART
 11757 ;; This function is called by:
 11758 ;;		Interrupt level 2
 11759 ;; This function uses a non-reentrant model
 11760 ;;
 11761                           
 11762                           	psect	intcode
 11763  000008                     __pintcode:
 11764                           	opt stack 0
 11765  000008                     _IntServe:
 11766                           	opt stack 24
 11767                           
 11768                           ;incstack = 0
 11769  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11770  00000A  CFFA F002          	movff	pclath,??_IntServe
 11771  00000E  CFFB F003          	movff	pclatu,??_IntServe+1
 11772  000012  CFE9 F004          	movff	fsr0l,??_IntServe+2
 11773  000016  CFEA F005          	movff	fsr0h,??_IntServe+3
 11774  00001A  CFE1 F006          	movff	fsr1l,??_IntServe+4
 11775  00001E  CFE2 F007          	movff	fsr1h,??_IntServe+5
 11776  000022  CFD9 F008          	movff	fsr2l,??_IntServe+6
 11777  000026  CFDA F009          	movff	fsr2h,??_IntServe+7
 11778  00002A  CFF3 F00A          	movff	prodl,??_IntServe+8
 11779  00002E  CFF4 F00B          	movff	prodh,??_IntServe+9
 11780  000032  CFF6 F00C          	movff	tblptrl,??_IntServe+10
 11781  000036  CFF7 F00D          	movff	tblptrh,??_IntServe+11
 11782  00003A  CFF8 F00E          	movff	tblptru,??_IntServe+12
 11783  00003E  CFF5 F00F          	movff	tablat,??_IntServe+13
 11784                           
 11785                           ;TFG_PIC18_Auto.c: 489: GIE = 0;
 11786  000042  9EF2               	bcf	intcon,7,c	;volatile
 11787                           
 11788                           ;TFG_PIC18_Auto.c: 491: if (RCIF == 1) {
 11789  000044  AA9E               	btfss	3998,5,c	;volatile
 11790  000046  D009               	goto	i2l5033
 11791                           
 11792                           ;TFG_PIC18_Auto.c: 492: CharRX = ReadUSART();
 11793  000048  ECE2  F017         	call	_ReadUSART	;wreg free
 11794  00004C  6E4B               	movwf	_CharRX,c
 11795                           
 11796                           ;TFG_PIC18_Auto.c: 494: SerialInterrupt_flag=1;
 11797  00004E  0E00               	movlw	0
 11798  000050  0100               	movlb	0	; () banked
 11799  000052  6F87               	movwf	(_SerialInterrupt_flag+1)& (0+255),b
 11800  000054  0E01               	movlw	1
 11801  000056  6F86               	movwf	_SerialInterrupt_flag& (0+255),b
 11802                           
 11803                           ; BSR set to: 0
 11804                           ;TFG_PIC18_Auto.c: 500: RCIF = 0;
 11805  000058  9A9E               	bcf	3998,5,c	;volatile
 11806  00005A                     i2l5033:
 11807                           
 11808                           ;TFG_PIC18_Auto.c: 501: }
 11809                           ;TFG_PIC18_Auto.c: 503: if (INT0IF == 1) {
 11810  00005A  A2F2               	btfss	intcon,1,c	;volatile
 11811  00005C  D005               	goto	i2l5039
 11812                           
 11813                           ;TFG_PIC18_Auto.c: 505: Trigger = 1;
 11814  00005E  0E00               	movlw	0
 11815  000060  6E44               	movwf	_Trigger+1,c
 11816  000062  0E01               	movlw	1
 11817  000064  6E43               	movwf	_Trigger,c
 11818                           
 11819                           ;TFG_PIC18_Auto.c: 506: INT0IF = 0;
 11820  000066  92F2               	bcf	intcon,1,c	;volatile
 11821  000068                     i2l5039:
 11822                           
 11823                           ;TFG_PIC18_Auto.c: 507: }
 11824                           ;TFG_PIC18_Auto.c: 508: if (TMR3IF == 1) {
 11825  000068  A2A1               	btfss	4001,1,c	;volatile
 11826  00006A  D055               	goto	i2l5067
 11827                           
 11828                           ;TFG_PIC18_Auto.c: 509: TMR3H = 0xF8;
 11829  00006C  0EF8               	movlw	248
 11830  00006E  6EB3               	movwf	4019,c	;volatile
 11831                           
 11832                           ;TFG_PIC18_Auto.c: 510: TMR3L = 0x46;
 11833  000070  0E46               	movlw	70
 11834  000072  6EB2               	movwf	4018,c	;volatile
 11835                           
 11836                           ;TFG_PIC18_Auto.c: 511: if (postscaler < postscalermax) {
 11837  000074  0100               	movlb	0	; () banked
 11838  000076  51FC               	movf	_postscalermax& (0+255),w,b
 11839  000078  0100               	movlb	0	; () banked
 11840  00007A  5D96               	subwf	_postscaler& (0+255),w,b
 11841  00007C  0100               	movlb	0	; () banked
 11842  00007E  51FD               	movf	(_postscalermax+1)& (0+255),w,b
 11843  000080  0100               	movlb	0	; () banked
 11844  000082  5997               	subwfb	(_postscaler+1)& (0+255),w,b
 11845  000084  B0D8               	btfsc	status,0,c
 11846  000086  D004               	goto	i2l5047
 11847                           
 11848                           ; BSR set to: 0
 11849                           ;TFG_PIC18_Auto.c: 512: postscaler++;
 11850  000088  0100               	movlb	0	; () banked
 11851  00008A  4B96               	infsnz	_postscaler& (0+255),f,b
 11852  00008C  2B97               	incf	(_postscaler+1)& (0+255),f,b
 11853                           
 11854                           ;TFG_PIC18_Auto.c: 513: } else {
 11855  00008E  D00A               	goto	i2l5049
 11856  000090                     i2l5047:
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;TFG_PIC18_Auto.c: 514: postscaler = 0;
 11860  000090  0E00               	movlw	0
 11861  000092  0100               	movlb	0	; () banked
 11862  000094  6F97               	movwf	(_postscaler+1)& (0+255),b
 11863  000096  0E00               	movlw	0
 11864  000098  6F96               	movwf	_postscaler& (0+255),b
 11865                           
 11866                           ;TFG_PIC18_Auto.c: 515: postscalerflag = 1;
 11867  00009A  0E00               	movlw	0
 11868  00009C  0100               	movlb	0	; () banked
 11869  00009E  6F9B               	movwf	(_postscalerflag+1)& (0+255),b
 11870  0000A0  0E01               	movlw	1
 11871  0000A2  6F9A               	movwf	_postscalerflag& (0+255),b
 11872  0000A4                     i2l5049:
 11873                           
 11874                           ; BSR set to: 0
 11875                           ;TFG_PIC18_Auto.c: 516: }
 11876                           ;TFG_PIC18_Auto.c: 517: if ((postscalersample < postscalersamplemax) && (present_state==
      +                          'F' || present_state=='C')) {
 11877  0000A4  0100               	movlb	0	; () banked
 11878  0000A6  51FE               	movf	_postscalersamplemax& (0+255),w,b
 11879  0000A8  0100               	movlb	0	; () banked
 11880  0000AA  5D9E               	subwf	_postscalersample& (0+255),w,b
 11881  0000AC  0100               	movlb	0	; () banked
 11882  0000AE  51FF               	movf	(_postscalersamplemax+1)& (0+255),w,b
 11883  0000B0  0100               	movlb	0	; () banked
 11884  0000B2  599F               	subwfb	(_postscalersample+1)& (0+255),w,b
 11885  0000B4  B0D8               	btfsc	status,0,c
 11886  0000B6  D00C               	goto	i2l5057
 11887                           
 11888                           ; BSR set to: 0
 11889  0000B8  0E46               	movlw	70
 11890  0000BA  184F               	xorwf	_present_state,w,c
 11891  0000BC  B4D8               	btfsc	status,2,c
 11892  0000BE  D004               	goto	i2l5055
 11893                           
 11894                           ; BSR set to: 0
 11895  0000C0  0E43               	movlw	67
 11896  0000C2  184F               	xorwf	_present_state,w,c
 11897  0000C4  A4D8               	btfss	status,2,c
 11898  0000C6  D004               	goto	i2l5057
 11899  0000C8                     i2l5055:
 11900                           
 11901                           ; BSR set to: 0
 11902                           ;TFG_PIC18_Auto.c: 518: postscalersample++;
 11903  0000C8  0100               	movlb	0	; () banked
 11904  0000CA  4B9E               	infsnz	_postscalersample& (0+255),f,b
 11905  0000CC  2B9F               	incf	(_postscalersample+1)& (0+255),f,b
 11906                           
 11907                           ;TFG_PIC18_Auto.c: 520: } else {
 11908  0000CE  D00A               	goto	i2l5059
 11909  0000D0                     i2l5057:
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;TFG_PIC18_Auto.c: 521: postscalersample = 0;
 11913  0000D0  0E00               	movlw	0
 11914  0000D2  0100               	movlb	0	; () banked
 11915  0000D4  6F9F               	movwf	(_postscalersample+1)& (0+255),b
 11916  0000D6  0E00               	movlw	0
 11917  0000D8  6F9E               	movwf	_postscalersample& (0+255),b
 11918                           
 11919                           ;TFG_PIC18_Auto.c: 522: postscalersampleflag = 1;
 11920  0000DA  0E00               	movlw	0
 11921  0000DC  0100               	movlb	0	; () banked
 11922  0000DE  6FA1               	movwf	(_postscalersampleflag+1)& (0+255),b
 11923  0000E0  0E01               	movlw	1
 11924  0000E2  6FA0               	movwf	_postscalersampleflag& (0+255),b
 11925  0000E4                     i2l5059:
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;TFG_PIC18_Auto.c: 523: }
 11929                           ;TFG_PIC18_Auto.c: 524: if (postscaler30s < postscaler30smax) {
 11930  0000E4  0100               	movlb	0	; () banked
 11931  0000E6  51FA               	movf	_postscaler30smax& (0+255),w,b
 11932  0000E8  0100               	movlb	0	; () banked
 11933  0000EA  5D98               	subwf	_postscaler30s& (0+255),w,b
 11934  0000EC  0100               	movlb	0	; () banked
 11935  0000EE  51FB               	movf	(_postscaler30smax+1)& (0+255),w,b
 11936  0000F0  0100               	movlb	0	; () banked
 11937  0000F2  5999               	subwfb	(_postscaler30s+1)& (0+255),w,b
 11938  0000F4  B0D8               	btfsc	status,0,c
 11939  0000F6  D004               	goto	i2l5063
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;TFG_PIC18_Auto.c: 525: postscaler30s++;
 11943  0000F8  0100               	movlb	0	; () banked
 11944  0000FA  4B98               	infsnz	_postscaler30s& (0+255),f,b
 11945  0000FC  2B99               	incf	(_postscaler30s+1)& (0+255),f,b
 11946                           
 11947                           ;TFG_PIC18_Auto.c: 526: } else {
 11948  0000FE  D00A               	goto	i2l5065
 11949  000100                     i2l5063:
 11950                           
 11951                           ; BSR set to: 0
 11952                           ;TFG_PIC18_Auto.c: 528: postscaler30s=0;
 11953  000100  0E00               	movlw	0
 11954  000102  0100               	movlb	0	; () banked
 11955  000104  6F99               	movwf	(_postscaler30s+1)& (0+255),b
 11956  000106  0E00               	movlw	0
 11957  000108  6F98               	movwf	_postscaler30s& (0+255),b
 11958                           
 11959                           ;TFG_PIC18_Auto.c: 529: postscalerflag30s=1;
 11960  00010A  0E00               	movlw	0
 11961  00010C  0100               	movlb	0	; () banked
 11962  00010E  6F9D               	movwf	(_postscalerflag30s+1)& (0+255),b
 11963  000110  0E01               	movlw	1
 11964  000112  6F9C               	movwf	_postscalerflag30s& (0+255),b
 11965  000114                     i2l5065:
 11966                           
 11967                           ; BSR set to: 0
 11968                           ;TFG_PIC18_Auto.c: 530: }
 11969                           ;TFG_PIC18_Auto.c: 532: TMR3IF = 0;
 11970  000114  92A1               	bcf	4001,1,c	;volatile
 11971  000116                     i2l5067:
 11972                           
 11973                           ;TFG_PIC18_Auto.c: 535: }
 11974                           ;TFG_PIC18_Auto.c: 536: if (TMR2IF == 1) {
 11975  000116  A29E               	btfss	3998,1,c	;volatile
 11976  000118  D00B               	goto	i2l5079
 11977                           
 11978                           ;TFG_PIC18_Auto.c: 538: if (present_state == 'I') {
 11979  00011A  0E49               	movlw	73
 11980  00011C  184F               	xorwf	_present_state,w,c
 11981  00011E  A4D8               	btfss	status,2,c
 11982  000120  D006               	goto	i2l5077
 11983                           
 11984                           ;TFG_PIC18_Auto.c: 539: TOUT = 1;
 11985  000122  0E00               	movlw	0
 11986  000124  6E42               	movwf	_TOUT+1,c
 11987  000126  0E01               	movlw	1
 11988  000128  6E41               	movwf	_TOUT,c
 11989                           
 11990                           ;TFG_PIC18_Auto.c: 540: TMR2ON = 0;
 11991  00012A  94CA               	bcf	4042,2,c	;volatile
 11992                           
 11993                           ;TFG_PIC18_Auto.c: 541: TMR2IF = 0;
 11994  00012C  929E               	bcf	3998,1,c	;volatile
 11995  00012E                     i2l5077:
 11996                           
 11997                           ;TFG_PIC18_Auto.c: 542: }
 11998                           ;TFG_PIC18_Auto.c: 544: TMR2IF = 0;
 11999  00012E  929E               	bcf	3998,1,c	;volatile
 12000  000130                     i2l5079:
 12001                           
 12002                           ;TFG_PIC18_Auto.c: 545: }
 12003                           ;TFG_PIC18_Auto.c: 546: GIE = 1;
 12004  000130  8EF2               	bsf	intcon,7,c	;volatile
 12005  000132  C00F  FFF5         	movff	??_IntServe+13,tablat
 12006  000136  C00E  FFF8         	movff	??_IntServe+12,tblptru
 12007  00013A  C00D  FFF7         	movff	??_IntServe+11,tblptrh
 12008  00013E  C00C  FFF6         	movff	??_IntServe+10,tblptrl
 12009  000142  C00B  FFF4         	movff	??_IntServe+9,prodh
 12010  000146  C00A  FFF3         	movff	??_IntServe+8,prodl
 12011  00014A  C009  FFDA         	movff	??_IntServe+7,fsr2h
 12012  00014E  C008  FFD9         	movff	??_IntServe+6,fsr2l
 12013  000152  C007  FFE2         	movff	??_IntServe+5,fsr1h
 12014  000156  C006  FFE1         	movff	??_IntServe+4,fsr1l
 12015  00015A  C005  FFEA         	movff	??_IntServe+3,fsr0h
 12016  00015E  C004  FFE9         	movff	??_IntServe+2,fsr0l
 12017  000162  C003  FFFB         	movff	??_IntServe+1,pclatu
 12018  000166  C002  FFFA         	movff	??_IntServe,pclath
 12019  00016A  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12020  00016C  0011               	retfie		f
 12021  00016E                     __end_of_IntServe:
 12022                           	opt stack 0
 12023                           pclatu	equ	0xFFB
 12024                           pclath	equ	0xFFA
 12025                           tblptru	equ	0xFF8
 12026                           tblptrh	equ	0xFF7
 12027                           tblptrl	equ	0xFF6
 12028                           tablat	equ	0xFF5
 12029                           prodh	equ	0xFF4
 12030                           prodl	equ	0xFF3
 12031                           intcon	equ	0xFF2
 12032                           intcon2	equ	0xFF1
 12033                           indf0	equ	0xFEF
 12034                           postinc0	equ	0xFEE
 12035                           fsr0h	equ	0xFEA
 12036                           fsr0l	equ	0xFE9
 12037                           wreg	equ	0xFE8
 12038                           indf1	equ	0xFE7
 12039                           postdec1	equ	0xFE5
 12040                           fsr1h	equ	0xFE2
 12041                           fsr1l	equ	0xFE1
 12042                           indf2	equ	0xFDF
 12043                           postinc2	equ	0xFDE
 12044                           postdec2	equ	0xFDD
 12045                           fsr2h	equ	0xFDA
 12046                           fsr2l	equ	0xFD9
 12047                           status	equ	0xFD8
 12048                           
 12049 ;; *************** function _ReadUSART *****************
 12050 ;; Defined at:
 12051 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\pic18\plib\USART\uread.c"
 12052 ;; Parameters:    Size  Location     Type
 12053 ;;		None
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;  data            1    0[COMRAM] unsigned char 
 12056 ;; Return value:  Size  Location     Type
 12057 ;;                  1    wreg      unsigned char 
 12058 ;; Registers used:
 12059 ;;		wreg, status,2, status,0
 12060 ;; Tracked objects:
 12061 ;;		On entry : 0/0
 12062 ;;		On exit  : 0/0
 12063 ;;		Unchanged: 0/0
 12064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12066 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12068 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12069 ;;Total ram usage:        1 bytes
 12070 ;; Hardware stack levels used:    1
 12071 ;; This function calls:
 12072 ;;		Nothing
 12073 ;; This function is called by:
 12074 ;;		_IntServe
 12075 ;; This function uses a non-reentrant model
 12076 ;;
 12077                           
 12078                           	psect	text56
 12079  002FC4                     __ptext56:
 12080                           	opt stack 0
 12081  002FC4                     _ReadUSART:
 12082                           	opt stack 24
 12083                           
 12084                           ;incstack = 0
 12085  002FC4  0EF2               	movlw	242
 12086  002FC6  164C               	andwf	_USART_Status,f,c
 12087  002FC8  ACAB               	btfss	4011,6,c	;volatile
 12088  002FCA  D003               	goto	i2l726
 12089  002FCC  904C               	bcf	_USART_Status,0,c
 12090  002FCE  B0AB               	btfsc	4011,0,c	;volatile
 12091  002FD0  804C               	bsf	_USART_Status,0,c
 12092  002FD2                     i2l726:
 12093  002FD2  B4AB               	btfsc	4011,2,c	;volatile
 12094  002FD4  844C               	bsf	_USART_Status,2,c
 12095  002FD6  B2AB               	btfsc	4011,1,c	;volatile
 12096  002FD8  864C               	bsf	_USART_Status,3,c
 12097  002FDA  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 12098  002FDE  5001               	movf	ReadUSART@data,w,c
 12099  002FE0  0012               	return	
 12100  002FE2                     __end_of_ReadUSART:
 12101                           	opt stack 0
 12102                           pclatu	equ	0xFFB
 12103                           pclath	equ	0xFFA
 12104                           tblptru	equ	0xFF8
 12105                           tblptrh	equ	0xFF7
 12106                           tblptrl	equ	0xFF6
 12107                           tablat	equ	0xFF5
 12108                           prodh	equ	0xFF4
 12109                           prodl	equ	0xFF3
 12110                           intcon	equ	0xFF2
 12111                           intcon2	equ	0xFF1
 12112                           indf0	equ	0xFEF
 12113                           postinc0	equ	0xFEE
 12114                           fsr0h	equ	0xFEA
 12115                           fsr0l	equ	0xFE9
 12116                           wreg	equ	0xFE8
 12117                           indf1	equ	0xFE7
 12118                           postdec1	equ	0xFE5
 12119                           fsr1h	equ	0xFE2
 12120                           fsr1l	equ	0xFE1
 12121                           indf2	equ	0xFDF
 12122                           postinc2	equ	0xFDE
 12123                           postdec2	equ	0xFDD
 12124                           fsr2h	equ	0xFDA
 12125                           fsr2l	equ	0xFD9
 12126                           status	equ	0xFD8
 12127                           pclatu	equ	0xFFB
 12128                           pclath	equ	0xFFA
 12129                           tblptru	equ	0xFF8
 12130                           tblptrh	equ	0xFF7
 12131                           tblptrl	equ	0xFF6
 12132                           tablat	equ	0xFF5
 12133                           prodh	equ	0xFF4
 12134                           prodl	equ	0xFF3
 12135                           intcon	equ	0xFF2
 12136                           intcon2	equ	0xFF1
 12137                           indf0	equ	0xFEF
 12138                           postinc0	equ	0xFEE
 12139                           fsr0h	equ	0xFEA
 12140                           fsr0l	equ	0xFE9
 12141                           wreg	equ	0xFE8
 12142                           indf1	equ	0xFE7
 12143                           postdec1	equ	0xFE5
 12144                           fsr1h	equ	0xFE2
 12145                           fsr1l	equ	0xFE1
 12146                           indf2	equ	0xFDF
 12147                           postinc2	equ	0xFDE
 12148                           postdec2	equ	0xFDD
 12149                           fsr2h	equ	0xFDA
 12150                           fsr2l	equ	0xFD9
 12151                           status	equ	0xFD8
 12152                           
 12153                           	psect	rparam
 12154  0000                     pclatu	equ	0xFFB
 12155                           pclath	equ	0xFFA
 12156                           tblptru	equ	0xFF8
 12157                           tblptrh	equ	0xFF7
 12158                           tblptrl	equ	0xFF6
 12159                           tablat	equ	0xFF5
 12160                           prodh	equ	0xFF4
 12161                           prodl	equ	0xFF3
 12162                           intcon	equ	0xFF2
 12163                           intcon2	equ	0xFF1
 12164                           indf0	equ	0xFEF
 12165                           postinc0	equ	0xFEE
 12166                           fsr0h	equ	0xFEA
 12167                           fsr0l	equ	0xFE9
 12168                           wreg	equ	0xFE8
 12169                           indf1	equ	0xFE7
 12170                           postdec1	equ	0xFE5
 12171                           fsr1h	equ	0xFE2
 12172                           fsr1l	equ	0xFE1
 12173                           indf2	equ	0xFDF
 12174                           postinc2	equ	0xFDE
 12175                           postdec2	equ	0xFDD
 12176                           fsr2h	equ	0xFDA
 12177                           fsr2l	equ	0xFD9
 12178                           status	equ	0xFD8
 12179                           
 12180                           	psect	temp
 12181  000050                     btemp:
 12182                           	opt stack 0
 12183  000050                     	ds	1
 12184  0000                     int$flags	set	btemp
 12185                           pclatu	equ	0xFFB
 12186                           pclath	equ	0xFFA
 12187                           tblptru	equ	0xFF8
 12188                           tblptrh	equ	0xFF7
 12189                           tblptrl	equ	0xFF6
 12190                           tablat	equ	0xFF5
 12191                           prodh	equ	0xFF4
 12192                           prodl	equ	0xFF3
 12193                           intcon	equ	0xFF2
 12194                           intcon2	equ	0xFF1
 12195                           indf0	equ	0xFEF
 12196                           postinc0	equ	0xFEE
 12197                           fsr0h	equ	0xFEA
 12198                           fsr0l	equ	0xFE9
 12199                           wreg	equ	0xFE8
 12200                           indf1	equ	0xFE7
 12201                           postdec1	equ	0xFE5
 12202                           fsr1h	equ	0xFE2
 12203                           fsr1l	equ	0xFE1
 12204                           indf2	equ	0xFDF
 12205                           postinc2	equ	0xFDE
 12206                           postdec2	equ	0xFDD
 12207                           fsr2h	equ	0xFDA
 12208                           fsr2l	equ	0xFD9
 12209                           status	equ	0xFD8


Data Sizes:
    Strings     370
    Constant    145
    Data        68
    BSS         111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      79
    BANK0           160     68     160
    BANK1           256     12      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 36
		 -> STR_15(CODE[35]), STR_14(CODE[13]), STR_13(CODE[13]), STR_12(CODE[9]), 
		 -> STR_10(CODE[12]), CharTX2(BANK1[12]), STR_8(CODE[36]), STR_3(CODE[19]), 
		 -> CharTX(BANK1[12]), STR_1(CODE[22]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_11(CODE[28]), STR_9(CODE[31]), STR_7(CODE[31]), STR_6(CODE[33]), 
		 -> STR_5(CODE[34]), STR_4(CODE[34]), STR_2(CODE[33]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 12
		 -> CharTX2(BANK1[12]), CharTX(BANK1[12]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    SendStringUSART@text	PTR unsigned char  size(2) Largest target is 36
		 -> STR_15(CODE[35]), STR_14(CODE[13]), STR_13(CODE[13]), STR_12(CODE[9]), 
		 -> STR_10(CODE[12]), CharTX2(BANK1[12]), STR_8(CODE[36]), STR_3(CODE[19]), 
		 -> CharTX(BANK1[12]), STR_1(CODE[22]), 


Critical Paths under _main in COMRAM

    _output_logic->_ReadByte_I2C
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _log->___ftmul
    _eval_poly->___ftmul
    ___wmul->___awdiv
    ___awtoft->___ftpack
    _ReadByte_I2C->___ftmul
    ___lbtoft->___ftpack
    ___ftneg->___ftmul
    ___ftmul->___ftadd
    ___ftadd->___ftdiv
    _WriteI2C->_IdleI2C
    _Open_I2C1->_OpenI2C
    _GetDataSensorDHT22->___ftdiv
    ___lwtoft->___ftpack
    ___ftdiv->___lbtoft
    _InitUSART->_SendStringUSART
    _SendStringUSART->_putsUSART
    _putsUSART->_WriteUSART
    _Salto_Enter->_WriteUSART

Critical Paths under _IntServe in COMRAM

    _IntServe->_ReadUSART

Critical Paths under _main in BANK0

    _output_logic->_sprintf
    _sprintf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    _log->_eval_poly
    _eval_poly->___ftmul
    _ReadByte_I2C->___ftneg
    ___ftneg->___ftmul

Critical Paths under _IntServe in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_output_logic

Critical Paths under _IntServe in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IntServe in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _IntServe in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _IntServe in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _IntServe in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _IntServe in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _IntServe in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _IntServe in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _IntServe in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _IntServe in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _IntServe in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _IntServe in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _IntServe in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _IntServe in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _IntServe in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  156770
                        _init_system
                       _output_logic
                        _state_logic
 ---------------------------------------------------------------------------------
 (1) _state_logic                                          1     1      0       8
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _output_logic                                        12    12      0  155091
                                              0 BANK1     12    12      0
                           _CloseI2C
                 _GetDataSensorDHT22
                       _GetSampleADC
                            _InitADC
                   _InitializeTimer3
                          _Open_I2C1
                       _ReadByte_I2C
                   _SelectChannelADC
                    _SendStringUSART
                            _StopADC
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lwtoft
                             ___wmul
                                _log
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             43    36      7   66191
                                             28 BANK0     40    33      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14869
                                              6 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14590
                                              6 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1819
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             21 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             15 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             15 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2823
                                             23 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             28 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     703
                                             15 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     602
                                             13 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6349
                                             54 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     814
                                             15 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   33439
                                             18 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                           ___lwtoft (ARG)
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     476
                                             15 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   16838
                                              6 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3466
                                             29 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2854
                                             23 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _StopADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SelectChannelADC                                     3     1      2     262
                                             15 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _ReadByte_I2C                                        15    12      3   20643
                                             63 COMRAM     1     1      0
                                              9 BANK0     14    11      3
                            _IdleI2C
                            _ReadI2C
                 _ResetVariables_I2C
                           _WaitFlag
                         _WaitForACK
                           _WriteI2C
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2675
                                             23 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     219
                                              6 BANK0      3     0      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6902
                                             54 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5985
                                             42 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) _WriteI2C                                             1     1      0      31
                                             16 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (3) _WaitForACK                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _WaitFlag                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ResetVariables_I2C                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Open_I2C1                                            0     0      0     139
                            _IdleI2C
                            _OpenI2C
 ---------------------------------------------------------------------------------
 (3) _OpenI2C                                              2     1      1     139
                                             15 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _IdleI2C                                              1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitializeTimer3                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetSampleADC                                         2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GetDataSensorDHT22                                   2     2      0    8586
                                             42 COMRAM     2     2      0
                    _SendStringUSART
                            ___ftdiv
                           ___lwtoft
                     _check_response
                          _read_byte
                       _start_signal
 ---------------------------------------------------------------------------------
 (3) _start_signal                                         1     1      0       0
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _read_byte                                            7     5      2      37
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _check_response                                       2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2906
                                             23 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4256
                                             27 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2644
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _CloseI2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_system                                          0     0      0    1671
                          _InitUSART
 ---------------------------------------------------------------------------------
 (2) _InitUSART                                            0     0      0    1671
                          _OpenUSART
                    _SendStringUSART
 ---------------------------------------------------------------------------------
 (2) _SendStringUSART                                      2     0      2    1387
                                             20 COMRAM     2     0      2
                        _Salto_Enter
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     170
                                             16 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _Salto_Enter                                          0     0      0      31
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (4) _WriteUSART                                           1     1      0      31
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     284
                                             15 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _IntServe                                            14    14      0      23
                                              1 COMRAM    14    14      0
                          _ReadUSART
 ---------------------------------------------------------------------------------
 (7) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_system
     _InitUSART
       _OpenUSART
       _SendStringUSART
         _Salto_Enter
           _WriteUSART
         _putsUSART
           _WriteUSART
   _output_logic
     _CloseI2C
     _GetDataSensorDHT22
       _SendStringUSART
         _Salto_Enter
           _WriteUSART
         _putsUSART
           _WriteUSART
       ___ftdiv
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _check_response
       _read_byte
       _start_signal
     _GetSampleADC
     _InitADC
     _InitializeTimer3
     _Open_I2C1
       _IdleI2C
       _OpenI2C
     _ReadByte_I2C
       _IdleI2C
       _ReadI2C
       _ResetVariables_I2C
       _WaitFlag
       _WaitForACK
       _WriteI2C
         _IdleI2C
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftdiv
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
     _SelectChannelADC
     _SendStringUSART
       _Salto_Enter
         _WriteUSART
       _putsUSART
         _WriteUSART
     _StopADC
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftdiv
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___lwtoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _eval_poly (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _state_logic

 _IntServe (ROOT)
   _ReadUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C      54       7       32.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     44      A0       5      100.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     143      32        0.0%
DATA                 0      0     143       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Feb 16 17:19:18 2016

      __size_of_start_signal 0020                            _i 0047             ?_SendStringUSART 0015  
        _postscalersamplemax 00FE                  _SSPSTATbits 000FC7                           l70 199E  
                         l73 19CA                           l67 1950                           l76 19E6  
                         l93 30C6                           l79 19F4                           _GO 007E11  
                         l99 30CE                 ___awdiv@sign 001B                           _Vo 00F4  
                         _rh 00A2          ___wmul@multiplicand 0020                  _state_logic 1CE2  
       _postscalersampleflag 00A0                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                 ___ftadd@exp1 0036  
               ___ftadd@exp2 0035                 ___ftadd@sign 0034                          l331 0EFC  
                        l700 2C6C                          l460 3048                          l701 2C6E  
                        l702 2C78                          l454 3032                          l542 2D40  
                        l390 301C                          l703 2C7A                          l463 3052  
                        l713 2BD6                          l537 2D22                          l529 2D00  
                        l553 2AB0                          l650 0784                          l547 2AF6  
                        l548 2A9E                          l557 2ABC                          l805 2D6C  
                        l814 2D8C                          l780 2FF4                          l781 2FF6  
                        l696 2C58                          _GIE 007F97                 __CFG_CPB$OFF 000000  
               __CFG_CPD$OFF 000000                          _Vdd 00F1                          _log 1F7A  
               ___awmod@sign 0015  __size_of_GetDataSensorDHT22 0134                          wreg 000FE8  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0025                _postscaler30s 0098  
               ___ftdiv@sign 002A                         l1107 1C70                         l1060 27B6  
                       l1028 2430                         l1132 2308                         l1125 227A  
                       l1118 2616                         l1126 22A2                         l1207 2A6E  
                       l1217 2BC4                         l1083 1B7A                         l1157 2EA2  
                       l1087 1BA4                         l1098 1C54                         l5101 2746  
                       l5111 27A2                         l5103 2750                         l5113 27AC  
                       l5105 276E                         l5201 1C4C                         l5131 3086  
                       l6011 0210                         l5109 2784                         l5301 29DC  
                       l6101 0552                         l6013 0226                         l5207 1C8C  
                       l6111 05B0                         l6031 0286                         l6007 01D4  
                       l5217 1CBC                         l5233 249A                         l5305 29E6  
                       l5321 2B14                         l6033 02A0                         l6025 0266  
                       l6041 02EA                         l6017 0236                         l5091 30A4  
                       l5251 24F2                         l5227 246E                         l5331 2B36  
                       l6115 0616                         l6019 023C                         l3653 2C5A  
                       l3645 2C4C                         l5181 1BE2                         l5165 1BB2  
                       l5261 2524                         l5309 29F4                         l5333 2B3A  
                       l5341 2B58                         l5325 2B20                         l6205 0990  
                       l6133 068E                         l6117 061C                         l5191 1C18  
                       l5159 1B88                         l5247 24DC                         l5511 14A6  
                       l6223 0A04                         l6207 0996                         l6151 0752  
                       l6135 0696                         l6143 072A                         l6047 0304  
                       l6039 02B8                         l5097 2738                         l5433 2D1E  
                       l5425 2D0C                         l5193 1C20                         l5257 250E  
                       l5345 2B66                         l5337 2B4E                         l5329 2B2E  
                       l5505 13FC                         l6233 0A62                         l6153 0766  
                       l6145 0738                         l6129 0662                         l6081 0460  
                       l6073 03F8                         l6057 034A                         l6241 0B08  
                       l4801 1CE8                         l5187 1C04                         l5291 29BC  
                       l5283 299E                         l5523 1600                         l5515 14CC  
                       l6227 0A34                         l6219 09DC                         l6091 04E2  
                       l6243 0B26                         l6403 0D0E                         l6331 0B3C  
                       l5437 2D2E                         l5189 1C0E                         l6253 1F9E  
                       l5613 2356                         l5293 29C0                         l5277 298E  
                       l5541 2F9E                         l6237 0AEC                         l6181 08FE  
                       l6165 07B8                         l6157 0788                         l6085 0486  
                       l4813 1D20                         l4805 1CFE                         l5199 1C42  
                       l5711 2DAE                         l5607 2338                         l5551 2214  
                       l6239 0AF2                         l6087 049C                         l6431 0F0E  
                       l4823 1D48                         l4815 1D26                         l4807 1D04  
                       l5385 2D78                         l5289 29B4                         l5529 16AA  
                       l6169 080A                         l6097 052C                         l6089 04CC  
                       l6513 1228                         l6441 0F86                         l6361 0BB8  
                       l6337 0B60                         l4833 1D70                         l4825 1D4E  
                       l4817 1D2C                         l4809 1D0A                         l5459 2AAA  
                       l5723 2E28                         l6259 1FCC                         l5731 2806  
                       l5651 2406                         l5635 23C8                         l5627 2398  
                       l5491 18DC                         l5483 181A                         l6187 0918  
                       l6179 08F0                         l6523 124E                         l6451 0FF8  
                       l6435 0F28                         l6427 0EFE                         l4843 1D98  
                       l4835 1D76                         l4827 1D54                         l4819 1D32  
                       l5469 2AEC                         l6277 20DA                         l5741 2862  
                       l5805 2A20                         l5557 2240                         l6189 0926  
                       l6461 1016                         l6381 0C5E                         l6373 0C08  
                       l6525 1256                         l4853 1DC0                         l4845 1D9E  
                       l4837 1D7C                         l4829 1D5A                         ?_log 00BF  
                       l5735 2836                         l5807 2A2C                         l5647 23F6  
                       l5591 22DE                         l6199 096A                         l6471 10B4  
                       l6439 0F76                         l6391 0CC8                         l6383 0C6E  
                       l4855 1DC6                         l4847 1DA4                         l4839 1D82  
                       l5673 25B2                         l6297 217E                         l5817 2A60  
                       l5809 2A30                         l5833 2BB6                         l5825 2B82  
                       l5841 2CA8                         l5657 241E                         l6481 1134  
                       l6449 0FEC                         l6393 0CD4                         l6377 0C22  
                       l4857 1DCC                         l4849 1DAA                         _ADFM 007E07  
                       l5667 258A                         l5755 1E70                         l5827 2B8E  
                       l5659 242A                         l5587 22CE                         l6483 113A  
                       l6475 10E8                         l4859 1DD2                         l5693 25F0  
                       l5773 1F02                         l5829 2B92                         l5597 22F6  
                       l6477 111E                         l5871 270E                         l5855 288E  
                       l5791 1F68                         l5783 1F32                         l5839 2C9C  
                       l5599 2302                         l6495 11A6                         l6479 112A  
                       l5785 1F42                         l5777 1F16                         l6497 11B4  
                       l6665 2EB4                         l5955 1AB8                         l5787 1F4C  
                       l6499 11C2                         l5869 268C                         l5993 0182  
                       _ADON 007E10                         l5999 01A2                         STR_1 FFB3  
                       STR_2 FF38                         STR_3 FFC9                         STR_4 FED3  
                       STR_5 FEF5                         STR_6 FF17                         STR_7 FF59  
                       STR_8 FE8C                         STR_9 FF78                         _DONE 007E11  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       u5101 1B5A                         u5040 2BFC                         u5050 2C2E  
                       u6011 2572                         u5301 2452                         u5047 2BF2  
                       u6031 259A                         u5057 2C24                         u5321 247E  
                       u6121 1E4C                         u5091 1B46                         _PEIE 007F96  
                       u6140 1E96                         _RBIE 007F93                         u6145 1E8C  
                       u7107 2F82                         _RCIF 007CF5                         u6280 28B6  
                       _RBIP 007F88                         u7067 197E                         u7077 198E  
                       u5750 2AF6                         u6630 077C                         u6470 0390  
                       u7087 2118                         u5744 2AE0                         u6288 28B8  
                       u5745 2ADA                         u7097 2F72                         u5851 21F8  
                       u6475 0384                         u5871 2224                         _TMR2 000FCC  
              _postscalermax 00FC                         _TOUT 0041               _check_response 2CF2  
    ReadByte_I2C@Temperature 00BE                         _main 2EB0                 ___ftpack@arg 0010  
               ___ftpack@exp 0013                         _sign 00A6                         _temp 0049  
                       fsr0h 000FEA        __size_of_output_logic 0786                         fsr1h 000FE2  
                       indf0 000FEF                         fsr0l 000FE9                         fsr2h 000FDA  
                       indf1 000FE7                         fsr1l 000FE1                         indf2 000FDF  
                       fsr2l 000FD9                 _start_signal 2F68                         btemp 0050  
                       log@x 00BF                         pclat 000FFA                         prodh 000FF4  
                       prodl 000FF3                         start 016E                __CFG_IESO$OFF 000000  
            __end_of_IdleI2C 3098                 _sprintf$2553 00D6                __CFG_MCLRE$ON 000000  
               ___ftmul@cntr 00B1                 ___param_bank 000010                 ___ftmul@sign 00B2  
            __end_of_InitADC 30DA              __end_of_ReadI2C 2FFE                ?_ReadByte_I2C 00B6  
            __end_of_OpenI2C 2FC4         __end_of_GetSampleADC 3032                 ___fttol@exp1 00C8  
                      ??_log 0040                 ___fttol@lval 00C4             state_logic@error 0010  
            __end_of_StopADC 30DE                        ?_main 0001              __end_of___awdiv 29FE  
                      _ADRES 000FC3              __end_of___ftadd 1CE2                        STR_10 FFE9  
                      STR_11 FF97                        STR_12 FFF5                        STR_13 FFDC  
                      STR_14 FFDC                        STR_15 FEB0              __end_of___awmod 2B70  
            __end_of___ftdiv 2648              __end_of___ftneg 2EB0              __end_of___lldiv 2A80  
            __end_of___ftmul 2562              ___awdiv@divisor 0018              __end_of___llmod 2BD6  
            __end_of___ftsub 2DD8              __end_of___fttol 1F7A                        _T2CON 000FCA  
                      _T3CON 000FB1               __CFG_DEBUG$OFF 000000                        i2l726 2FD2  
            ___awdiv@counter 001A                        _RCREG 000FAE                        _RCSTA 000FAB  
             _postscalerflag 009A                        _TMR3H 000FB3                        _TMR3L 000FB2  
                      _SPBRG 000FAF                        _PORTA 000F80                        _PORTB 000F81  
                      _PORTC 000F82                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TXREG 000FAD                        _TXSTA 000FAC  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000                 ___lltoft@exp 0020  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000                 ?_init_system 0001  
                      _check 0045               __CFG_EBTRB$OFF 000000                ___awtoft@sign 001B  
               _output_logic 0B34              __end_of_dpowers FE23                        _frexp 2866  
                      _errno 0094                        _scale 12BA              __end_of_isdigit 2FA6  
     __end_of_check_response 2D4C                ___ftpack@sign 0014               __CFG_BOREN$OFF 000000  
                      tablat 000FF5                        status 000FD8              __end_of_sprintf 0B34  
           __end_of_CloseI2C 30E2               WriteUSART@data 0010              __initialization 28F6  
             ??_ReadByte_I2C 0040                  log@exponent 00C2                 __end_of_main 2ED8  
           __end_of_IntServe 016E    __size_of_InitializeTimer3 0022                       ??_main 0041  
              ___fttol@sign1 00C3                __activetblptr 000002                ??_Salto_Enter 0011  
           __end_of_WaitFlag 30CE         __size_of__tdiv_to_l_ 0132    ReadByte_I2C@ReadAddressIC 00C1  
                     ?_frexp 0010             ___llmod@dividend 001D                       ?_scale 00B3  
            ?_check_response 0010             ___awdiv@dividend 0016             __end_of_WriteI2C 2D98  
           __end_of___awtoft 2E4C             __end_of___ftpack 27D6             __end_of___lbtoft 2F22  
           __end_of___lltoft 2CF2                       _INT0IF 007F91                  OpenI2C@slew 0010  
             __CFG_WDTEN$OFF 000000                       i2l5033 005A           __size_of_InitUSART 001C  
                     i2l5063 0100                       i2l5055 00C8                       i2l5047 0090  
                     i2l5039 0068                       i2l5065 0114                       i2l5057 00D0  
                     i2l5049 00A4                       i2l5059 00E4                       i2l5067 0116  
                     i2l5077 012E                       i2l5079 0130             __end_of___lwtoft 2F46  
                  ??_IdleI2C 0010           __size_of_ReadUSART 001E                       _OSCCON 000FD3  
                     _TMR2IE 007CE9                       _TMR2IF 007CF1                       _TMR3IE 007D01  
                     _TMR3IF 007D09                       _SPBRGH 000FB0                       _TMR2ON 007E52  
                     _SSPADD 000FC8                       _SSPBUF 000FC9                    ??_InitADC 0010  
                  ??_ReadI2C 0010                       _CharRX 004B                       _CharTX 011C  
                 _WaitForACK 30CE                    ??_OpenI2C 0011               __CFG_XINST$OFF 000000  
           __end_of__powers_ FE71         _SerialInterrupt_flag 0086           __size_of_Open_I2C1 0014  
         __size_of_OpenUSART 0060                    ??_StopADC 0010                       ___ftge 27D6  
                     ___wmul 2ED8                   _Value_temp 00A8                    ??___awdiv 001A  
                  ??___ftadd 0031               __CFG_STVREN$ON 000000                    ??___awmod 0014  
                  ??___ftdiv 0022                    ??___ftneg 0040                    ??___lldiv 0018  
                  ??___ftmul 003D                    ??___llmod 0025                    ??___ftsub 003D  
                  ??___fttol 00BE                       _fround 16D0                       clear_0 28FC  
                     clear_1 2908                       clear_2 2914             ___awdiv@quotient 001C  
            ___awmod@divisor 0012              ___awmod@counter 0014        ___ftmul@f3_as_product 00AE  
             _Valor_Medio_HT 008C               _Valor_Medio_TA 006E                 __pdataCOMRAM 004F  
                  ??_isdigit 0010                 __mediumconst FDFA                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                    ??_sprintf 00D0  
        __end_of_Salto_Enter 305E             __end_oflog@coeff FE8C                   __accesstop 0060  
    __end_of__initialization 296C            _ReadByte_I2C$2546 00BB    __size_of_SelectChannelADC 0014  
            __CFG_PBADEN$OFF 000000                   ___ftadd@f1 002B                   ___ftadd@f2 002E  
                 ___ftge@ff1 0010                   ___ftge@ff2 0013                 eval_poly@res 00BC  
              ___rparam_used 000001                   ___ftdiv@f1 001C                   ___ftdiv@f2 001F  
                 ___ftdiv@f3 0026        __size_of_GetSampleADC 0018                   ___ftneg@f1 00B3  
                 ___awtoft@c 0018                   ___lbtoft@c 001B                   ___ftmul@f1 0037  
                 ___ftmul@f2 003A                   ___ftsub@f1 0037                   ___ftsub@f2 003A  
                 ___fttol@f1 00BA                   _WriteUSART 3098               __pcstackCOMRAM 0001  
               __pidataBANK0 30AA                 __pidataBANK1 2E4C  __size_of_ResetVariables_I2C 000C  
                 ___lltoft@c 0018                __end_of_frexp 28F6                __end_of_scale 16D0  
               ?_state_logic 0001            __end_of_InitUSART 301A            __end_of_ReadUSART 2FE2  
                 ___lwtoft@c 0018       _Valor_Medio_TempAnalog 0134                   __div_to_l_ 231A  
          _output_logic$2547 014B            _output_logic$2548 014E            _output_logic$2549 0151  
              ReadUSART@data 0001                    ?_CloseI2C 0001            __end_of_Open_I2C1 3086  
          __end_of_OpenUSART 2C96         __end_of_ReadByte_I2C 1B36              __div_to_l_@exp1 001B  
            __div_to_l_@cntr 001A                      ??_frexp 0015                      ??_scale 0040  
            __div_to_l_@quot 0016                 _GetSampleADC 301A                   __pbssBANK0 0060  
                 __pbssBANK1 0134         __size_of_init_system 003C           __size_of_eval_poly 00E0  
                  ?_IntServe 0001                  ?_WaitForACK 0001                __div_to_l_@f1 0010  
              __div_to_l_@f2 0013           __size_of_read_byte 0080             _postscaler30smax 00FA  
                  ?_WaitFlag 0001                      ?___ftge 0010                      ?___wmul 001E  
              putsUSART@data 0011                      _I2C_Hum 0060                      ?_fround 00B3  
                    _I2C_Tem 0064             _InitializeTimer3 2F46                      _I2C_dev 007E  
                  ?_WriteI2C 0001                    ?___awtoft 0018                    ?___ftpack 0010  
                  ?___lbtoft 0018                    ?___lltoft 0018   __end_of_GetDataSensorDHT22 21E8  
                  ?___lwtoft 0018                  _Salto_Enter 3048     __size_of_SendStringUSART 0016  
                 ??_CloseI2C 0010           __size_of_putsUSART 0060                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7             _postscalersample 009E  
                    _CharTX2 0128                      _IdleI2C 3086                   ??_IntServe 0002  
                    _T_Byte1 0088                      _T_Byte2 008A                      _InitADC 30D4  
                    _ReadI2C 2FE2                      _OpenI2C 2FA6            __end_of__npowers_ FE4A  
                    __Hparam 0000                   _scale$2552 00B6                   ??_WaitFlag 0010  
                    __Lparam 0000                  ?_WriteUSART 0001                      _StopADC 30DA  
             _I2C_HumFormula 0068                      _Trigger 0043              __size_of___ftge 0090  
                    ___awdiv 297A                      ___ftadd 1B36                      ___awmod 2B00  
                    ___ftdiv 2562                      ___ftneg 2E80                      ___lldiv 29FE  
            __size_of___wmul 0026                      ___ftmul 2442                      ___llmod 2B70  
                    ___ftsub 2D98                      ___fttol 1E36                      __pcinit 28F6  
                 ??_WriteI2C 0011                   ??___awtoft 001B                   ??___ftpack 0015  
                 ??___lbtoft 001B            __end_of_eval_poly 2728              __size_of_fround 024E  
                    __ramtop 1000                   ??___lltoft 001C                      __ptext0 2EB0  
                    __ptext1 1CE2                      __ptext2 0B34                      __ptext3 0172  
                    __ptext4 12BA                      __ptext5 2F88                      __ptext6 16D0  
                    __ptext7 2B00                      __ptext8 297A                      __ptext9 21E8  
                 ??___lwtoft 001B                  ?__div_to_l_ 0010                      _dpowers FDFB  
                  _T2CONbits 000FCA             ??_check_response 0012                 __size_of_log 013A  
                    _isdigit 2F88                    _T3CONbits 000FB1          __size_of_WaitForACK 0006  
           ___awmod@dividend 0010            __end_of_read_byte 2B00               _I2C_TemFormula 006B  
                    _sprintf 0172         end_of_initialization 296C             _SelectChannelADC 305E  
              __Lmediumconst FDFA              ___lldiv@divisor 0014              ___lldiv@counter 001C  
                  _RCSTAbits 000FAB                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE            __end_of_putsUSART 2C36  
               read_byte@num 0015               __tdiv_to_l_@f1 0010               __tdiv_to_l_@f2 0013  
              ??__tdiv_to_l_ 0016                    _PORTBbits 000F81          SendStringUSART@text 0015  
       __size_of_state_logic 0154        __size_of_ReadByte_I2C 0218                    _TRISBbits 000F93  
                  _TRISCbits 000F94                   _postscaler 0096          __size_of_WriteUSART 0012  
          ??_SendStringUSART 0017                  ___ftdiv@exp 0029                    _TXSTAbits 000FAC  
        __size_of__div_to_l_ 0128                  ___ftmul@exp 00AD                 _ReadByte_I2C 191E  
             __end_of___ftge 2866               __end_of___wmul 2EFE                __pidataCOMRAM 30E2  
             __end_of_fround 191E                    _InitUSART 2FFE          start_initialization 28F6  
                  _ReadUSART 2FC4                   eval_poly@d 00B6                   eval_poly@n 00B8  
                 eval_poly@x 00B3          __end_of__tdiv_to_l_ 231A                  __end_of_log 20B4  
                _dataI2C_Hum 004D                  _dataI2C_Tem 004E             WriteI2C@data_out 0011  
          __size_of_CloseI2C 0004     __end_of_InitializeTimer3 2F68                    _Open_I2C1 3072  
                 frexp@value 0010                    _OpenUSART 2C36                ?_start_signal 0001  
                ADC@Value_AD 007A              ___llmod@divisor 0021                 ??_WaitForACK 0010  
            ___llmod@counter 0025            __size_of_IntServe 0166                    _Value_AN0 0090  
                  _Value_AN1 00AB   __end_of_ResetVariables_I2C 30C6                    _Value_AN9 0092  
                  _Value_pot 0071                     ??___ftge 0016                     ??___wmul 0022  
            _Value_tempdht22 0077            __size_of_WaitFlag 0008                  __pdataBANK0 00F1  
                __pdataBANK1 0100                     ??_fround 0040                sprintf@tmpval 00E3  
                 fround@prec 00BC            __size_of_WriteI2C 004C            __size_of___awtoft 0038  
               ?_Salto_Enter 0001            __size_of___ftpack 00AE            __size_of___lbtoft 0024  
                 ?_InitUSART 0001            __size_of___lltoft 005C                  __pbssCOMRAM 0041  
                 ?_ReadUSART 0001            __size_of___lwtoft 0024           __end_of_WaitForACK 30D4  
              __pcstackBANK0 00AD                __pcstackBANK1 0148                ??_init_system 0017  
              ?_output_logic 0001                 _isdigit$2142 0011                _Value_rhdht22 0074  
         _GetDataSensorDHT22 20B4                     ?_IdleI2C 0001               ??_start_signal 0010  
                 ?_Open_I2C1 0001                   ?_OpenUSART 0010                  sprintf@flag 00DF  
                sprintf@fval 00EB                  sprintf@prec 00EE                     ?_InitADC 0001  
                   ?_ReadI2C 0001                     ?_OpenI2C 0010          ?_GetDataSensorDHT22 0001  
  _Valor_Medio_HumedadTierra 0140            __CFG_CCP2MX$PORTC 000000                 ??_WriteUSART 0010  
                  __pintcode 0008                     ?_StopADC 0001                __pmediumconst FDFA  
                   ?___awdiv 0016                     ?___ftadd 002B                     ?___awmod 0010  
                   ?___ftdiv 001C                     ?___ftneg 00B3                     ?___lldiv 0010  
                   ?___ftmul 0037                     ?___llmod 001D                     ?___ftsub 0037  
                  __npowers_ FE23                     ?___fttol 00BA                  __tdiv_to_l_ 21E8  
   __end_of_SelectChannelADC 3072                 ??__div_to_l_ 0016                     ?_isdigit 0001  
       ??_GetDataSensorDHT22 002B                    _eval_poly 2648                     _I2C_manu 0080  
             ??_output_logic 0148                     ?_sprintf 00C9               __size_of_frexp 0090  
             __size_of_scale 0416                    _read_byte 2A80           __end_of_WriteUSART 30AA  
            ReadByte_I2C@tmp 00B9          __end_of_init_system 2E14               ___wmul@product 0022  
                   _PIE1bits 000F9D                     _PIR1bits 000F9E           __end_of__div_to_l_ 2442  
          _postscalerflag30s 009C                     _RH_Byte1 0082                     _RH_Byte2 0084  
                 _ADCON0bits 000FC2                    _putsUSART 2BD6        ReadByte_I2C@LowerByte 00C2  
          ___wmul@multiplier 001E              _SendStringUSART 3032                     _CheckSum 007C  
                ??_InitUSART 0017  ReadByte_I2C@RegisterAddress 00B6                   ?_eval_poly 00B3  
                ??_ReadUSART 0001                     _CloseI2C 30DE                  _INTCON2bits 000FF1  
                 ?_read_byte 0010                    copy_data0 292E                    copy_data1 294E  
           OpenI2C@sync_mode 0011                  ??_Open_I2C1 0012                  ??_OpenUSART 0012  
                   _IntServe 0008        ReadByte_I2C@UpperByte 00C3             __size_of_IdleI2C 0012  
            OpenUSART@config 0012                    frexp@eptr 0013             __size_of_InitADC 0006  
           __size_of_ReadI2C 001C                     __Hrparam 0000                     _WaitFlag 30C6  
           __size_of_OpenI2C 001E                     _Value_AD 008E                     __Lrparam 0000  
           __size_of_StopADC 0004             __size_of___awdiv 0084             __size_of___ftadd 01AC  
              ??_state_logic 0010             __size_of___awmod 0070             __size_of___ftdiv 00E6  
           __size_of___ftneg 0030             __size_of___lldiv 0082             __size_of___ftmul 0120  
           __size_of___llmod 0066             __size_of___ftsub 0040             __size_of___fttol 0144  
                   _WriteI2C 2D4C                     ___awtoft 2E14                     ___ftpack 2728  
                   ___lbtoft 2EFE                  _fround$2550 00B9                  _fround$2551 00B6  
                   ___lltoft 2C96                   ?_putsUSART 0011         __end_of_start_signal 2F88  
                   ___lwtoft 2F22                   sprintf@len 00DB                   sprintf@exp 00E1  
                 sprintf@val 00E7             __size_of_isdigit 001E         __size_of_Salto_Enter 0016  
                   __ptext10 231A                     __ptext11 2C96                     __ptext20 2ED8  
                   __ptext12 2B70                     __ptext21 2E14                     __ptext13 29FE  
                   __ptext30 30CE                     __ptext22 30DA                     __ptext14 1E36  
                   __ptext31 30C6                     __ptext23 305E                     __ptext15 2D98  
                   __ptext40 20B4                     __ptext32 30BA                     __ptext24 191E  
                   __ptext16 27D6                     __ptext41 2F68                     __ptext33 2FE2  
                   __ptext25 2EFE                     __ptext17 1F7A                     __ptext50 3032  
                   __ptext42 2A80                     __ptext34 3072                     __ptext26 2E80  
                   __ptext18 2866                     __ptext51 2BD6                     __ptext43 2CF2  
                   __ptext35 2FA6                     __ptext27 2442                     __ptext19 2648  
                   __ptext52 3048                     __ptext44 2F22                     __ptext36 3086  
                   __ptext28 1B36                     __ptext53 3098                     __ptext45 2562  
                   __ptext37 2F46                     __ptext29 2D4C                     __ptext54 2C36  
                   __ptext46 2728                     __ptext38 30D4                     __ptext47 30DE  
                   __ptext39 301A                     __ptext56 2FC4                     __ptext48 2DD8  
                   __ptext49 2FFE                  _init_system 2DD8                     __powers_ FE4A  
              ?_GetSampleADC 0010             __size_of_sprintf 09C2      __size_of_check_response 005A  
          ?_InitializeTimer3 0001                __size_of_main 0028                     _message1 0100  
                   _message2 010E           ??_InitializeTimer3 0010         __end_of_output_logic 12BA  
                   int$flags 0050      __end_of_SendStringUSART 3048                _present_state 004F  
                   log@coeff FE71                 _sensibilidad 00F7           _ResetVariables_I2C 30BA  
                 _INTCONbits 000FF2                  ??_eval_poly 00BA          __end_of_state_logic 1E36  
             OpenUSART@spbrg 0010                     isdigit@c 0012               ??_GetSampleADC 0012  
                   scale@scl 00B9          ?_ResetVariables_I2C 0001                  _samples_num 00A4  
                ??_read_byte 0012                     intlevel2 0000                    sprintf@ap 00DD  
                  sprintf@cp 00D9             __tdiv_to_l_@exp1 001E             __tdiv_to_l_@cntr 001D  
                  sprintf@sp 00C9             __tdiv_to_l_@quot 0019             ___lldiv@dividend 0010  
       ??_ResetVariables_I2C 0010                 ?__tdiv_to_l_ 0010                  ??_putsUSART 0013  
    SelectChannelADC@channel 0010            ?_SelectChannelADC 0010                     sprintf@c 00F0  
                   sprintf@f 00CB             ___lldiv@quotient 0018           ??_SelectChannelADC 0012  
          output_logic@error 014A                  _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
          __CFG_FOSC$INTIO67 000000                 _USART_Status 004C  
